
I2S_RECORDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a468  0800a468  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a470  0800a470  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c1c  200000c0  0800a538  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cdc  0800a538  00023cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a38  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003162  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00037d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f76e  00000000  00000000  00038c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000466d  00000000  00000000  000483e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004ca53  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004b78  00000000  00000000  0004caa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1c4 	.word	0x0800a1c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	0800a1c4 	.word	0x0800a1c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sd_card_init>:
static uint32_t wav_file_size2;
static uint32_t wav_file_size3;
uint8_t channel = 1;

void sd_card_init()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	490c      	ldr	r1, [pc, #48]	; (80005bc <sd_card_init+0x38>)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <sd_card_init+0x3c>)
 800058e:	f007 ff5d 	bl	800844c <f_mount>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <sd_card_init+0x40>)
 8000598:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <sd_card_init+0x40>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <sd_card_init+0x2c>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <sd_card_init+0x40>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <sd_card_init+0x44>)
 80005aa:	f008 fee7 	bl	800937c <iprintf>
		while(1);
 80005ae:	e7fe      	b.n	80005ae <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005b0:	4806      	ldr	r0, [pc, #24]	; (80005cc <sd_card_init+0x48>)
 80005b2:	f008 ff69 	bl	8009488 <puts>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20003c84 	.word	0x20003c84
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	200000dc 	.word	0x200000dc
 80005c8:	0800a1dc 	.word	0x0800a1dc
 80005cc:	0800a200 	.word	0x0800a200

080005d0 <start_recording>:

void start_recording(uint32_t frequency)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint32_t temp_number;
	uint32_t byte_rate = frequency * 2 * 2;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	617b      	str	r3, [r7, #20]

	wav_file_header[24] = (uint8_t)frequency;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <start_recording+0x10c>)
 80005e4:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <start_recording+0x10c>)
 80005ee:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	0c1b      	lsrs	r3, r3, #16
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <start_recording+0x10c>)
 80005f8:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	0e1b      	lsrs	r3, r3, #24
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b36      	ldr	r3, [pc, #216]	; (80006dc <start_recording+0x10c>)
 8000602:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <start_recording+0x10c>)
 800060a:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <start_recording+0x10c>)
 8000614:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	0c1b      	lsrs	r3, r3, #16
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <start_recording+0x10c>)
 800061e:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	0e1b      	lsrs	r3, r3, #24
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <start_recording+0x10c>)
 8000628:	77da      	strb	r2, [r3, #31]

	uint16_t data_size = sizeof(wav_file_header);
 800062a:	232c      	movs	r3, #44	; 0x2c
 800062c:	827b      	strh	r3, [r7, #18]

	// creating a file
	//sd_result = f_unlink (file_name1);
	sd_result = f_open(&wavFile1 ,file_name1, FA_WRITE|FA_CREATE_ALWAYS);
 800062e:	220a      	movs	r2, #10
 8000630:	492b      	ldr	r1, [pc, #172]	; (80006e0 <start_recording+0x110>)
 8000632:	482c      	ldr	r0, [pc, #176]	; (80006e4 <start_recording+0x114>)
 8000634:	f007 ff50 	bl	80084d8 <f_open>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <start_recording+0x118>)
 800063e:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile1,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 8000640:	8a7a      	ldrh	r2, [r7, #18]
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4925      	ldr	r1, [pc, #148]	; (80006dc <start_recording+0x10c>)
 8000648:	4826      	ldr	r0, [pc, #152]	; (80006e4 <start_recording+0x114>)
 800064a:	f008 f903 	bl	8008854 <f_write>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <start_recording+0x118>)
 8000654:	701a      	strb	r2, [r3, #0]

	//sd_result = f_unlink (file_name2);
	sd_result = f_open(&wavFile2 ,file_name2, FA_WRITE|FA_CREATE_ALWAYS);
 8000656:	220a      	movs	r2, #10
 8000658:	4924      	ldr	r1, [pc, #144]	; (80006ec <start_recording+0x11c>)
 800065a:	4825      	ldr	r0, [pc, #148]	; (80006f0 <start_recording+0x120>)
 800065c:	f007 ff3c 	bl	80084d8 <f_open>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <start_recording+0x118>)
 8000666:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile2,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 8000668:	8a7a      	ldrh	r2, [r7, #18]
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	491b      	ldr	r1, [pc, #108]	; (80006dc <start_recording+0x10c>)
 8000670:	481f      	ldr	r0, [pc, #124]	; (80006f0 <start_recording+0x120>)
 8000672:	f008 f8ef 	bl	8008854 <f_write>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <start_recording+0x118>)
 800067c:	701a      	strb	r2, [r3, #0]

	//sd_result = f_unlink (file_name3);
	sd_result = f_open(&wavFile3 ,file_name3, FA_WRITE|FA_CREATE_ALWAYS);
 800067e:	220a      	movs	r2, #10
 8000680:	491c      	ldr	r1, [pc, #112]	; (80006f4 <start_recording+0x124>)
 8000682:	481d      	ldr	r0, [pc, #116]	; (80006f8 <start_recording+0x128>)
 8000684:	f007 ff28 	bl	80084d8 <f_open>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <start_recording+0x118>)
 800068e:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile3,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 8000690:	8a7a      	ldrh	r2, [r7, #18]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4911      	ldr	r1, [pc, #68]	; (80006dc <start_recording+0x10c>)
 8000698:	4817      	ldr	r0, [pc, #92]	; (80006f8 <start_recording+0x128>)
 800069a:	f008 f8db 	bl	8008854 <f_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <start_recording+0x118>)
 80006a4:	701a      	strb	r2, [r3, #0]


	if(sd_result != 0)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <start_recording+0x118>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <start_recording+0xec>
	{
		printf("error in creating a file: %d \n", sd_result);
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <start_recording+0x118>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <start_recording+0x12c>)
 80006b6:	f008 fe61 	bl	800937c <iprintf>
		while(1);
 80006ba:	e7fe      	b.n	80006ba <start_recording+0xea>
	}
	else
	{
		printf("succeeded in opening a file \n");
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <start_recording+0x130>)
 80006be:	f008 fee3 	bl	8009488 <puts>
	}
	wav_file_size1 = 0;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <start_recording+0x134>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
	wav_file_size2 = 0;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <start_recording+0x138>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	wav_file_size3 = 0;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <start_recording+0x13c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	20000310 	.word	0x20000310
 80006e8:	200000dc 	.word	0x200000dc
 80006ec:	20000038 	.word	0x20000038
 80006f0:	20000540 	.word	0x20000540
 80006f4:	20000044 	.word	0x20000044
 80006f8:	20000770 	.word	0x20000770
 80006fc:	0800a224 	.word	0x0800a224
 8000700:	0800a244 	.word	0x0800a244
 8000704:	200009a0 	.word	0x200009a0
 8000708:	200009a4 	.word	0x200009a4
 800070c:	200009a8 	.word	0x200009a8

08000710 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size, uint8_t channel)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000720:	2120      	movs	r1, #32
 8000722:	4828      	ldr	r0, [pc, #160]	; (80007c4 <write2wave_file+0xb4>)
 8000724:	f002 f833 	bl	800278e <HAL_GPIO_TogglePin>

	uint32_t temp_number;

	switch(channel)
 8000728:	787b      	ldrb	r3, [r7, #1]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d02a      	beq.n	8000784 <write2wave_file+0x74>
 800072e:	2b03      	cmp	r3, #3
 8000730:	dc3a      	bgt.n	80007a8 <write2wave_file+0x98>
 8000732:	2b01      	cmp	r3, #1
 8000734:	d002      	beq.n	800073c <write2wave_file+0x2c>
 8000736:	2b02      	cmp	r3, #2
 8000738:	d012      	beq.n	8000760 <write2wave_file+0x50>
 800073a:	e035      	b.n	80007a8 <write2wave_file+0x98>
	{
		case 1:
			sd_result = f_write(&wavFile1,(void *)data, data_size,(UINT*)&temp_number);
 800073c:	887a      	ldrh	r2, [r7, #2]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4820      	ldr	r0, [pc, #128]	; (80007c8 <write2wave_file+0xb8>)
 8000746:	f008 f885 	bl	8008854 <f_write>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <write2wave_file+0xbc>)
 8000750:	701a      	strb	r2, [r3, #0]
			wav_file_size1 += data_size;
 8000752:	887a      	ldrh	r2, [r7, #2]
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <write2wave_file+0xc0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <write2wave_file+0xc0>)
 800075c:	6013      	str	r3, [r2, #0]
			break;
 800075e:	e023      	b.n	80007a8 <write2wave_file+0x98>

		case 2:
			sd_result = f_write(&wavFile2,(void *)data, data_size,(UINT*)&temp_number);
 8000760:	887a      	ldrh	r2, [r7, #2]
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	481a      	ldr	r0, [pc, #104]	; (80007d4 <write2wave_file+0xc4>)
 800076a:	f008 f873 	bl	8008854 <f_write>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <write2wave_file+0xbc>)
 8000774:	701a      	strb	r2, [r3, #0]
			wav_file_size2 += data_size;
 8000776:	887a      	ldrh	r2, [r7, #2]
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <write2wave_file+0xc8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4413      	add	r3, r2
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <write2wave_file+0xc8>)
 8000780:	6013      	str	r3, [r2, #0]
			break;
 8000782:	e011      	b.n	80007a8 <write2wave_file+0x98>

		case 3:
			sd_result = f_write(&wavFile3,(void *)data, data_size,(UINT*)&temp_number);
 8000784:	887a      	ldrh	r2, [r7, #2]
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <write2wave_file+0xcc>)
 800078e:	f008 f861 	bl	8008854 <f_write>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <write2wave_file+0xbc>)
 8000798:	701a      	strb	r2, [r3, #0]
			wav_file_size3 += data_size;
 800079a:	887a      	ldrh	r2, [r7, #2]
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <write2wave_file+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <write2wave_file+0xd0>)
 80007a4:	6013      	str	r3, [r2, #0]
			break;
 80007a6:	bf00      	nop
	}

	if(sd_result != 0)
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <write2wave_file+0xbc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d005      	beq.n	80007bc <write2wave_file+0xac>
	{
		printf("error in writing to the file: %d \n", sd_result);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <write2wave_file+0xbc>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <write2wave_file+0xd4>)
 80007b8:	f008 fde0 	bl	800937c <iprintf>
	}
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020000 	.word	0x40020000
 80007c8:	20000310 	.word	0x20000310
 80007cc:	200000dc 	.word	0x200000dc
 80007d0:	200009a0 	.word	0x200009a0
 80007d4:	20000540 	.word	0x20000540
 80007d8:	200009a4 	.word	0x200009a4
 80007dc:	20000770 	.word	0x20000770
 80007e0:	200009a8 	.word	0x200009a8
 80007e4:	0800a264 	.word	0x0800a264

080007e8 <stop_recording>:

void stop_recording()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size1 -= 8;
 80007ee:	4b76      	ldr	r3, [pc, #472]	; (80009c8 <stop_recording+0x1e0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3b08      	subs	r3, #8
 80007f4:	4a74      	ldr	r2, [pc, #464]	; (80009c8 <stop_recording+0x1e0>)
 80007f6:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size1;
 80007f8:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <stop_recording+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b73      	ldr	r3, [pc, #460]	; (80009cc <stop_recording+0x1e4>)
 8000800:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size1 >> 8);
 8000802:	4b71      	ldr	r3, [pc, #452]	; (80009c8 <stop_recording+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b70      	ldr	r3, [pc, #448]	; (80009cc <stop_recording+0x1e4>)
 800080c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size1 >> 16);
 800080e:	4b6e      	ldr	r3, [pc, #440]	; (80009c8 <stop_recording+0x1e0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	0c1b      	lsrs	r3, r3, #16
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <stop_recording+0x1e4>)
 8000818:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size1 >> 24);
 800081a:	4b6b      	ldr	r3, [pc, #428]	; (80009c8 <stop_recording+0x1e0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <stop_recording+0x1e4>)
 8000824:	71da      	strb	r2, [r3, #7]
	wav_file_size1 -= 36;
 8000826:	4b68      	ldr	r3, [pc, #416]	; (80009c8 <stop_recording+0x1e0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3b24      	subs	r3, #36	; 0x24
 800082c:	4a66      	ldr	r2, [pc, #408]	; (80009c8 <stop_recording+0x1e0>)
 800082e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size1;
 8000830:	4b65      	ldr	r3, [pc, #404]	; (80009c8 <stop_recording+0x1e0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <stop_recording+0x1e4>)
 8000838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size1 >> 8);
 800083c:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <stop_recording+0x1e0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b61      	ldr	r3, [pc, #388]	; (80009cc <stop_recording+0x1e4>)
 8000846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size1 >> 16);
 800084a:	4b5f      	ldr	r3, [pc, #380]	; (80009c8 <stop_recording+0x1e0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b5e      	ldr	r3, [pc, #376]	; (80009cc <stop_recording+0x1e4>)
 8000854:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size1 >> 24);
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <stop_recording+0x1e0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0e1b      	lsrs	r3, r3, #24
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <stop_recording+0x1e4>)
 8000862:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile1, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	4859      	ldr	r0, [pc, #356]	; (80009d0 <stop_recording+0x1e8>)
 800086a:	f008 fa10 	bl	8008c8e <f_lseek>
	f_write(&wavFile1,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800086e:	1dbb      	adds	r3, r7, #6
 8000870:	222c      	movs	r2, #44	; 0x2c
 8000872:	4956      	ldr	r1, [pc, #344]	; (80009cc <stop_recording+0x1e4>)
 8000874:	4856      	ldr	r0, [pc, #344]	; (80009d0 <stop_recording+0x1e8>)
 8000876:	f007 ffed 	bl	8008854 <f_write>
	f_close(&wavFile1);
 800087a:	4855      	ldr	r0, [pc, #340]	; (80009d0 <stop_recording+0x1e8>)
 800087c:	f008 f9dd 	bl	8008c3a <f_close>

	wav_file_size2 -= 8;
 8000880:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <stop_recording+0x1ec>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b08      	subs	r3, #8
 8000886:	4a53      	ldr	r2, [pc, #332]	; (80009d4 <stop_recording+0x1ec>)
 8000888:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size2;
 800088a:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <stop_recording+0x1ec>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <stop_recording+0x1e4>)
 8000892:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size2 >> 8);
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <stop_recording+0x1ec>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <stop_recording+0x1e4>)
 800089e:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size2 >> 16);
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <stop_recording+0x1ec>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	0c1b      	lsrs	r3, r3, #16
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b48      	ldr	r3, [pc, #288]	; (80009cc <stop_recording+0x1e4>)
 80008aa:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size2 >> 24);
 80008ac:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <stop_recording+0x1ec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	0e1b      	lsrs	r3, r3, #24
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <stop_recording+0x1e4>)
 80008b6:	71da      	strb	r2, [r3, #7]
	wav_file_size2 -= 36;
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <stop_recording+0x1ec>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3b24      	subs	r3, #36	; 0x24
 80008be:	4a45      	ldr	r2, [pc, #276]	; (80009d4 <stop_recording+0x1ec>)
 80008c0:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size2;
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <stop_recording+0x1ec>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b40      	ldr	r3, [pc, #256]	; (80009cc <stop_recording+0x1e4>)
 80008ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size2 >> 8);
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <stop_recording+0x1ec>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <stop_recording+0x1e4>)
 80008d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size2 >> 16);
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <stop_recording+0x1ec>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	0c1b      	lsrs	r3, r3, #16
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <stop_recording+0x1e4>)
 80008e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size2 >> 24);
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <stop_recording+0x1ec>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	0e1b      	lsrs	r3, r3, #24
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b36      	ldr	r3, [pc, #216]	; (80009cc <stop_recording+0x1e4>)
 80008f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile2, 0);
 80008f8:	2100      	movs	r1, #0
 80008fa:	4837      	ldr	r0, [pc, #220]	; (80009d8 <stop_recording+0x1f0>)
 80008fc:	f008 f9c7 	bl	8008c8e <f_lseek>
	f_write(&wavFile2,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	222c      	movs	r2, #44	; 0x2c
 8000904:	4931      	ldr	r1, [pc, #196]	; (80009cc <stop_recording+0x1e4>)
 8000906:	4834      	ldr	r0, [pc, #208]	; (80009d8 <stop_recording+0x1f0>)
 8000908:	f007 ffa4 	bl	8008854 <f_write>
	f_close(&wavFile2);
 800090c:	4832      	ldr	r0, [pc, #200]	; (80009d8 <stop_recording+0x1f0>)
 800090e:	f008 f994 	bl	8008c3a <f_close>

	wav_file_size3 -= 8;
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <stop_recording+0x1f4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3b08      	subs	r3, #8
 8000918:	4a30      	ldr	r2, [pc, #192]	; (80009dc <stop_recording+0x1f4>)
 800091a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size3;
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <stop_recording+0x1f4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <stop_recording+0x1e4>)
 8000924:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size3 >> 8);
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <stop_recording+0x1f4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <stop_recording+0x1e4>)
 8000930:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size3 >> 16);
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <stop_recording+0x1f4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	0c1b      	lsrs	r3, r3, #16
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <stop_recording+0x1e4>)
 800093c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size3 >> 24);
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <stop_recording+0x1f4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	0e1b      	lsrs	r3, r3, #24
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <stop_recording+0x1e4>)
 8000948:	71da      	strb	r2, [r3, #7]
	wav_file_size3 -= 36;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <stop_recording+0x1f4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3b24      	subs	r3, #36	; 0x24
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <stop_recording+0x1f4>)
 8000952:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size3;
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <stop_recording+0x1f4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <stop_recording+0x1e4>)
 800095c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size3 >> 8);
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <stop_recording+0x1f4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <stop_recording+0x1e4>)
 800096a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size3 >> 16);
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <stop_recording+0x1f4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	0c1b      	lsrs	r3, r3, #16
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <stop_recording+0x1e4>)
 8000978:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size3 >> 24);
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <stop_recording+0x1f4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	0e1b      	lsrs	r3, r3, #24
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <stop_recording+0x1e4>)
 8000986:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile3, 0);
 800098a:	2100      	movs	r1, #0
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <stop_recording+0x1f8>)
 800098e:	f008 f97e 	bl	8008c8e <f_lseek>
	f_write(&wavFile3,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	222c      	movs	r2, #44	; 0x2c
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <stop_recording+0x1e4>)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <stop_recording+0x1f8>)
 800099a:	f007 ff5b 	bl	8008854 <f_write>
	f_close(&wavFile3);
 800099e:	4810      	ldr	r0, [pc, #64]	; (80009e0 <stop_recording+0x1f8>)
 80009a0:	f008 f94b 	bl	8008c3a <f_close>

	if(sd_result != 0)
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <stop_recording+0x1fc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <stop_recording+0x1d2>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <stop_recording+0x1fc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <stop_recording+0x200>)
 80009b4:	f008 fce2 	bl	800937c <iprintf>
		while(1);
 80009b8:	e7fe      	b.n	80009b8 <stop_recording+0x1d0>
	}

	printf("closed the file \n");
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <stop_recording+0x204>)
 80009bc:	f008 fd64 	bl	8009488 <puts>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200009a0 	.word	0x200009a0
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000310 	.word	0x20000310
 80009d4:	200009a4 	.word	0x200009a4
 80009d8:	20000540 	.word	0x20000540
 80009dc:	200009a8 	.word	0x200009a8
 80009e0:	20000770 	.word	0x20000770
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	0800a288 	.word	0x0800a288
 80009ec:	0800a2b4 	.word	0x0800a2b4

080009f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d013      	beq.n	8000a30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a18:	e000      	b.n	8000a1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f9      	beq.n	8000a1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 ff7e 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f902 	bl	8000c50 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a4c:	f000 f968 	bl	8000d20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 fa98 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a54:	f000 fa58 	bl	8000f08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a58:	f000 fa2c 	bl	8000eb4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000a5c:	f005 fe2c 	bl	80066b8 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8000a60:	f000 fa08 	bl	8000e74 <MX_SDIO_SD_Init>
  MX_I2S3_Init();
 8000a64:	f000 f9aa 	bl	8000dbc <MX_I2S3_Init>
  MX_I2S2_Init();
 8000a68:	f000 f97a 	bl	8000d60 <MX_I2S2_Init>
  MX_I2S4_Init();
 8000a6c:	f000 f9d4 	bl	8000e18 <MX_I2S4_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 8000a70:	4865      	ldr	r0, [pc, #404]	; (8000c08 <main+0x1c8>)
 8000a72:	f002 f8bb 	bl	8002bec <HAL_I2S_DMAStop>
  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
  HAL_Delay(500);
 8000a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7a:	f000 ffd5 	bl	8001a28 <HAL_Delay>
  sd_card_init();
 8000a7e:	f7ff fd81 	bl	8000584 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_flag)
 8000a82:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <main+0x1cc>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d044      	beq.n	8000b16 <main+0xd6>
		  {

			  if(start_stop_recording)
 8000a8c:	4b60      	ldr	r3, [pc, #384]	; (8000c10 <main+0x1d0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d023      	beq.n	8000ade <main+0x9e>
			  {
				  HAL_I2S_DMAStop(&hi2s2);
 8000a96:	485c      	ldr	r0, [pc, #368]	; (8000c08 <main+0x1c8>)
 8000a98:	f002 f8a8 	bl	8002bec <HAL_I2S_DMAStop>
				  HAL_I2S_DMAStop(&hi2s3);
 8000a9c:	485d      	ldr	r0, [pc, #372]	; (8000c14 <main+0x1d4>)
 8000a9e:	f002 f8a5 	bl	8002bec <HAL_I2S_DMAStop>
				  HAL_I2S_DMAStop(&hi2s4);
 8000aa2:	485d      	ldr	r0, [pc, #372]	; (8000c18 <main+0x1d8>)
 8000aa4:	f002 f8a2 	bl	8002bec <HAL_I2S_DMAStop>
				  start_stop_recording = 0;
 8000aa8:	4b59      	ldr	r3, [pc, #356]	; (8000c10 <main+0x1d0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
				  stop_recording();
 8000aae:	f7ff fe9b 	bl	80007e8 <stop_recording>
				  half_i2s1 = 0;
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <main+0x1dc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
				  full_i2s1 = 0;
 8000ab8:	4b59      	ldr	r3, [pc, #356]	; (8000c20 <main+0x1e0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
				  half_i2s2 = 0;
 8000abe:	4b59      	ldr	r3, [pc, #356]	; (8000c24 <main+0x1e4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
				  full_i2s2 = 0;
 8000ac4:	4b58      	ldr	r3, [pc, #352]	; (8000c28 <main+0x1e8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
				  half_i2s3 = 0;
 8000aca:	4b58      	ldr	r3, [pc, #352]	; (8000c2c <main+0x1ec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
				  full_i2s3 = 0;
 8000ad0:	4b57      	ldr	r3, [pc, #348]	; (8000c30 <main+0x1f0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
				  printf("stop recording \n");
 8000ad6:	4857      	ldr	r0, [pc, #348]	; (8000c34 <main+0x1f4>)
 8000ad8:	f008 fcd6 	bl	8009488 <puts>
 8000adc:	e018      	b.n	8000b10 <main+0xd0>
			  }
			  else
			  {
				  start_stop_recording = 1;
 8000ade:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <main+0x1d0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
				  start_recording(I2S_AUDIOFREQ_22K);
 8000ae4:	f245 6022 	movw	r0, #22050	; 0x5622
 8000ae8:	f7ff fd72 	bl	80005d0 <start_recording>
				  //printf("start_recording %d and %d\n", half_i2s, full_i2s,1);
				  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s1, sizeof(data_i2s1)/2);
 8000aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af0:	4951      	ldr	r1, [pc, #324]	; (8000c38 <main+0x1f8>)
 8000af2:	4845      	ldr	r0, [pc, #276]	; (8000c08 <main+0x1c8>)
 8000af4:	f001 ffbe 	bl	8002a74 <HAL_I2S_Receive_DMA>
				  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)data_i2s2, sizeof(data_i2s2)/2);
 8000af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000afc:	494f      	ldr	r1, [pc, #316]	; (8000c3c <main+0x1fc>)
 8000afe:	4845      	ldr	r0, [pc, #276]	; (8000c14 <main+0x1d4>)
 8000b00:	f001 ffb8 	bl	8002a74 <HAL_I2S_Receive_DMA>
				  HAL_I2S_Receive_DMA(&hi2s4, (uint16_t *)data_i2s3, sizeof(data_i2s3)/2);
 8000b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b08:	494d      	ldr	r1, [pc, #308]	; (8000c40 <main+0x200>)
 8000b0a:	4843      	ldr	r0, [pc, #268]	; (8000c18 <main+0x1d8>)
 8000b0c:	f001 ffb2 	bl	8002a74 <HAL_I2S_Receive_DMA>

			  }
			  button_flag = 0;
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <main+0x1cc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //recording channel 1
	  if(start_stop_recording == 1 && half_i2s1 == 1)
 8000b16:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <main+0x1d0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10d      	bne.n	8000b3c <main+0xfc>
 8000b20:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <main+0x1dc>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d108      	bne.n	8000b3c <main+0xfc>
	  {
		  write2wave_file(((uint8_t*)data_i2s1),	 WAV_WRITE_SAMPLE_COUNT,1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b30:	4841      	ldr	r0, [pc, #260]	; (8000c38 <main+0x1f8>)
 8000b32:	f7ff fded 	bl	8000710 <write2wave_file>
		  half_i2s1 = 0;
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <main+0x1dc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s1 == 1)
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <main+0x1d0>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10e      	bne.n	8000b64 <main+0x124>
 8000b46:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <main+0x1e0>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d109      	bne.n	8000b64 <main+0x124>
	  {
		  write2wave_file(((uint8_t*)data_i2s1) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,1);
 8000b50:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <main+0x204>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fdd9 	bl	8000710 <write2wave_file>
		  full_i2s1 = 0;
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <main+0x1e0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
	  }

	  //recording channel 2
	  if(start_stop_recording == 1 && half_i2s2 == 1)
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <main+0x1d0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d10d      	bne.n	8000b8a <main+0x14a>
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <main+0x1e4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <main+0x14a>
	  {
		  write2wave_file(((uint8_t*)data_i2s2),	 WAV_WRITE_SAMPLE_COUNT,2);
 8000b78:	2202      	movs	r2, #2
 8000b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7e:	482f      	ldr	r0, [pc, #188]	; (8000c3c <main+0x1fc>)
 8000b80:	f7ff fdc6 	bl	8000710 <write2wave_file>
		  half_i2s2 = 0;
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0x1e4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s2 == 1)
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <main+0x1d0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10e      	bne.n	8000bb2 <main+0x172>
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <main+0x1e8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d109      	bne.n	8000bb2 <main+0x172>
	  {
		  write2wave_file(((uint8_t*)data_i2s2) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,2);
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <main+0x208>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fdb2 	bl	8000710 <write2wave_file>
		  full_i2s2 = 0;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <main+0x1e8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	  }

	  //recording channel 3
	  if(start_stop_recording == 1 && half_i2s3 == 1)
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <main+0x1d0>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10d      	bne.n	8000bd8 <main+0x198>
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <main+0x1ec>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d108      	bne.n	8000bd8 <main+0x198>
	  {
		  write2wave_file(((uint8_t*)data_i2s3),	 WAV_WRITE_SAMPLE_COUNT,3);
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	481c      	ldr	r0, [pc, #112]	; (8000c40 <main+0x200>)
 8000bce:	f7ff fd9f 	bl	8000710 <write2wave_file>
		  half_i2s3 = 0;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <main+0x1ec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s3 == 1)
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <main+0x1d0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	f47f af4f 	bne.w	8000a82 <main+0x42>
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <main+0x1f0>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	f47f af49 	bne.w	8000a82 <main+0x42>
	  {
		  write2wave_file(((uint8_t*)data_i2s3) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,3);
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <main+0x20c>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fd89 	bl	8000710 <write2wave_file>
		  full_i2s3 = 0;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <main+0x1f0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 8000c04:	e73d      	b.n	8000a82 <main+0x42>
 8000c06:	bf00      	nop
 8000c08:	200009ac 	.word	0x200009ac
 8000c0c:	20000c6c 	.word	0x20000c6c
 8000c10:	20000c6d 	.word	0x20000c6d
 8000c14:	200009f4 	.word	0x200009f4
 8000c18:	20000a3c 	.word	0x20000a3c
 8000c1c:	20003c70 	.word	0x20003c70
 8000c20:	20003c71 	.word	0x20003c71
 8000c24:	20003c72 	.word	0x20003c72
 8000c28:	20003c73 	.word	0x20003c73
 8000c2c:	20003c74 	.word	0x20003c74
 8000c30:	20003c75 	.word	0x20003c75
 8000c34:	0800a2c8 	.word	0x0800a2c8
 8000c38:	20000c70 	.word	0x20000c70
 8000c3c:	20001c70 	.word	0x20001c70
 8000c40:	20002c70 	.word	0x20002c70
 8000c44:	20001470 	.word	0x20001470
 8000c48:	20002470 	.word	0x20002470
 8000c4c:	20003470 	.word	0x20003470

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 faa4 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <SystemClock_Config+0xcc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fd47 	bl	8003768 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce0:	f000 fa5e 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2103      	movs	r1, #3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 ffa9 	bl	8003c58 <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d0c:	f000 fa48 	bl	80011a0 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d36:	2301      	movs	r3, #1
 8000d38:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f9a5 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d54:	f000 fa24 	bl	80011a0 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <MX_I2S2_Init+0x58>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d86:	f245 6222 	movw	r2, #22050	; 0x5622
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2S2_Init+0x54>)
 8000da0:	f001 fd28 	bl	80027f4 <HAL_I2S_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000daa:	f000 f9f9 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200009ac 	.word	0x200009ac
 8000db8:	40003800 	.word	0x40003800

08000dbc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <MX_I2S3_Init+0x58>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dc8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dcc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000de2:	f245 6222 	movw	r2, #22050	; 0x5622
 8000de6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_I2S3_Init+0x54>)
 8000dfc:	f001 fcfa 	bl	80027f4 <HAL_I2S_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e06:	f000 f9cb 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200009f4 	.word	0x200009f4
 8000e14:	40003c00 	.word	0x40003c00

08000e18 <MX_I2S4_Init>:
  * @brief I2S4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S4_Init 0 */

  /* USER CODE BEGIN I2S4_Init 1 */

  /* USER CODE END I2S4_Init 1 */
  hi2s4.Instance = SPI4;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <MX_I2S4_Init+0x58>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2s4.Init.Mode = I2S_MODE_MASTER_RX;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e28:	605a      	str	r2, [r3, #4]
  hi2s4.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hi2s4.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	60da      	str	r2, [r3, #12]
  hi2s4.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2s4.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e3e:	f245 6222 	movw	r2, #22050	; 0x5622
 8000e42:	615a      	str	r2, [r3, #20]
  hi2s4.Init.CPOL = I2S_CPOL_LOW;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2s4.Init.ClockSource = I2S_CLOCK_PLL;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2s4.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s4) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_I2S4_Init+0x54>)
 8000e58:	f001 fccc 	bl	80027f4 <HAL_I2S_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2S4_Init+0x4e>
  {
    Error_Handler();
 8000e62:	f000 f99d 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S4_Init 2 */

  /* USER CODE END I2S4_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000a3c 	.word	0x20000a3c
 8000e70:	40013400 	.word	0x40013400

08000e74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <MX_SDIO_SD_Init+0x3c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <MX_SDIO_SD_Init+0x38>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	20000ba4 	.word	0x20000ba4
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f004 fbaf 	bl	800564e <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f953 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000c28 	.word	0x20000c28
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_DMA_Init+0x78>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f000 fe6b 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f50:	200b      	movs	r0, #11
 8000f52:	f000 fe84 	bl	8001c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f000 fe63 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f60:	200e      	movs	r0, #14
 8000f62:	f000 fe7c 	bl	8001c5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2038      	movs	r0, #56	; 0x38
 8000f6c:	f000 fe5b 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f70:	2038      	movs	r0, #56	; 0x38
 8000f72:	f000 fe74 	bl	8001c5e <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a30      	ldr	r2, [pc, #192]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a29      	ldr	r2, [pc, #164]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_GPIO_Init+0xe0>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_GPIO_Init+0xe0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2120      	movs	r1, #32
 800100e:	4816      	ldr	r0, [pc, #88]	; (8001068 <MX_GPIO_Init+0xe4>)
 8001010:	f001 fba4 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_GPIO_Init+0xe8>)
 800102c:	f001 fa12 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001030:	2320      	movs	r3, #32
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <MX_GPIO_Init+0xe4>)
 8001048:	f001 fa04 	bl	8002454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2028      	movs	r0, #40	; 0x28
 8001052:	f000 fde8 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001056:	2028      	movs	r0, #40	; 0x28
 8001058:	f000 fe01 	bl	8001c5e <HAL_NVIC_EnableIRQ>

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020800 	.word	0x40020800

08001070 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e009      	b.n	8001096 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fcb0 	bl	80009f0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf1      	blt.n	8001082 <_write+0x12>
  }
  return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_I2S_RxCpltCallback>:

//	l,r,l,r,l,
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(hi2s->Instance == hi2s2.Instance)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_I2S_RxCpltCallback+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d103      	bne.n	80010c4 <HAL_I2S_RxCpltCallback+0x1c>
	{
		full_i2s1 = 1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_I2S_RxCpltCallback+0x54>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
	else if(hi2s->Instance == hi2s4.Instance)
	{
		full_i2s3 = 1;
	}

}
 80010c2:	e012      	b.n	80010ea <HAL_I2S_RxCpltCallback+0x42>
	else if(hi2s->Instance == hi2s3.Instance)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_I2S_RxCpltCallback+0x58>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d103      	bne.n	80010d8 <HAL_I2S_RxCpltCallback+0x30>
		full_i2s2 = 1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_I2S_RxCpltCallback+0x5c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	e008      	b.n	80010ea <HAL_I2S_RxCpltCallback+0x42>
	else if(hi2s->Instance == hi2s4.Instance)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_I2S_RxCpltCallback+0x60>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d102      	bne.n	80010ea <HAL_I2S_RxCpltCallback+0x42>
		full_i2s3 = 1;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_I2S_RxCpltCallback+0x64>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200009ac 	.word	0x200009ac
 80010fc:	20003c71 	.word	0x20003c71
 8001100:	200009f4 	.word	0x200009f4
 8001104:	20003c73 	.word	0x20003c73
 8001108:	20000a3c 	.word	0x20000a3c
 800110c:	20003c75 	.word	0x20003c75

08001110 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(hi2s->Instance == hi2s2.Instance)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_I2S_RxHalfCpltCallback+0x50>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d103      	bne.n	800112c <HAL_I2S_RxHalfCpltCallback+0x1c>
	{
		half_i2s1 = 1;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_I2S_RxHalfCpltCallback+0x54>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2s->Instance == hi2s4.Instance)
	{
		half_i2s3 = 1;
	}
}
 800112a:	e012      	b.n	8001152 <HAL_I2S_RxHalfCpltCallback+0x42>
	else if(hi2s->Instance == hi2s3.Instance)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_I2S_RxHalfCpltCallback+0x58>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d103      	bne.n	8001140 <HAL_I2S_RxHalfCpltCallback+0x30>
		half_i2s2 = 1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_I2S_RxHalfCpltCallback+0x5c>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
}
 800113e:	e008      	b.n	8001152 <HAL_I2S_RxHalfCpltCallback+0x42>
	else if(hi2s->Instance == hi2s4.Instance)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_I2S_RxHalfCpltCallback+0x60>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d102      	bne.n	8001152 <HAL_I2S_RxHalfCpltCallback+0x42>
		half_i2s3 = 1;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_I2S_RxHalfCpltCallback+0x64>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200009ac 	.word	0x200009ac
 8001164:	20003c70 	.word	0x20003c70
 8001168:	200009f4 	.word	0x200009f4
 800116c:	20003c72 	.word	0x20003c72
 8001170:	20000a3c 	.word	0x20000a3c
 8001174:	20003c74 	.word	0x20003c74

08001178 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001188:	d102      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x18>
	{
		button_flag = 1;
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_GPIO_EXTI_Callback+0x24>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
	}
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20000c6c 	.word	0x20000c6c

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ea:	2007      	movs	r0, #7
 80011ec:	f000 fd10 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b090      	sub	sp, #64	; 0x40
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_I2S_MspInit+0x220>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d17b      	bne.n	8001316 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a7e      	ldr	r2, [pc, #504]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b7c      	ldr	r3, [pc, #496]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
 800123e:	4b78      	ldr	r3, [pc, #480]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b75      	ldr	r3, [pc, #468]	; (8001420 <HAL_I2S_MspInit+0x224>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b71      	ldr	r3, [pc, #452]	; (8001420 <HAL_I2S_MspInit+0x224>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a70      	ldr	r2, [pc, #448]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001272:	2308      	movs	r3, #8
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001282:	2305      	movs	r3, #5
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	4865      	ldr	r0, [pc, #404]	; (8001424 <HAL_I2S_MspInit+0x228>)
 800128e:	f001 f8e1 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a4:	2305      	movs	r3, #5
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ac:	4619      	mov	r1, r3
 80012ae:	485e      	ldr	r0, [pc, #376]	; (8001428 <HAL_I2S_MspInit+0x22c>)
 80012b0:	f001 f8d0 	bl	8002454 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80012b4:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012b6:	4a5e      	ldr	r2, [pc, #376]	; (8001430 <HAL_I2S_MspInit+0x234>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d4:	4b55      	ldr	r3, [pc, #340]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012da:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f2:	4b4e      	ldr	r3, [pc, #312]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012f8:	484c      	ldr	r0, [pc, #304]	; (800142c <HAL_I2S_MspInit+0x230>)
 80012fa:	f000 fccb 	bl	8001c94 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001304:	f7ff ff4c 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_I2S_MspInit+0x230>)
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c
 800130e:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_I2S_MspInit+0x230>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001314:	e117      	b.n	8001546 <HAL_I2S_MspInit+0x34a>
  else if(hi2s->Instance==SPI3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a46      	ldr	r2, [pc, #280]	; (8001434 <HAL_I2S_MspInit+0x238>)
 800131c:	4293      	cmp	r3, r2
 800131e:	f040 8091 	bne.w	8001444 <HAL_I2S_MspInit+0x248>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_I2S_MspInit+0x224>)
 800132c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a36      	ldr	r2, [pc, #216]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_I2S_MspInit+0x224>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_I2S_MspInit+0x224>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001376:	2310      	movs	r3, #16
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001386:	2306      	movs	r3, #6
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138e:	4619      	mov	r1, r3
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <HAL_I2S_MspInit+0x23c>)
 8001392:	f001 f85f 	bl	8002454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001396:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a8:	2306      	movs	r3, #6
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b0:	4619      	mov	r1, r3
 80013b2:	481c      	ldr	r0, [pc, #112]	; (8001424 <HAL_I2S_MspInit+0x228>)
 80013b4:	f001 f84e 	bl	8002454 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_I2S_MspInit+0x244>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013de:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80013fc:	480f      	ldr	r0, [pc, #60]	; (800143c <HAL_I2S_MspInit+0x240>)
 80013fe:	f000 fc49 	bl	8001c94 <HAL_DMA_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_I2S_MspInit+0x210>
      Error_Handler();
 8001408:	f7ff feca 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_I2S_MspInit+0x240>)
 8001410:	63da      	str	r2, [r3, #60]	; 0x3c
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_I2S_MspInit+0x240>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001418:	e095      	b.n	8001546 <HAL_I2S_MspInit+0x34a>
 800141a:	bf00      	nop
 800141c:	40003800 	.word	0x40003800
 8001420:	40023800 	.word	0x40023800
 8001424:	40020800 	.word	0x40020800
 8001428:	40020400 	.word	0x40020400
 800142c:	20000a84 	.word	0x20000a84
 8001430:	40026058 	.word	0x40026058
 8001434:	40003c00 	.word	0x40003c00
 8001438:	40020000 	.word	0x40020000
 800143c:	20000ae4 	.word	0x20000ae4
 8001440:	40026010 	.word	0x40026010
  else if(hi2s->Instance==SPI4)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a41      	ldr	r2, [pc, #260]	; (8001550 <HAL_I2S_MspInit+0x354>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d17b      	bne.n	8001546 <HAL_I2S_MspInit+0x34a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b40      	ldr	r3, [pc, #256]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001458:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a38      	ldr	r2, [pc, #224]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_I2S_MspInit+0x358>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_I2S_MspInit+0x358>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_I2S_MspInit+0x358>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014b2:	2305      	movs	r3, #5
 80014b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4826      	ldr	r0, [pc, #152]	; (8001558 <HAL_I2S_MspInit+0x35c>)
 80014be:	f000 ffc9 	bl	8002454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80014d4:	2306      	movs	r3, #6
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <HAL_I2S_MspInit+0x360>)
 80014e0:	f000 ffb8 	bl	8002454 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_I2S_MspInit+0x364>)
 80014e6:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_I2S_MspInit+0x368>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_I2S_MspInit+0x364>)
 80014ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f0:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_I2S_MspInit+0x364>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_I2S_MspInit+0x364>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001504:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001514:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_I2S_MspInit+0x364>)
 800152c:	f000 fbb2 	bl	8001c94 <HAL_DMA_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2S_MspInit+0x33e>
      Error_Handler();
 8001536:	f7ff fe33 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi4_rx);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_I2S_MspInit+0x364>)
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_I2S_MspInit+0x364>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	; 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40013400 	.word	0x40013400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	20000b44 	.word	0x20000b44
 8001564:	40026410 	.word	0x40026410

08001568 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a38      	ldr	r2, [pc, #224]	; (8001668 <HAL_SD_MspInit+0x100>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d16a      	bne.n	8001660 <HAL_SD_MspInit+0xf8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_SD_MspInit+0x104>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a36      	ldr	r2, [pc, #216]	; (800166c <HAL_SD_MspInit+0x104>)
 8001594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_SD_MspInit+0x104>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_SD_MspInit+0x104>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <HAL_SD_MspInit+0x104>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_SD_MspInit+0x104>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_SD_MspInit+0x104>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a28      	ldr	r2, [pc, #160]	; (800166c <HAL_SD_MspInit+0x104>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_SD_MspInit+0x104>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_SD_MspInit+0x104>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_SD_MspInit+0x104>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_SD_MspInit+0x104>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80015fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800160c:	230c      	movs	r3, #12
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4816      	ldr	r0, [pc, #88]	; (8001670 <HAL_SD_MspInit+0x108>)
 8001618:	f000 ff1c 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800162e:	230c      	movs	r3, #12
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <HAL_SD_MspInit+0x10c>)
 800163a:	f000 ff0b 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800163e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001650:	230c      	movs	r3, #12
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <HAL_SD_MspInit+0x110>)
 800165c:	f000 fefa 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_UART_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12b      	bne.n	80016f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_UART_MspInit+0x88>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d6:	230c      	movs	r3, #12
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e6:	2307      	movs	r3, #7
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_UART_MspInit+0x8c>)
 80016f2:	f000 feaf 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004400 	.word	0x40004400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>
	...

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	4801      	ldr	r0, [pc, #4]	; (8001724 <HardFault_Handler+0x10>)
 800171e:	f001 f81d 	bl	800275c <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0xe>
 8001724:	40020000 	.word	0x40020000

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f93e 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA1_Stream0_IRQHandler+0x10>)
 8001776:	f000 fc03 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000ae4 	.word	0x20000ae4

08001784 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA1_Stream3_IRQHandler+0x10>)
 800178a:	f000 fbf9 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000a84 	.word	0x20000a84

08001798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800179c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a0:	f001 f810 	bl	80027c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA2_Stream0_IRQHandler+0x10>)
 80017ae:	f000 fbe7 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000b44 	.word	0x20000b44

080017bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
	}

return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181e:	605a      	str	r2, [r3, #4]
	return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f007 fc62 	bl	8009158 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20020000 	.word	0x20020000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20003c78 	.word	0x20003c78
 80018c8:	20003ce0 	.word	0x20003ce0

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800190c:	4c0b      	ldr	r4, [pc, #44]	; (800193c <LoopFillZerobss+0x26>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800191a:	f7ff ffd7 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191e:	f007 fc21 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff f88d 	bl	8000a40 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001934:	0800a478 	.word	0x0800a478
  ldr r2, =_sbss
 8001938:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800193c:	20003cdc 	.word	0x20003cdc

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_Init+0x40>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_Init+0x40>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_Init+0x40>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f94f 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fc18 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f967 	bl	8001c7a <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 f92f 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000050 	.word	0x20000050
 80019e0:	20000058 	.word	0x20000058
 80019e4:	20000054 	.word	0x20000054

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000058 	.word	0x20000058
 8001a0c:	20003c7c 	.word	0x20003c7c

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20003c7c 	.word	0x20003c7c

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000058 	.word	0x20000058

08001a70 <__NVIC_SetPriorityGrouping>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_GetPriorityGrouping>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <__NVIC_EnableIRQ+0x38>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff29 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff3e 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff8e 	bl	8001b64 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5d 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff31 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffa2 	bl	8001bcc <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff feb6 	bl	8001a10 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e099      	b.n	8001de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	e00f      	b.n	8001cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd2:	f7ff fe9d 	bl	8001a10 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d908      	bls.n	8001cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e078      	b.n	8001de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e8      	bne.n	8001cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_DMA_Init+0x158>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d107      	bne.n	8001d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4313      	orrs	r3, r2
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d117      	bne.n	8001db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fadf 	bl	800235c <DMA_CheckFifoParam>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db2:	2301      	movs	r3, #1
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa96 	bl	80022f0 <DMA_CalcBaseAndBitshift>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	223f      	movs	r2, #63	; 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f010803f 	.word	0xf010803f

08001df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Start_IT+0x26>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e040      	b.n	8001e98 <HAL_DMA_Start_IT+0xa8>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12f      	bne.n	8001e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fa28 	bl	8002294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0216 	orr.w	r2, r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0208 	orr.w	r2, r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e005      	b.n	8001e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e92:	2302      	movs	r3, #2
 8001e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eae:	f7ff fdaf 	bl	8001a10 <HAL_GetTick>
 8001eb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e052      	b.n	8001f78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0216 	bic.w	r2, r2, #22
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_DMA_Abort+0x62>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f22:	e013      	b.n	8001f4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f24:	f7ff fd74 	bl	8001a10 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d90c      	bls.n	8001f4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e015      	b.n	8001f78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1e4      	bne.n	8001f24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	223f      	movs	r2, #63	; 0x3f
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f8c:	4b8e      	ldr	r3, [pc, #568]	; (80021c8 <HAL_DMA_IRQHandler+0x248>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8e      	ldr	r2, [pc, #568]	; (80021cc <HAL_DMA_IRQHandler+0x24c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2208      	movs	r2, #8
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2208      	movs	r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2210      	movs	r2, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2210      	movs	r2, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e01f      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2220      	movs	r2, #32
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808f 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8087 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d136      	bne.n	8002198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x1da>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	223f      	movs	r2, #63	; 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07e      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
        }
        return;
 8002196:	e079      	b.n	800228c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e02c      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
 80021c6:	bf00      	nop
 80021c8:	20000050 	.word	0x20000050
 80021cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e01e      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0210 	bic.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	2b00      	cmp	r3, #0
 8002226:	d032      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d307      	bcc.n	8002268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f2      	bne.n	800224c <HAL_DMA_IRQHandler+0x2cc>
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e000      	b.n	800228e <HAL_DMA_IRQHandler+0x30e>
        return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b10      	subs	r3, #16
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <DMA_CalcBaseAndBitshift+0x64>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <DMA_CalcBaseAndBitshift+0x68>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d909      	bls.n	8002332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	1d1a      	adds	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	; 0x58
 8002330:	e007      	b.n	8002342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	aaaaaaab 	.word	0xaaaaaaab
 8002358:	0800a334 	.word	0x0800a334

0800235c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11f      	bne.n	80023b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d856      	bhi.n	800242a <DMA_CheckFifoParam+0xce>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <DMA_CheckFifoParam+0x28>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	080023a7 	.word	0x080023a7
 800238c:	08002395 	.word	0x08002395
 8002390:	0800242b 	.word	0x0800242b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d046      	beq.n	800242e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e043      	b.n	800242e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ae:	d140      	bne.n	8002432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e03d      	b.n	8002432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	d121      	bne.n	8002404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d837      	bhi.n	8002436 <DMA_CheckFifoParam+0xda>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <DMA_CheckFifoParam+0x70>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023e3 	.word	0x080023e3
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	080023f5 	.word	0x080023f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      break;
 80023e0:	e030      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d025      	beq.n	800243a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f2:	e022      	b.n	800243a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fc:	d11f      	bne.n	800243e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002402:	e01c      	b.n	800243e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <DMA_CheckFifoParam+0xb6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002410:	e018      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      break;
 8002416:	e015      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e00b      	b.n	8002442 <DMA_CheckFifoParam+0xe6>
      break;
 800242a:	bf00      	nop
 800242c:	e00a      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e008      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e006      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e004      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;   
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
    }
  } 
  
  return status; 
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e159      	b.n	8002724 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8148 	bne.w	800271e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b03      	cmp	r3, #3
 8002512:	d017      	beq.n	8002544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a2 	beq.w	800271e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f6:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x202>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a48      	ldr	r2, [pc, #288]	; (8002748 <HAL_GPIO_Init+0x2f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x1fe>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a47      	ldr	r2, [pc, #284]	; (800274c <HAL_GPIO_Init+0x2f8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x1fa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a46      	ldr	r2, [pc, #280]	; (8002750 <HAL_GPIO_Init+0x2fc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x1f6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a45      	ldr	r2, [pc, #276]	; (8002754 <HAL_GPIO_Init+0x300>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x1f2>
 8002642:	2304      	movs	r3, #4
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002646:	2307      	movs	r3, #7
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_GPIO_Init+0x304>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269a:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <HAL_GPIO_Init+0x304>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c4:	4a24      	ldr	r2, [pc, #144]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002718:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_GPIO_Init+0x304>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f aea2 	bls.w	8002470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	041a      	lsls	r2, r3, #16
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	400b      	ands	r3, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fcc8 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e128      	b.n	8002a58 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a90      	ldr	r2, [pc, #576]	; (8002a60 <HAL_I2S_Init+0x26c>)
 800281e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe fceb 	bl	80011fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800283c:	f023 030f 	bic.w	r3, r3, #15
 8002840:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2202      	movs	r2, #2
 8002848:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d060      	beq.n	8002914 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800285a:	2310      	movs	r3, #16
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e001      	b.n	8002864 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b20      	cmp	r3, #32
 800286a:	d802      	bhi.n	8002872 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002872:	2001      	movs	r0, #1
 8002874:	f001 fd00 	bl	8004278 <HAL_RCCEx_GetPeriphCLKFreq>
 8002878:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002882:	d125      	bne.n	80028d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	fbb2 f2f3 	udiv	r2, r2, r3
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	3305      	adds	r3, #5
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	e01f      	b.n	80028ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	3305      	adds	r3, #5
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e00e      	b.n	80028ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	461a      	mov	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	3305      	adds	r3, #5
 80028ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_I2S_Init+0x270>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e003      	b.n	800291c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002914:	2302      	movs	r3, #2
 8002916:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d902      	bls.n	8002928 <HAL_I2S_Init+0x134>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2bff      	cmp	r3, #255	; 0xff
 8002926:	d907      	bls.n	8002938 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e08f      	b.n	8002a58 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	ea42 0103 	orr.w	r1, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	430a      	orrs	r2, r1
 800294a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002956:	f023 030f 	bic.w	r3, r3, #15
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6851      	ldr	r1, [r2, #4]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68d2      	ldr	r2, [r2, #12]
 8002968:	4311      	orrs	r1, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6992      	ldr	r2, [r2, #24]
 800296e:	430a      	orrs	r2, r1
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d161      	bne.n	8002a48 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_I2S_Init+0x274>)
 8002988:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <HAL_I2S_Init+0x278>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_I2S_Init+0x1a4>
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_I2S_Init+0x27c>)
 8002996:	e001      	b.n	800299c <HAL_I2S_Init+0x1a8>
 8002998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4932      	ldr	r1, [pc, #200]	; (8002a6c <HAL_I2S_Init+0x278>)
 80029a4:	428a      	cmp	r2, r1
 80029a6:	d101      	bne.n	80029ac <HAL_I2S_Init+0x1b8>
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_I2S_Init+0x27c>)
 80029aa:	e001      	b.n	80029b0 <HAL_I2S_Init+0x1bc>
 80029ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80029b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029b4:	f023 030f 	bic.w	r3, r3, #15
 80029b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <HAL_I2S_Init+0x278>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_I2S_Init+0x1d4>
 80029c4:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_I2S_Init+0x27c>)
 80029c6:	e001      	b.n	80029cc <HAL_I2S_Init+0x1d8>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029cc:	2202      	movs	r2, #2
 80029ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_I2S_Init+0x278>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_I2S_Init+0x1ea>
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_I2S_Init+0x27c>)
 80029dc:	e001      	b.n	80029e2 <HAL_I2S_Init+0x1ee>
 80029de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ee:	d003      	beq.n	80029f8 <HAL_I2S_Init+0x204>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	e001      	b.n	8002a04 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a30:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_I2S_Init+0x278>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2S_Init+0x24c>
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_I2S_Init+0x27c>)
 8002a3e:	e001      	b.n	8002a44 <HAL_I2S_Init+0x250>
 8002a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a44:	897a      	ldrh	r2, [r7, #10]
 8002a46:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	0800312d 	.word	0x0800312d
 8002a64:	cccccccd 	.word	0xcccccccd
 8002a68:	080032b5 	.word	0x080032b5
 8002a6c:	40003800 	.word	0x40003800
 8002a70:	40003400 	.word	0x40003400

08002a74 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_I2S_Receive_DMA+0x1a>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0a1      	b.n	8002bd6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2S_Receive_DMA+0x2e>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e099      	b.n	8002bd6 <HAL_I2S_Receive_DMA+0x162>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e089      	b.n	8002bd6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d002      	beq.n	8002aee <HAL_I2S_Receive_DMA+0x7a>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10a      	bne.n	8002b04 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	865a      	strh	r2, [r3, #50]	; 0x32
 8002b02:	e005      	b.n	8002b10 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_I2S_Receive_DMA+0x16c>)
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_I2S_Receive_DMA+0x170>)
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_I2S_Receive_DMA+0x174>)
 8002b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b36:	d10a      	bne.n	8002b4e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b66:	f7ff f943 	bl	8001df0 <HAL_DMA_Start_IT>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00f      	beq.n	8002b90 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0208 	orr.w	r2, r3, #8
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e022      	b.n	8002bd6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bac:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800300b 	.word	0x0800300b
 8002be4:	08002fc9 	.word	0x08002fc9
 8002be8:	08003027 	.word	0x08003027

08002bec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d004      	beq.n	8002c0c <HAL_I2S_DMAStop+0x20>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80d1 	bne.w	8002dae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00f      	beq.n	8002c34 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f941 	bl	8001ea0 <HAL_DMA_Abort>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0208 	orr.w	r2, r3, #8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c34:	2364      	movs	r3, #100	; 0x64
 8002c36:	2201      	movs	r2, #1
 8002c38:	2102      	movs	r1, #2
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb00 	bl	8003240 <I2S_WaitFlagStateUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c5e:	2364      	movs	r3, #100	; 0x64
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 faeb 	bl	8003240 <I2S_WaitFlagStateUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0202 	bic.w	r2, r2, #2
 8002cb4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	f040 8165 	bne.w	8002f8e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00f      	beq.n	8002cec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f8e5 	bl	8001ea0 <HAL_DMA_Abort>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f043 0208 	orr.w	r2, r3, #8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a8a      	ldr	r2, [pc, #552]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2S_DMAStop+0x10e>
 8002cf6:	4b8a      	ldr	r3, [pc, #552]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002cf8:	e001      	b.n	8002cfe <HAL_I2S_DMAStop+0x112>
 8002cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4985      	ldr	r1, [pc, #532]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d06:	428b      	cmp	r3, r1
 8002d08:	d101      	bne.n	8002d0e <HAL_I2S_DMAStop+0x122>
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002d0c:	e001      	b.n	8002d12 <HAL_I2S_DMAStop+0x126>
 8002d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7e      	ldr	r2, [pc, #504]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_I2S_DMAStop+0x13e>
 8002d26:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002d28:	e001      	b.n	8002d2e <HAL_I2S_DMAStop+0x142>
 8002d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a79      	ldr	r2, [pc, #484]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2S_DMAStop+0x154>
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002d3e:	e001      	b.n	8002d44 <HAL_I2S_DMAStop+0x158>
 8002d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a73      	ldr	r2, [pc, #460]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_I2S_DMAStop+0x16c>
 8002d54:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002d56:	e001      	b.n	8002d5c <HAL_I2S_DMAStop+0x170>
 8002d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	496e      	ldr	r1, [pc, #440]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d101      	bne.n	8002d6c <HAL_I2S_DMAStop+0x180>
 8002d68:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002d6a:	e001      	b.n	8002d70 <HAL_I2S_DMAStop+0x184>
 8002d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002d96:	e0fa      	b.n	8002f8e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5f      	ldr	r2, [pc, #380]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_I2S_DMAStop+0x1ba>
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002da4:	e001      	b.n	8002daa <HAL_I2S_DMAStop+0x1be>
 8002da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002daa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dac:	e0ef      	b.n	8002f8e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db6:	d005      	beq.n	8002dc4 <HAL_I2S_DMAStop+0x1d8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc0:	f040 80e5 	bne.w	8002f8e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00f      	beq.n	8002dec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f865 	bl	8001ea0 <HAL_DMA_Abort>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0208 	orr.w	r2, r3, #8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	f040 809a 	bne.w	8002f2e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f84a 	bl	8001ea0 <HAL_DMA_Abort>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0208 	orr.w	r2, r3, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002e22:	f7fe fdf5 	bl	8001a10 <HAL_GetTick>
 8002e26:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002e28:	e012      	b.n	8002e50 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002e2a:	f7fe fdf1 	bl	8001a10 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d90b      	bls.n	8002e50 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_I2S_DMAStop+0x272>
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002e5c:	e001      	b.n	8002e62 <HAL_I2S_DMAStop+0x276>
 8002e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d1de      	bne.n	8002e2a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002e6c:	e012      	b.n	8002e94 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002e6e:	f7fe fdcf 	bl	8001a10 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d90b      	bls.n	8002e94 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2S_DMAStop+0x2b6>
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002ea0:	e001      	b.n	8002ea6 <HAL_I2S_DMAStop+0x2ba>
 8002ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d0de      	beq.n	8002e6e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2S_DMAStop+0x2d2>
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002ebc:	e001      	b.n	8002ec2 <HAL_I2S_DMAStop+0x2d6>
 8002ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4914      	ldr	r1, [pc, #80]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002eca:	428b      	cmp	r3, r1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2S_DMAStop+0x2e6>
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002ed0:	e001      	b.n	8002ed6 <HAL_I2S_DMAStop+0x2ea>
 8002ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_I2S_DMAStop+0x302>
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002eec:	e001      	b.n	8002ef2 <HAL_I2S_DMAStop+0x306>
 8002eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_I2S_DMAStop+0x31a>
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002f04:	e001      	b.n	8002f0a <HAL_I2S_DMAStop+0x31e>
 8002f06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4902      	ldr	r1, [pc, #8]	; (8002f1c <HAL_I2S_DMAStop+0x330>)
 8002f12:	428b      	cmp	r3, r1
 8002f14:	d106      	bne.n	8002f24 <HAL_I2S_DMAStop+0x338>
 8002f16:	4b02      	ldr	r3, [pc, #8]	; (8002f20 <HAL_I2S_DMAStop+0x334>)
 8002f18:	e006      	b.n	8002f28 <HAL_I2S_DMAStop+0x33c>
 8002f1a:	bf00      	nop
 8002f1c:	40003800 	.word	0x40003800
 8002f20:	40003400 	.word	0x40003400
 8002f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f28:	f022 0202 	bic.w	r2, r2, #2
 8002f2c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6c:	d10c      	bne.n	8002f88 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e002      	b.n	8002f8e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7fe f853 	bl	80010a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7fe f879 	bl	8001110 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0203 	bic.w	r2, r2, #3
 8003042:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0208 	orr.w	r2, r3, #8
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ffa5 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10e      	bne.n	80030c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff6d 	bl	8002fa0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	b292      	uxth	r2, r2
 80030e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003114:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd ffc2 	bl	80010a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b04      	cmp	r3, #4
 8003146:	d13a      	bne.n	80031be <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d109      	bne.n	8003166 <I2S_IRQHandler+0x3a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d102      	bne.n	8003166 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffb4 	bl	80030ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d126      	bne.n	80031be <I2S_IRQHandler+0x92>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d11f      	bne.n	80031be <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800318c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0202 	orr.w	r2, r3, #2
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fefb 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d136      	bne.n	8003238 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d109      	bne.n	80031e8 <I2S_IRQHandler+0xbc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d102      	bne.n	80031e8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff45 	bl	8003072 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d122      	bne.n	8003238 <I2S_IRQHandler+0x10c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d11b      	bne.n	8003238 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800320e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0204 	orr.w	r2, r3, #4
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff febe 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003238:	bf00      	nop
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003250:	f7fe fbde 	bl	8001a10 <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003256:	e018      	b.n	800328a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d014      	beq.n	800328a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003260:	f7fe fbd6 	bl	8001a10 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d902      	bls.n	8003276 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e00f      	b.n	80032aa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1d7      	bne.n	8003258 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a92      	ldr	r2, [pc, #584]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032d0:	e001      	b.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80032d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8b      	ldr	r2, [pc, #556]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80032ec:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032ee:	e001      	b.n	80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003300:	d004      	beq.n	800330c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 8099 	bne.w	800343e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f925 	bl	8003570 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9c8 	bl	80036d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d13a      	bne.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d035      	beq.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800335e:	4b6e      	ldr	r3, [pc, #440]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003360:	e001      	b.n	8003366 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4969      	ldr	r1, [pc, #420]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800336e:	428b      	cmp	r3, r1
 8003370:	d101      	bne.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003372:	4b69      	ldr	r3, [pc, #420]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003374:	e001      	b.n	800337a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800337e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800338e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f043 0202 	orr.w	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fdfa 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	f040 80c3 	bne.w	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80bd 	beq.w	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f4:	e001      	b.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4944      	ldr	r1, [pc, #272]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003402:	428b      	cmp	r3, r1
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003412:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003414:	2300      	movs	r3, #0
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fdbc 	bl	8002fb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800343c:	e089      	b.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8be 	bl	80035d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8fd 	bl	800366c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d12f      	bne.n	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d02a      	beq.n	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003494:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4919      	ldr	r1, [pc, #100]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b6:	e001      	b.n	80034bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80034b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fd6c 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d136      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d031      	beq.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034fc:	e001      	b.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4902      	ldr	r1, [pc, #8]	; (8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800350a:	428b      	cmp	r3, r1
 800350c:	d106      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800350e:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003510:	e006      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003512:	bf00      	nop
 8003514:	40003800 	.word	0x40003800
 8003518:	40003400 	.word	0x40003400
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003524:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003534:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0204 	orr.w	r2, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fd32 	bl	8002fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	e000      	b.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003552:	bf00      	nop
}
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c99      	adds	r1, r3, #2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6251      	str	r1, [r2, #36]	; 0x24
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d113      	bne.n	80035ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffc9 	bl	800355c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c99      	adds	r1, r3, #2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6251      	str	r1, [r2, #36]	; 0x24
 80035e6:	8819      	ldrh	r1, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <I2SEx_TxISR_I2SExt+0x90>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <I2SEx_TxISR_I2SExt+0x22>
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <I2SEx_TxISR_I2SExt+0x94>)
 80035f4:	e001      	b.n	80035fa <I2SEx_TxISR_I2SExt+0x26>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	460a      	mov	r2, r1
 80035fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d121      	bne.n	800365a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a12      	ldr	r2, [pc, #72]	; (8003664 <I2SEx_TxISR_I2SExt+0x90>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <I2SEx_TxISR_I2SExt+0x50>
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <I2SEx_TxISR_I2SExt+0x94>)
 8003622:	e001      	b.n	8003628 <I2SEx_TxISR_I2SExt+0x54>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	490d      	ldr	r1, [pc, #52]	; (8003664 <I2SEx_TxISR_I2SExt+0x90>)
 8003630:	428b      	cmp	r3, r1
 8003632:	d101      	bne.n	8003638 <I2SEx_TxISR_I2SExt+0x64>
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <I2SEx_TxISR_I2SExt+0x94>)
 8003636:	e001      	b.n	800363c <I2SEx_TxISR_I2SExt+0x68>
 8003638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003640:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff81 	bl	800355c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40003800 	.word	0x40003800
 8003668:	40003400 	.word	0x40003400

0800366c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68d8      	ldr	r0, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	1c99      	adds	r1, r3, #2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003684:	b282      	uxth	r2, r0
 8003686:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff4a 	bl	800355c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <I2SEx_RxISR_I2SExt+0x90>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <I2SEx_RxISR_I2SExt+0x16>
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <I2SEx_RxISR_I2SExt+0x94>)
 80036e4:	e001      	b.n	80036ea <I2SEx_RxISR_I2SExt+0x1a>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	68d8      	ldr	r0, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	1c99      	adds	r1, r3, #2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036f6:	b282      	uxth	r2, r0
 80036f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d121      	bne.n	8003756 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <I2SEx_RxISR_I2SExt+0x90>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <I2SEx_RxISR_I2SExt+0x50>
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <I2SEx_RxISR_I2SExt+0x94>)
 800371e:	e001      	b.n	8003724 <I2SEx_RxISR_I2SExt+0x54>
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	490d      	ldr	r1, [pc, #52]	; (8003760 <I2SEx_RxISR_I2SExt+0x90>)
 800372c:	428b      	cmp	r3, r1
 800372e:	d101      	bne.n	8003734 <I2SEx_RxISR_I2SExt+0x64>
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <I2SEx_RxISR_I2SExt+0x94>)
 8003732:	e001      	b.n	8003738 <I2SEx_RxISR_I2SExt+0x68>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff03 	bl	800355c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40003800 	.word	0x40003800
 8003764:	40003400 	.word	0x40003400

08003768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e267      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00c      	beq.n	80037ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b82      	ldr	r3, [pc, #520]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b7e      	ldr	r3, [pc, #504]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x108>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e242      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x74>
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6c      	ldr	r2, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe f8f6 	bl	8001a10 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe f8f2 	bl	8001a10 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e207      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xc0>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe f8e2 	bl	8001a10 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe f8de 	bl	8001a10 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1f3      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xe8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1c7      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4937      	ldr	r1, [pc, #220]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCC_OscConfig+0x244>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe f897 	bl	8001a10 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fe f893 	bl	8001a10 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1a8      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4925      	ldr	r1, [pc, #148]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCC_OscConfig+0x244>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe f876 	bl	8001a10 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003928:	f7fe f872 	bl	8001a10 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e187      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HAL_RCC_OscConfig+0x248>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe f856 	bl	8001a10 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe f852 	bl	8001a10 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e167      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x240>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x200>
 8003986:	e01b      	b.n	80039c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_OscConfig+0x248>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398e:	f7fe f83f 	bl	8001a10 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00e      	b.n	80039b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe f83b 	bl	8001a10 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d907      	bls.n	80039b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e150      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ea      	bne.n	8003996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8097 	beq.w	8003afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b7d      	ldr	r3, [pc, #500]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40
 80039ee:	4b7a      	ldr	r3, [pc, #488]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b74      	ldr	r3, [pc, #464]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fffb 	bl	8001a10 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fff7 	bl	8001a10 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e10c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_RCC_OscConfig+0x474>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2ea>
 8003a44:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x30c>
 8003a5a:	4b5f      	ldr	r3, [pc, #380]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4a5e      	ldr	r2, [pc, #376]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6713      	str	r3, [r2, #112]	; 0x70
 8003a66:	4b5c      	ldr	r3, [pc, #368]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a5b      	ldr	r2, [pc, #364]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0x324>
 8003a74:	4b58      	ldr	r3, [pc, #352]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a80:	4b55      	ldr	r3, [pc, #340]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a54      	ldr	r2, [pc, #336]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 0304 	bic.w	r3, r3, #4
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd ffbc 	bl	8001a10 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd ffb8 	bl	8001a10 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0cb      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ee      	beq.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd ffa6 	bl	8001a10 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd ffa2 	bl	8001a10 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0b5      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a1 	beq.w	8003c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b06:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d05c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d141      	bne.n	8003b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd ff76 	bl	8001a10 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd ff72 	bl	8001a10 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e087      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	491b      	ldr	r1, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fd ff4b 	bl	8001a10 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd ff47 	bl	8001a10 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e05c      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x416>
 8003b9c:	e054      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd ff34 	bl	8001a10 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd ff30 	bl	8001a10 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e045      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e038      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11a      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0cc      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d90c      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b8      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cac:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	494d      	ldr	r1, [pc, #308]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d044      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e067      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4934      	ldr	r1, [pc, #208]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fe62 	bl	8001a10 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd fe5e 	bl	8001a10 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04f      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d20c      	bcs.n	8003da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	490e      	ldr	r1, [pc, #56]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dde:	f000 f821 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003de2:	4602      	mov	r2, r0
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	5ccb      	ldrb	r3, [r1, r3]
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd fdc2 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800a31c 	.word	0x0800a31c
 8003e1c:	20000050 	.word	0x20000050
 8003e20:	20000054 	.word	0x20000054

08003e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b094      	sub	sp, #80	; 0x50
 8003e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e30:	2300      	movs	r3, #0
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	2300      	movs	r3, #0
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3c:	4b79      	ldr	r3, [pc, #484]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x40>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	f200 80e1 	bhi.w	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x34>
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e56:	e0db      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b73      	ldr	r3, [pc, #460]	; (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e5c:	e0db      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e62:	e0d8      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d063      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	2200      	movs	r2, #0
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
 8003e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	0159      	lsls	r1, r3, #5
 8003ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea8:	0150      	lsls	r0, r2, #5
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4621      	mov	r1, r4
 8003eb0:	1a51      	subs	r1, r2, r1
 8003eb2:	6139      	str	r1, [r7, #16]
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec8:	4659      	mov	r1, fp
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	018a      	lsls	r2, r1, #6
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8003edc:	4659      	mov	r1, fp
 8003ede:	eb63 0901 	sbc.w	r9, r3, r1
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	4699      	mov	r9, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	eb18 0303 	adds.w	r3, r8, r3
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	462b      	mov	r3, r5
 8003f04:	eb49 0303 	adc.w	r3, r9, r3
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f16:	4629      	mov	r1, r5
 8003f18:	024b      	lsls	r3, r1, #9
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f20:	4621      	mov	r1, r4
 8003f22:	024a      	lsls	r2, r1, #9
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f34:	f7fc f9a4 	bl	8000280 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	e058      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	f04f 0000 	mov.w	r0, #0
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	0159      	lsls	r1, r3, #5
 8003f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6e:	0150      	lsls	r0, r2, #5
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4641      	mov	r1, r8
 8003f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f94:	ebb2 040a 	subs.w	r4, r2, sl
 8003f98:	eb63 050b 	sbc.w	r5, r3, fp
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	eb45 0303 	adc.w	r3, r5, r3
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	028b      	lsls	r3, r1, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	028a      	lsls	r2, r1, #10
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	61fa      	str	r2, [r7, #28]
 8003fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe8:	f7fc f94a 	bl	8000280 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_GetSysClockFreq+0x204>)
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004018:	4618      	mov	r0, r3
 800401a:	3750      	adds	r7, #80	; 0x50
 800401c:	46bd      	mov	sp, r7
 800401e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	00f42400 	.word	0x00f42400
 800402c:	007a1200 	.word	0x007a1200

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000050 	.word	0x20000050

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800404c:	f7ff fff0 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0a9b      	lsrs	r3, r3, #10
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	; (800406c <HAL_RCC_GetPCLK1Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	0800a32c 	.word	0x0800a32c

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004074:	f7ff ffdc 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0b5b      	lsrs	r3, r3, #13
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	0800a32c 	.word	0x0800a32c

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d038      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c6:	f7fd fca3 	bl	8001a10 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ce:	f7fd fc9f 	bl	8001a10 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0bd      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	071b      	lsls	r3, r3, #28
 80040fe:	495a      	ldr	r1, [pc, #360]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004106:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800410c:	f7fd fc80 	bl	8001a10 <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004114:	f7fd fc7c 	bl	8001a10 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e09a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004126:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8083 	beq.w	8004246 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	4b48      	ldr	r3, [pc, #288]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4a47      	ldr	r2, [pc, #284]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414e:	6413      	str	r3, [r2, #64]	; 0x40
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a42      	ldr	r2, [pc, #264]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004168:	f7fd fc52 	bl	8001a10 <HAL_GetTick>
 800416c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fc4e 	bl	8001a10 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e06c      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004182:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02f      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d028      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d114      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd fc1c 	bl	8001a10 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041da:	e00a      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fd fc18 	bl	8001a10 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e034      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0ee      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420a:	d10d      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800420c:	4b16      	ldr	r3, [pc, #88]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	4911      	ldr	r1, [pc, #68]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
 8004226:	e005      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004232:	6093      	str	r3, [r2, #8]
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	4909      	ldr	r1, [pc, #36]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	7d1a      	ldrb	r2, [r3, #20]
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004258:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	42470068 	.word	0x42470068
 8004268:	40023800 	.word	0x40023800
 800426c:	40007000 	.word	0x40007000
 8004270:	42470e40 	.word	0x42470e40
 8004274:	424711e0 	.word	0x424711e0

08004278 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d140      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d131      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042ac:	4b1f      	ldr	r3, [pc, #124]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042ae:	617b      	str	r3, [r7, #20]
          break;
 80042b0:	e031      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042be:	d109      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ca:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004300:	0f1b      	lsrs	r3, r3, #28
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
          break;
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
          break;
 8004314:	bf00      	nop
        }
      }
      break;
 8004316:	bf00      	nop
    }
  }
  return frequency;
 8004318:	697b      	ldr	r3, [r7, #20]
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	00bb8000 	.word	0x00bb8000
 8004330:	007a1200 	.word	0x007a1200
 8004334:	00f42400 	.word	0x00f42400

08004338 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e022      	b.n	8004390 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7fd f903 	bl	8001568 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f814 	bl	8004398 <HAL_SD_InitCard>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e00a      	b.n	8004390 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af04      	add	r7, sp, #16
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043b4:	2376      	movs	r3, #118	; 0x76
 80043b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681d      	ldr	r5, [r3, #0]
 80043bc:	466c      	mov	r4, sp
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d0:	4628      	mov	r0, r5
 80043d2:	f001 fbfd 	bl	8005bd0 <SDIO_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80043dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e04f      	b.n	8004488 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_SD_InitCard+0xf8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 fc35 	bl	8005c62 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_SD_InitCard+0xf8>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80043fe:	2002      	movs	r0, #2
 8004400:	f7fd fb12 	bl	8001a28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 ff03 	bl	8005210 <SD_PowerON>
 800440a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e02e      	b.n	8004488 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fe22 	bl	8005074 <SD_InitCard>
 8004430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e01b      	b.n	8004488 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fc94 	bl	8005d86 <SDMMC_CmdBlockLength>
 800445e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_SD_InitCard+0xfc>)
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bdb0      	pop	{r4, r5, r7, pc}
 8004490:	422580a0 	.word	0x422580a0
 8004494:	004005ff 	.word	0x004005ff

08004498 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b092      	sub	sp, #72	; 0x48
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044a6:	f7fd fab3 	bl	8001a10 <HAL_GetTick>
 80044aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e1bd      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	f040 81b0 	bne.w	8004838 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d907      	bls.n	80044fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e1a4      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	2b01      	cmp	r3, #1
 8004512:	d002      	beq.n	800451a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	025b      	lsls	r3, r3, #9
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	025b      	lsls	r3, r3, #9
 8004524:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004526:	2390      	movs	r3, #144	; 0x90
 8004528:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800452a:	2302      	movs	r3, #2
 800452c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004532:	2301      	movs	r3, #1
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f107 0214 	add.w	r2, r7, #20
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fbf4 	bl	8005d2e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d90a      	bls.n	8004562 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2202      	movs	r2, #2
 8004550:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004558:	4618      	mov	r0, r3
 800455a:	f001 fc58 	bl	8005e0e <SDMMC_CmdReadMultiBlock>
 800455e:	6478      	str	r0, [r7, #68]	; 0x44
 8004560:	e009      	b.n	8004576 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fc2b 	bl	8005dca <SDMMC_CmdReadSingleBlock>
 8004574:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004578:	2b00      	cmp	r3, #0
 800457a:	d012      	beq.n	80045a2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7a      	ldr	r2, [pc, #488]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e151      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045a6:	e061      	b.n	800466c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d03c      	beq.n	8004630 <HAL_SD_ReadBlocks+0x198>
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d039      	beq.n	8004630 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80045bc:	2300      	movs	r3, #0
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
 80045c0:	e033      	b.n	800462a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fb2d 	bl	8005c26 <SDIO_ReadFIFO>
 80045cc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	3301      	adds	r3, #1
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	3b01      	subs	r3, #1
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	3301      	adds	r3, #1
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	3b01      	subs	r3, #1
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	3301      	adds	r3, #1
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	3b01      	subs	r3, #1
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	b2da      	uxtb	r2, r3
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	3301      	adds	r3, #1
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	3b01      	subs	r3, #1
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004626:	3301      	adds	r3, #1
 8004628:	643b      	str	r3, [r7, #64]	; 0x40
 800462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462c:	2b07      	cmp	r3, #7
 800462e:	d9c8      	bls.n	80045c2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004630:	f7fd f9ee 	bl	8001a10 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800463c:	429a      	cmp	r2, r3
 800463e:	d902      	bls.n	8004646 <HAL_SD_ReadBlocks+0x1ae>
 8004640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004642:	2b00      	cmp	r3, #0
 8004644:	d112      	bne.n	800466c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a48      	ldr	r2, [pc, #288]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0ec      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004672:	f240 332a 	movw	r3, #810	; 0x32a
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d095      	beq.n	80045a8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d022      	beq.n	80046d0 <HAL_SD_ReadBlocks+0x238>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d91f      	bls.n	80046d0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	2b03      	cmp	r3, #3
 8004696:	d01b      	beq.n	80046d0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f001 fc1d 	bl	8005edc <SDMMC_CmdStopTransfer>
 80046a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ba      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d012      	beq.n	8004704 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a22      	ldr	r2, [pc, #136]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0a0      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a15      	ldr	r2, [pc, #84]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e086      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <HAL_SD_ReadBlocks+0x2d4>)
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e06c      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
 800476c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f001 fa56 	bl	8005c26 <SDIO_ReadFIFO>
 800477a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	b2da      	uxtb	r2, r3
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	3301      	adds	r3, #1
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	3b01      	subs	r3, #1
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b2da      	uxtb	r2, r3
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	3301      	adds	r3, #1
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a2:	3b01      	subs	r3, #1
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	3301      	adds	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	3b01      	subs	r3, #1
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	3301      	adds	r3, #1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	3b01      	subs	r3, #1
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047d2:	f7fd f91d 	bl	8001a10 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047de:	429a      	cmp	r2, r3
 80047e0:	d902      	bls.n	80047e8 <HAL_SD_ReadBlocks+0x350>
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d112      	bne.n	800480e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_SD_ReadBlocks+0x3b8>)
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01b      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_SD_ReadBlocks+0x38a>
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1a6      	bne.n	8004770 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f240 523a 	movw	r2, #1338	; 0x53a
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e006      	b.n	8004846 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3748      	adds	r7, #72	; 0x48
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	004005ff 	.word	0x004005ff

08004854 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b092      	sub	sp, #72	; 0x48
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004862:	f7fd f8d5 	bl	8001a10 <HAL_GetTick>
 8004866:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e166      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	f040 8159 	bne.w	8004b46 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800489a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	441a      	add	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d907      	bls.n	80048b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e14d      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	025b      	lsls	r3, r3, #9
 80048d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	025b      	lsls	r3, r3, #9
 80048e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80048e2:	2390      	movs	r3, #144	; 0x90
 80048e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f107 0218 	add.w	r2, r7, #24
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 fa16 	bl	8005d2e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d90a      	bls.n	800491e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fabe 	bl	8005e96 <SDMMC_CmdWriteMultiBlock>
 800491a:	6478      	str	r0, [r7, #68]	; 0x44
 800491c:	e009      	b.n	8004932 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2210      	movs	r2, #16
 8004922:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fa91 	bl	8005e52 <SDMMC_CmdWriteSingleBlock>
 8004930:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a87      	ldr	r2, [pc, #540]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 800493e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	431a      	orrs	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0fa      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004962:	e065      	b.n	8004a30 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d040      	beq.n	80049f4 <HAL_SD_WriteBlocks+0x1a0>
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d03d      	beq.n	80049f4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004978:	2300      	movs	r3, #0
 800497a:	643b      	str	r3, [r7, #64]	; 0x40
 800497c:	e037      	b.n	80049ee <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	3301      	adds	r3, #1
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498c:	3b01      	subs	r3, #1
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	3301      	adds	r3, #1
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	3b01      	subs	r3, #1
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	041a      	lsls	r2, r3, #16
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	3301      	adds	r3, #1
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049bc:	3b01      	subs	r3, #1
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	061a      	lsls	r2, r3, #24
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	3301      	adds	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d4:	3b01      	subs	r3, #1
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f107 0214 	add.w	r2, r7, #20
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 f92c 	bl	8005c40 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	3301      	adds	r3, #1
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	2b07      	cmp	r3, #7
 80049f2:	d9c4      	bls.n	800497e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80049f4:	f7fd f80c 	bl	8001a10 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d902      	bls.n	8004a0a <HAL_SD_WriteBlocks+0x1b6>
 8004a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d112      	bne.n	8004a30 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a53      	ldr	r2, [pc, #332]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e091      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	f240 331a 	movw	r3, #794	; 0x31a
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d091      	beq.n	8004964 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d022      	beq.n	8004a94 <HAL_SD_WriteBlocks+0x240>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d91f      	bls.n	8004a94 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d01b      	beq.n	8004a94 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fa3b 	bl	8005edc <SDMMC_CmdStopTransfer>
 8004a66:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3a      	ldr	r2, [pc, #232]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e05f      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d012      	beq.n	8004ac8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2d      	ldr	r2, [pc, #180]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	f043 0208 	orr.w	r2, r3, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e045      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d012      	beq.n	8004afc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e02b      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <HAL_SD_WriteBlocks+0x308>)
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	f043 0210 	orr.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e011      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e006      	b.n	8004b54 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3748      	adds	r7, #72	; 0x48
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	004005ff 	.word	0x004005ff

08004b60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	0f9b      	lsrs	r3, r3, #30
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7a:	0e9b      	lsrs	r3, r3, #26
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bde:	0bdb      	lsrs	r3, r3, #15
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf0:	0b9b      	lsrs	r3, r3, #14
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c02:	0b5b      	lsrs	r3, r3, #13
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c14:	0b1b      	lsrs	r3, r3, #12
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d163      	bne.n	8004cf8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c40:	0f92      	lsrs	r2, r2, #30
 8004c42:	431a      	orrs	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	0edb      	lsrs	r3, r3, #27
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	0e1b      	lsrs	r3, r3, #24
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c70:	0d5b      	lsrs	r3, r3, #21
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c82:	0c9b      	lsrs	r3, r3, #18
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c94:	0bdb      	lsrs	r3, r3, #15
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	7e1b      	ldrb	r3, [r3, #24]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	2201      	movs	r2, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cc2:	fb03 f202 	mul.w	r2, r3, r2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7a1b      	ldrb	r3, [r3, #8]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ce4:	0a52      	lsrs	r2, r2, #9
 8004ce6:	fb03 f202 	mul.w	r2, r3, r2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf4:	661a      	str	r2, [r3, #96]	; 0x60
 8004cf6:	e031      	b.n	8004d5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11d      	bne.n	8004d3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	029a      	lsls	r2, r3, #10
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	661a      	str	r2, [r3, #96]	; 0x60
 8004d3a:	e00f      	b.n	8004d5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_SD_GetCardCSD+0x344>)
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e09d      	b.n	8004e98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	0b9b      	lsrs	r3, r3, #14
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	0fdb      	lsrs	r3, r3, #31
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	0f5b      	lsrs	r3, r3, #29
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	0d9b      	lsrs	r3, r3, #22
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	0d5b      	lsrs	r3, r3, #21
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	0bdb      	lsrs	r3, r3, #15
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	0b9b      	lsrs	r3, r3, #14
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	0b5b      	lsrs	r3, r3, #13
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	0b1b      	lsrs	r3, r3, #12
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	0a9b      	lsrs	r3, r3, #10
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	004005ff 	.word	0x004005ff

08004ea8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d02e      	beq.n	8004f7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d106      	bne.n	8004f36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
 8004f34:	e029      	b.n	8004f8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d10a      	bne.n	8004f54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa1c 	bl	800537c <SD_WideBus_Enable>
 8004f44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
 8004f52:	e01a      	b.n	8004f8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa59 	bl	8005412 <SD_WideBus_Disable>
 8004f60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f6e:	e00c      	b.n	8004f8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f7c:	e005      	b.n	8004f8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a26      	ldr	r2, [pc, #152]	; (8005030 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fa8:	e01f      	b.n	8004fea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681d      	ldr	r5, [r3, #0]
 8004fd0:	466c      	mov	r4, sp
 8004fd2:	f107 0314 	add.w	r3, r7, #20
 8004fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fdf3 	bl	8005bd0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fec7 	bl	8005d86 <SDMMC_CmdBlockLength>
 8004ff8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00c      	beq.n	800501a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	; 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bdb0      	pop	{r4, r5, r7, pc}
 800502e:	bf00      	nop
 8005030:	004005ff 	.word	0x004005ff

08005034 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f970 	bl	800532c <SD_SendStatus>
 800504c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800506a:	693b      	ldr	r3, [r7, #16]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b094      	sub	sp, #80	; 0x50
 8005078:	af04      	add	r7, sp, #16
 800507a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800507c:	2301      	movs	r3, #1
 800507e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fdfa 	bl	8005c7e <SDIO_GetPowerState>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005090:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005094:	e0b8      	b.n	8005208 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	2b03      	cmp	r3, #3
 800509c:	d02f      	beq.n	80050fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f824 	bl	80060f0 <SDMMC_CmdSendCID>
 80050a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	e0a9      	b.n	8005208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2100      	movs	r1, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fe24 	bl	8005d08 <SDIO_GetResponse>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2104      	movs	r1, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fe1b 	bl	8005d08 <SDIO_GetResponse>
 80050d2:	4602      	mov	r2, r0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2108      	movs	r1, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fe12 	bl	8005d08 <SDIO_GetResponse>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	210c      	movs	r1, #12
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fe09 	bl	8005d08 <SDIO_GetResponse>
 80050f6:	4602      	mov	r2, r0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	2b03      	cmp	r3, #3
 8005104:	d00d      	beq.n	8005122 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f107 020e 	add.w	r2, r7, #14
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f82a 	bl	800616a <SDMMC_CmdSetRelAdd>
 8005116:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <SD_InitCard+0xae>
    {
      return errorstate;
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	e072      	b.n	8005208 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	2b03      	cmp	r3, #3
 8005128:	d036      	beq.n	8005198 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800512a:	89fb      	ldrh	r3, [r7, #14]
 800512c:	461a      	mov	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fff4 	bl	800612c <SDMMC_CmdSendCSD>
 8005144:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <SD_InitCard+0xdc>
    {
      return errorstate;
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514e:	e05b      	b.n	8005208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fdd6 	bl	8005d08 <SDIO_GetResponse>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2104      	movs	r1, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fdcd 	bl	8005d08 <SDIO_GetResponse>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2108      	movs	r1, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fdc4 	bl	8005d08 <SDIO_GetResponse>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	210c      	movs	r1, #12
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fdbb 	bl	8005d08 <SDIO_GetResponse>
 8005192:	4602      	mov	r2, r0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2104      	movs	r1, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fdb2 	bl	8005d08 <SDIO_GetResponse>
 80051a4:	4603      	mov	r3, r0
 80051a6:	0d1a      	lsrs	r2, r3, #20
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fcd4 	bl	8004b60 <HAL_SD_GetCardCSD>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051c2:	e021      	b.n	8005208 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6819      	ldr	r1, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	2200      	movs	r2, #0
 80051d0:	461c      	mov	r4, r3
 80051d2:	4615      	mov	r5, r2
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	4608      	mov	r0, r1
 80051da:	f000 fea1 	bl	8005f20 <SDMMC_CmdSelDesel>
 80051de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <SD_InitCard+0x176>
  {
    return errorstate;
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	e00e      	b.n	8005208 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	466c      	mov	r4, sp
 80051f2:	f103 0210 	add.w	r2, r3, #16
 80051f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80051f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051fc:	3304      	adds	r3, #4
 80051fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005200:	4628      	mov	r0, r5
 8005202:	f000 fce5 	bl	8005bd0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3740      	adds	r7, #64	; 0x40
 800520c:	46bd      	mov	sp, r7
 800520e:	bdb0      	pop	{r4, r5, r7, pc}

08005210 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fe9c 	bl	8005f66 <SDMMC_CmdGoIdleState>
 800522e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	e072      	b.n	8005320 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 feaf 	bl	8005fa2 <SDMMC_CmdOperCond>
 8005244:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fe85 	bl	8005f66 <SDMMC_CmdGoIdleState>
 800525c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	e05b      	b.n	8005320 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	2b01      	cmp	r3, #1
 8005274:	d137      	bne.n	80052e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f000 feaf 	bl	8005fe0 <SDMMC_CmdAppCommand>
 8005282:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d02d      	beq.n	80052e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800528a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800528e:	e047      	b.n	8005320 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fea2 	bl	8005fe0 <SDMMC_CmdAppCommand>
 800529c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e03b      	b.n	8005320 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	491e      	ldr	r1, [pc, #120]	; (8005328 <SD_PowerON+0x118>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 feb8 	bl	8006024 <SDMMC_CmdAppOperCommand>
 80052b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052c0:	e02e      	b.n	8005320 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd1d 	bl	8005d08 <SDIO_GetResponse>
 80052ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	0fdb      	lsrs	r3, r3, #31
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <SD_PowerON+0xcc>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <SD_PowerON+0xce>
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]

    count++;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d802      	bhi.n	80052f6 <SD_PowerON+0xe6>
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0cc      	beq.n	8005290 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d902      	bls.n	8005306 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005304:	e00c      	b.n	8005320 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
 8005316:	e002      	b.n	800531e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	c1100000 	.word	0xc1100000

0800532c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800533c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005340:	e018      	b.n	8005374 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 ff2c 	bl	80061ac <SDMMC_CmdSendStatus>
 8005354:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <SD_SendStatus+0x34>
  {
    return errorstate;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	e009      	b.n	8005374 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fcce 	bl	8005d08 <SDIO_GetResponse>
 800536c:	4602      	mov	r2, r0
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2100      	movs	r1, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fcb8 	bl	8005d08 <SDIO_GetResponse>
 8005398:	4603      	mov	r3, r0
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a2:	d102      	bne.n	80053aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a8:	e02f      	b.n	800540a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80053aa:	f107 030c 	add.w	r3, r7, #12
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f879 	bl	80054a8 <SD_FindSCR>
 80053b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	e023      	b.n	800540a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01c      	beq.n	8005406 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fe01 	bl	8005fe0 <SDMMC_CmdAppCommand>
 80053de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e00f      	b.n	800540a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fe3a 	bl	800606a <SDMMC_CmdBusWidth>
 80053f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	e003      	b.n	800540a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	e001      	b.n	800540a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fc6d 	bl	8005d08 <SDIO_GetResponse>
 800542e:	4603      	mov	r3, r0
 8005430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005438:	d102      	bne.n	8005440 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800543a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800543e:	e02f      	b.n	80054a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005440:	f107 030c 	add.w	r3, r7, #12
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f82e 	bl	80054a8 <SD_FindSCR>
 800544c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	e023      	b.n	80054a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01c      	beq.n	800549c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	041b      	lsls	r3, r3, #16
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fdb6 	bl	8005fe0 <SDMMC_CmdAppCommand>
 8005474:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	e00f      	b.n	80054a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fdef 	bl	800606a <SDMMC_CmdBusWidth>
 800548c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	e003      	b.n	80054a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005498:	2300      	movs	r3, #0
 800549a:	e001      	b.n	80054a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800549c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b08f      	sub	sp, #60	; 0x3c
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054b2:	f7fc faad 	bl	8001a10 <HAL_GetTick>
 80054b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80054bc:	2300      	movs	r3, #0
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2108      	movs	r1, #8
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc59 	bl	8005d86 <SDMMC_CmdBlockLength>
 80054d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	e0b2      	b.n	8005646 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f000 fd77 	bl	8005fe0 <SDMMC_CmdAppCommand>
 80054f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	e0a3      	b.n	8005646 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005504:	2308      	movs	r3, #8
 8005506:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005508:	2330      	movs	r3, #48	; 0x30
 800550a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800550c:	2302      	movs	r3, #2
 800550e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005510:	2300      	movs	r3, #0
 8005512:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005514:	2301      	movs	r3, #1
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f107 0210 	add.w	r2, r7, #16
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fc03 	bl	8005d2e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fdbe 	bl	80060ae <SDMMC_CmdSendSCR>
 8005532:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02a      	beq.n	8005590 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	e083      	b.n	8005646 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00f      	beq.n	800556c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	f107 0208 	add.w	r2, r7, #8
 8005558:	18d4      	adds	r4, r2, r3
 800555a:	4608      	mov	r0, r1
 800555c:	f000 fb63 	bl	8005c26 <SDIO_ReadFIFO>
 8005560:	4603      	mov	r3, r0
 8005562:	6023      	str	r3, [r4, #0]
      index++;
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	3301      	adds	r3, #1
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
 800556a:	e006      	b.n	800557a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800557a:	f7fc fa49 	bl	8001a10 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d102      	bne.n	8005590 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800558a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800558e:	e05a      	b.n	8005646 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0cf      	beq.n	800553e <SD_FindSCR+0x96>
 800559e:	e000      	b.n	80055a2 <SD_FindSCR+0xfa>
      break;
 80055a0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2208      	movs	r2, #8
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80055b8:	2308      	movs	r3, #8
 80055ba:	e044      	b.n	8005646 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2202      	movs	r2, #2
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80055d2:	2302      	movs	r3, #2
 80055d4:	e037      	b.n	8005646 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2220      	movs	r2, #32
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80055ec:	2320      	movs	r3, #32
 80055ee:	e02a      	b.n	8005646 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	061a      	lsls	r2, r3, #24
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005606:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005610:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	601a      	str	r2, [r3, #0]
    scr++;
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	3304      	adds	r3, #4
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	061a      	lsls	r2, r3, #24
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800562e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005638:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	373c      	adds	r7, #60	; 0x3c
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}

0800564e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e03f      	b.n	80056e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fc f801 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f828 	bl	80056e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ec:	b0c0      	sub	sp, #256	; 0x100
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	68d9      	ldr	r1, [r3, #12]
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	ea40 0301 	orr.w	r3, r0, r1
 8005710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	431a      	orrs	r2, r3
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	431a      	orrs	r2, r3
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005740:	f021 010c 	bic.w	r1, r1, #12
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800574e:	430b      	orrs	r3, r1
 8005750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	6999      	ldr	r1, [r3, #24]
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	ea40 0301 	orr.w	r3, r0, r1
 800576e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b8f      	ldr	r3, [pc, #572]	; (80059b4 <UART_SetConfig+0x2cc>)
 8005778:	429a      	cmp	r2, r3
 800577a:	d005      	beq.n	8005788 <UART_SetConfig+0xa0>
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b8d      	ldr	r3, [pc, #564]	; (80059b8 <UART_SetConfig+0x2d0>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d104      	bne.n	8005792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005788:	f7fe fc72 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 800578c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005790:	e003      	b.n	800579a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005792:	f7fe fc59 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8005796:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a4:	f040 810c 	bne.w	80059c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80057c2:	415b      	adcs	r3, r3
 80057c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057ca:	4621      	mov	r1, r4
 80057cc:	eb12 0801 	adds.w	r8, r2, r1
 80057d0:	4629      	mov	r1, r5
 80057d2:	eb43 0901 	adc.w	r9, r3, r1
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ea:	4690      	mov	r8, r2
 80057ec:	4699      	mov	r9, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	eb18 0303 	adds.w	r3, r8, r3
 80057f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f8:	462b      	mov	r3, r5
 80057fa:	eb49 0303 	adc.w	r3, r9, r3
 80057fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800580e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005816:	460b      	mov	r3, r1
 8005818:	18db      	adds	r3, r3, r3
 800581a:	653b      	str	r3, [r7, #80]	; 0x50
 800581c:	4613      	mov	r3, r2
 800581e:	eb42 0303 	adc.w	r3, r2, r3
 8005822:	657b      	str	r3, [r7, #84]	; 0x54
 8005824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800582c:	f7fa fd28 	bl	8000280 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4b61      	ldr	r3, [pc, #388]	; (80059bc <UART_SetConfig+0x2d4>)
 8005836:	fba3 2302 	umull	r2, r3, r3, r2
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	011c      	lsls	r4, r3, #4
 800583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005842:	2200      	movs	r2, #0
 8005844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005848:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800584c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	1891      	adds	r1, r2, r2
 8005856:	64b9      	str	r1, [r7, #72]	; 0x48
 8005858:	415b      	adcs	r3, r3
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005860:	4641      	mov	r1, r8
 8005862:	eb12 0a01 	adds.w	sl, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb43 0b01 	adc.w	fp, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800587c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005880:	4692      	mov	sl, r2
 8005882:	469b      	mov	fp, r3
 8005884:	4643      	mov	r3, r8
 8005886:	eb1a 0303 	adds.w	r3, sl, r3
 800588a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800588e:	464b      	mov	r3, r9
 8005890:	eb4b 0303 	adc.w	r3, fp, r3
 8005894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058ac:	460b      	mov	r3, r1
 80058ae:	18db      	adds	r3, r3, r3
 80058b0:	643b      	str	r3, [r7, #64]	; 0x40
 80058b2:	4613      	mov	r3, r2
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058c2:	f7fa fcdd 	bl	8000280 <__aeabi_uldivmod>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <UART_SetConfig+0x2d4>)
 80058ce:	fba3 2301 	umull	r2, r3, r3, r1
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	2264      	movs	r2, #100	; 0x64
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	1acb      	subs	r3, r1, r3
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <UART_SetConfig+0x2d4>)
 80058e4:	fba3 2302 	umull	r2, r3, r3, r2
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058f0:	441c      	add	r4, r3
 80058f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	1891      	adds	r1, r2, r2
 800590a:	63b9      	str	r1, [r7, #56]	; 0x38
 800590c:	415b      	adcs	r3, r3
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005914:	4641      	mov	r1, r8
 8005916:	1851      	adds	r1, r2, r1
 8005918:	6339      	str	r1, [r7, #48]	; 0x30
 800591a:	4649      	mov	r1, r9
 800591c:	414b      	adcs	r3, r1
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800592c:	4659      	mov	r1, fp
 800592e:	00cb      	lsls	r3, r1, #3
 8005930:	4651      	mov	r1, sl
 8005932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005936:	4651      	mov	r1, sl
 8005938:	00ca      	lsls	r2, r1, #3
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	4603      	mov	r3, r0
 8005940:	4642      	mov	r2, r8
 8005942:	189b      	adds	r3, r3, r2
 8005944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005948:	464b      	mov	r3, r9
 800594a:	460a      	mov	r2, r1
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005960:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005968:	460b      	mov	r3, r1
 800596a:	18db      	adds	r3, r3, r3
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	4613      	mov	r3, r2
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800597a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800597e:	f7fa fc7f 	bl	8000280 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <UART_SetConfig+0x2d4>)
 8005988:	fba3 1302 	umull	r1, r3, r3, r2
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	2164      	movs	r1, #100	; 0x64
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	3332      	adds	r3, #50	; 0x32
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <UART_SetConfig+0x2d4>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	f003 0207 	and.w	r2, r3, #7
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4422      	add	r2, r4
 80059ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059b0:	e105      	b.n	8005bbe <UART_SetConfig+0x4d6>
 80059b2:	bf00      	nop
 80059b4:	40011000 	.word	0x40011000
 80059b8:	40011400 	.word	0x40011400
 80059bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059d2:	4642      	mov	r2, r8
 80059d4:	464b      	mov	r3, r9
 80059d6:	1891      	adds	r1, r2, r2
 80059d8:	6239      	str	r1, [r7, #32]
 80059da:	415b      	adcs	r3, r3
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059e2:	4641      	mov	r1, r8
 80059e4:	1854      	adds	r4, r2, r1
 80059e6:	4649      	mov	r1, r9
 80059e8:	eb43 0501 	adc.w	r5, r3, r1
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	00eb      	lsls	r3, r5, #3
 80059f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059fa:	00e2      	lsls	r2, r4, #3
 80059fc:	4614      	mov	r4, r2
 80059fe:	461d      	mov	r5, r3
 8005a00:	4643      	mov	r3, r8
 8005a02:	18e3      	adds	r3, r4, r3
 8005a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a08:	464b      	mov	r3, r9
 8005a0a:	eb45 0303 	adc.w	r3, r5, r3
 8005a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a2e:	4629      	mov	r1, r5
 8005a30:	008b      	lsls	r3, r1, #2
 8005a32:	4621      	mov	r1, r4
 8005a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a38:	4621      	mov	r1, r4
 8005a3a:	008a      	lsls	r2, r1, #2
 8005a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a40:	f7fa fc1e 	bl	8000280 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <UART_SetConfig+0x4e4>)
 8005a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	011c      	lsls	r4, r3, #4
 8005a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	61b9      	str	r1, [r7, #24]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a74:	4641      	mov	r1, r8
 8005a76:	1851      	adds	r1, r2, r1
 8005a78:	6139      	str	r1, [r7, #16]
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	414b      	adcs	r3, r1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	00cb      	lsls	r3, r1, #3
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a96:	4651      	mov	r1, sl
 8005a98:	00ca      	lsls	r2, r1, #3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	460a      	mov	r2, r1
 8005aac:	eb42 0303 	adc.w	r3, r2, r3
 8005ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005abe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005acc:	4649      	mov	r1, r9
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	008a      	lsls	r2, r1, #2
 8005ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ade:	f7fa fbcf 	bl	8000280 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <UART_SetConfig+0x4e4>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	3332      	adds	r3, #50	; 0x32
 8005afa:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <UART_SetConfig+0x4e4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b06:	441c      	add	r4, r3
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b10:	677a      	str	r2, [r7, #116]	; 0x74
 8005b12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b16:	4642      	mov	r2, r8
 8005b18:	464b      	mov	r3, r9
 8005b1a:	1891      	adds	r1, r2, r2
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b26:	4641      	mov	r1, r8
 8005b28:	1851      	adds	r1, r2, r1
 8005b2a:	6039      	str	r1, [r7, #0]
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	414b      	adcs	r3, r1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b3e:	4659      	mov	r1, fp
 8005b40:	00cb      	lsls	r3, r1, #3
 8005b42:	4651      	mov	r1, sl
 8005b44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b48:	4651      	mov	r1, sl
 8005b4a:	00ca      	lsls	r2, r1, #3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4603      	mov	r3, r0
 8005b52:	4642      	mov	r2, r8
 8005b54:	189b      	adds	r3, r3, r2
 8005b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6c:	667a      	str	r2, [r7, #100]	; 0x64
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	008b      	lsls	r3, r1, #2
 8005b7e:	4641      	mov	r1, r8
 8005b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b84:	4641      	mov	r1, r8
 8005b86:	008a      	lsls	r2, r1, #2
 8005b88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b8c:	f7fa fb78 	bl	8000280 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <UART_SetConfig+0x4e4>)
 8005b96:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2164      	movs	r1, #100	; 0x64
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <UART_SetConfig+0x4e4>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4422      	add	r2, r4
 8005bbc:	609a      	str	r2, [r3, #8]
}
 8005bbe:	bf00      	nop
 8005bc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bca:	bf00      	nop
 8005bcc:	51eb851f 	.word	0x51eb851f

08005bd0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	f107 001c 	add.w	r0, r7, #28
 8005bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005be6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005be8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005bea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005bee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005bf2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005bf6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005bfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005c0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	b004      	add	sp, #16
 8005c24:	4770      	bx	lr

08005c26 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cb8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005cbe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005cc4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005cd4:	f023 030f 	bic.w	r3, r3, #15
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	b2db      	uxtb	r3, r3
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3314      	adds	r3, #20
 8005d16:	461a      	mov	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
}  
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d54:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d5a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0

}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b088      	sub	sp, #32
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005d94:	2310      	movs	r3, #16
 8005d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff74 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	2110      	movs	r1, #16
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa19 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005dd8:	2311      	movs	r3, #17
 8005dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff52 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	2111      	movs	r1, #17
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f9f7 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e04:	69fb      	ldr	r3, [r7, #28]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b088      	sub	sp, #32
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005e1c:	2312      	movs	r3, #18
 8005e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff30 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	2112      	movs	r1, #18
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9d5 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e48:	69fb      	ldr	r3, [r7, #28]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b088      	sub	sp, #32
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e60:	2318      	movs	r3, #24
 8005e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ff0e 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	2118      	movs	r1, #24
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f9b3 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b088      	sub	sp, #32
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ea4:	2319      	movs	r3, #25
 8005ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff feec 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	2119      	movs	r1, #25
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f991 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005ee8:	230c      	movs	r3, #12
 8005eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff feca 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <SDMMC_CmdStopTransfer+0x40>)
 8005f08:	210c      	movs	r1, #12
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f970 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f12:	69fb      	ldr	r3, [r7, #28]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	05f5e100 	.word	0x05f5e100

08005f20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f30:	2307      	movs	r3, #7
 8005f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f42:	f107 0310 	add.w	r3, r7, #16
 8005f46:	4619      	mov	r1, r3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff fea6 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	2107      	movs	r1, #7
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f94b 	bl	80061f0 <SDMMC_GetCmdResp1>
 8005f5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fe85 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb65 	bl	8006660 <SDMMC_GetCmdError>
 8005f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f98:	69fb      	ldr	r3, [r7, #28]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fe66 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 faf8 	bl	80065c4 <SDMMC_GetCmdResp7>
 8005fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005fee:	2337      	movs	r3, #55	; 0x37
 8005ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff2:	2340      	movs	r3, #64	; 0x40
 8005ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fe47 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800600c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006010:	2137      	movs	r1, #55	; 0x37
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8ec 	bl	80061f0 <SDMMC_GetCmdResp1>
 8006018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601a:	69fb      	ldr	r3, [r7, #28]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800603a:	2329      	movs	r3, #41	; 0x29
 800603c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800603e:	2340      	movs	r3, #64	; 0x40
 8006040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fe21 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9ff 	bl	800645c <SDMMC_GetCmdResp3>
 800605e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006060:	69fb      	ldr	r3, [r7, #28]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b088      	sub	sp, #32
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006078:	2306      	movs	r3, #6
 800607a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fe02 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	2106      	movs	r1, #6
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8a7 	bl	80061f0 <SDMMC_GetCmdResp1>
 80060a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a4:	69fb      	ldr	r3, [r7, #28]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80060ba:	2333      	movs	r3, #51	; 0x33
 80060bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060be:	2340      	movs	r3, #64	; 0x40
 80060c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fde1 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80060d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060dc:	2133      	movs	r1, #51	; 0x33
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f886 	bl	80061f0 <SDMMC_GetCmdResp1>
 80060e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060e6:	69fb      	ldr	r3, [r7, #28]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80060fc:	2302      	movs	r3, #2
 80060fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006100:	23c0      	movs	r3, #192	; 0xc0
 8006102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff fdc0 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f956 	bl	80063cc <SDMMC_GetCmdResp2>
 8006120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006122:	69fb      	ldr	r3, [r7, #28]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800613a:	2309      	movs	r3, #9
 800613c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800613e:	23c0      	movs	r3, #192	; 0xc0
 8006140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800614c:	f107 0308 	add.w	r3, r7, #8
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fda1 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f937 	bl	80063cc <SDMMC_GetCmdResp2>
 800615e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006160:	69fb      	ldr	r3, [r7, #28]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b088      	sub	sp, #32
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006178:	2303      	movs	r3, #3
 800617a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800617c:	2340      	movs	r3, #64	; 0x40
 800617e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fd82 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	2103      	movs	r1, #3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f99c 	bl	80064d8 <SDMMC_GetCmdResp6>
 80061a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a2:	69fb      	ldr	r3, [r7, #28]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80061ba:	230d      	movs	r3, #13
 80061bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061be:	2340      	movs	r3, #64	; 0x40
 80061c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fd61 	bl	8005c9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80061d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061dc:	210d      	movs	r1, #13
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f806 	bl	80061f0 <SDMMC_GetCmdResp1>
 80061e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e6:	69fb      	ldr	r3, [r7, #28]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	460b      	mov	r3, r1
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80061fe:	4b70      	ldr	r3, [pc, #448]	; (80063c0 <SDMMC_GetCmdResp1+0x1d0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a70      	ldr	r2, [pc, #448]	; (80063c4 <SDMMC_GetCmdResp1+0x1d4>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	0a5a      	lsrs	r2, r3, #9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	61fa      	str	r2, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800621c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006220:	e0c9      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0ef      	beq.n	8006212 <SDMMC_GetCmdResp1+0x22>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ea      	bne.n	8006212 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2204      	movs	r2, #4
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800624e:	2304      	movs	r3, #4
 8006250:	e0b1      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006264:	2301      	movs	r3, #1
 8006266:	e0a6      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	22c5      	movs	r2, #197	; 0xc5
 800626c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fd3d 	bl	8005cee <SDIO_GetCommandResponse>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	4293      	cmp	r3, r2
 800627c:	d001      	beq.n	8006282 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800627e:	2301      	movs	r3, #1
 8006280:	e099      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006282:	2100      	movs	r1, #0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fd3f 	bl	8005d08 <SDIO_GetResponse>
 800628a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4b4e      	ldr	r3, [pc, #312]	; (80063c8 <SDMMC_GetCmdResp1+0x1d8>)
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006296:	2300      	movs	r3, #0
 8006298:	e08d      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	da02      	bge.n	80062a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80062a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062a4:	e087      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062b0:	2340      	movs	r3, #64	; 0x40
 80062b2:	e080      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	e079      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80062cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d0:	e071      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80062dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e0:	e069      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80062ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f0:	e061      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80062fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006300:	e059      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800630c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006310:	e051      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800631c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006320:	e049      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800632c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006330:	e041      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800633c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006340:	e039      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800634c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006350:	e031      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800635c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006360:	e029      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800636c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006370:	e021      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800637c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006380:	e019      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800638c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006390:	e011      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800639c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063a0:	e009      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063b0:	e001      	b.n	80063b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000050 	.word	0x20000050
 80063c4:	10624dd3 	.word	0x10624dd3
 80063c8:	fdffe008 	.word	0xfdffe008

080063cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063d4:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <SDMMC_GetCmdResp2+0x88>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1f      	ldr	r2, [pc, #124]	; (8006458 <SDMMC_GetCmdResp2+0x8c>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0a5b      	lsrs	r3, r3, #9
 80063e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	60fa      	str	r2, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063f8:	e026      	b.n	8006448 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0ef      	beq.n	80063ea <SDMMC_GetCmdResp2+0x1e>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1ea      	bne.n	80063ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2204      	movs	r2, #4
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006426:	2304      	movs	r3, #4
 8006428:	e00e      	b.n	8006448 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800643c:	2301      	movs	r3, #1
 800643e:	e003      	b.n	8006448 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	22c5      	movs	r2, #197	; 0xc5
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	20000050 	.word	0x20000050
 8006458:	10624dd3 	.word	0x10624dd3

0800645c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <SDMMC_GetCmdResp3+0x74>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <SDMMC_GetCmdResp3+0x78>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	0a5b      	lsrs	r3, r3, #9
 8006470:	f241 3288 	movw	r2, #5000	; 0x1388
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	60fa      	str	r2, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006488:	e01b      	b.n	80064c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0ef      	beq.n	800647a <SDMMC_GetCmdResp3+0x1e>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1ea      	bne.n	800647a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064b6:	2304      	movs	r3, #4
 80064b8:	e003      	b.n	80064c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	22c5      	movs	r2, #197	; 0xc5
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000050 	.word	0x20000050
 80064d4:	10624dd3 	.word	0x10624dd3

080064d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	460b      	mov	r3, r1
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064e6:	4b35      	ldr	r3, [pc, #212]	; (80065bc <SDMMC_GetCmdResp6+0xe4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <SDMMC_GetCmdResp6+0xe8>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	0a5b      	lsrs	r3, r3, #9
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1e5a      	subs	r2, r3, #1
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006506:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800650a:	e052      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0ef      	beq.n	80064fc <SDMMC_GetCmdResp6+0x24>
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ea      	bne.n	80064fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2204      	movs	r2, #4
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006538:	2304      	movs	r3, #4
 800653a:	e03a      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800654e:	2301      	movs	r3, #1
 8006550:	e02f      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fbcb 	bl	8005cee <SDIO_GetCommandResponse>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	4293      	cmp	r3, r2
 8006560:	d001      	beq.n	8006566 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006562:	2301      	movs	r3, #1
 8006564:	e025      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	22c5      	movs	r2, #197	; 0xc5
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800656c:	2100      	movs	r1, #0
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fbca 	bl	8005d08 <SDIO_GetResponse>
 8006574:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800658a:	2300      	movs	r3, #0
 800658c:	e011      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800659c:	e009      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ac:	e001      	b.n	80065b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000050 	.word	0x20000050
 80065c0:	10624dd3 	.word	0x10624dd3

080065c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065cc:	4b22      	ldr	r3, [pc, #136]	; (8006658 <SDMMC_GetCmdResp7+0x94>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a22      	ldr	r2, [pc, #136]	; (800665c <SDMMC_GetCmdResp7+0x98>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0a5b      	lsrs	r3, r3, #9
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	60fa      	str	r2, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065f0:	e02c      	b.n	800664c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ef      	beq.n	80065e2 <SDMMC_GetCmdResp7+0x1e>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ea      	bne.n	80065e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2204      	movs	r2, #4
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800661e:	2304      	movs	r3, #4
 8006620:	e014      	b.n	800664c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006634:	2301      	movs	r3, #1
 8006636:	e009      	b.n	800664c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2240      	movs	r2, #64	; 0x40
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800664a:	2300      	movs	r3, #0
  
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000050 	.word	0x20000050
 800665c:	10624dd3 	.word	0x10624dd3

08006660 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <SDMMC_GetCmdError+0x50>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <SDMMC_GetCmdError+0x54>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	0a5b      	lsrs	r3, r3, #9
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1e5a      	subs	r2, r3, #1
 8006682:	60fa      	str	r2, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800668c:	e009      	b.n	80066a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f1      	beq.n	800667e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	22c5      	movs	r2, #197	; 0xc5
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20000050 	.word	0x20000050
 80066b4:	10624dd3 	.word	0x10624dd3

080066b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80066bc:	4904      	ldr	r1, [pc, #16]	; (80066d0 <MX_FATFS_Init+0x18>)
 80066be:	4805      	ldr	r0, [pc, #20]	; (80066d4 <MX_FATFS_Init+0x1c>)
 80066c0:	f002 fd3a 	bl	8009138 <FATFS_LinkDriver>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <MX_FATFS_Init+0x20>)
 80066ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20003c84 	.word	0x20003c84
 80066d4:	0800a33c 	.word	0x0800a33c
 80066d8:	20003c80 	.word	0x20003c80

080066dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80066e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80066f6:	f000 f879 	bl	80067ec <BSP_SD_IsDetected>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d001      	beq.n	8006704 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e012      	b.n	800672a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006704:	480b      	ldr	r0, [pc, #44]	; (8006734 <BSP_SD_Init+0x48>)
 8006706:	f7fd fe17 	bl	8004338 <HAL_SD_Init>
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006718:	4806      	ldr	r0, [pc, #24]	; (8006734 <BSP_SD_Init+0x48>)
 800671a:	f7fe fbf1 	bl	8004f00 <HAL_SD_ConfigWideBusOperation>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006728:	79fb      	ldrb	r3, [r7, #7]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000ba4 	.word	0x20000ba4

08006738 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	4806      	ldr	r0, [pc, #24]	; (8006770 <BSP_SD_ReadBlocks+0x38>)
 8006756:	f7fd fe9f 	bl	8004498 <HAL_SD_ReadBlocks>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000ba4 	.word	0x20000ba4

08006774 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	4806      	ldr	r0, [pc, #24]	; (80067ac <BSP_SD_WriteBlocks+0x38>)
 8006792:	f7fe f85f 	bl	8004854 <HAL_SD_WriteBlocks>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000ba4 	.word	0x20000ba4

080067b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80067b4:	4805      	ldr	r0, [pc, #20]	; (80067cc <BSP_SD_GetCardState+0x1c>)
 80067b6:	f7fe fc3d 	bl	8005034 <HAL_SD_GetCardState>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b04      	cmp	r3, #4
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000ba4 	.word	0x20000ba4

080067d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4803      	ldr	r0, [pc, #12]	; (80067e8 <BSP_SD_GetCardInfo+0x18>)
 80067dc:	f7fe fb64 	bl	8004ea8 <HAL_SD_GetCardInfo>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000ba4 	.word	0x20000ba4

080067ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80067f2:	2301      	movs	r3, #1
 80067f4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	b2db      	uxtb	r3, r3
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <SD_CheckStatus+0x38>)
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006818:	f7ff ffca 	bl	80067b0 <BSP_SD_GetCardState>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d107      	bne.n	8006832 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <SD_CheckStatus+0x38>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b04      	ldr	r3, [pc, #16]	; (8006840 <SD_CheckStatus+0x38>)
 8006830:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <SD_CheckStatus+0x38>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	b2db      	uxtb	r3, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000059 	.word	0x20000059

08006844 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <SD_initialize+0x38>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006854:	f7ff ff4a 	bl	80066ec <BSP_SD_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff ffd1 	bl	8006808 <SD_CheckStatus>
 8006866:	4603      	mov	r3, r0
 8006868:	461a      	mov	r2, r3
 800686a:	4b04      	ldr	r3, [pc, #16]	; (800687c <SD_initialize+0x38>)
 800686c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800686e:	4b03      	ldr	r3, [pc, #12]	; (800687c <SD_initialize+0x38>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b2db      	uxtb	r3, r3
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000059 	.word	0x20000059

08006880 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ffbb 	bl	8006808 <SD_CheckStatus>
 8006892:	4603      	mov	r3, r0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68b8      	ldr	r0, [r7, #8]
 80068ba:	f7ff ff3d 	bl	8006738 <BSP_SD_ReadBlocks>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80068c4:	bf00      	nop
 80068c6:	f7ff ff73 	bl	80067b0 <BSP_SD_GetCardState>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1fa      	bne.n	80068c6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b086      	sub	sp, #24
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f7ff ff3a 	bl	8006774 <BSP_SD_WriteBlocks>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006906:	bf00      	nop
 8006908:	f7ff ff52 	bl	80067b0 <BSP_SD_GetCardState>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1fa      	bne.n	8006908 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	; 0x30
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	603a      	str	r2, [r7, #0]
 800692a:	71fb      	strb	r3, [r7, #7]
 800692c:	460b      	mov	r3, r1
 800692e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006936:	4b25      	ldr	r3, [pc, #148]	; (80069cc <SD_ioctl+0xac>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <SD_ioctl+0x28>
 8006944:	2303      	movs	r3, #3
 8006946:	e03c      	b.n	80069c2 <SD_ioctl+0xa2>

  switch (cmd)
 8006948:	79bb      	ldrb	r3, [r7, #6]
 800694a:	2b03      	cmp	r3, #3
 800694c:	d834      	bhi.n	80069b8 <SD_ioctl+0x98>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <SD_ioctl+0x34>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006965 	.word	0x08006965
 8006958:	0800696d 	.word	0x0800696d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800699f 	.word	0x0800699f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800696a:	e028      	b.n	80069be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff ff2d 	bl	80067d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006982:	e01c      	b.n	80069be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ff21 	bl	80067d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	b29a      	uxth	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800699c:	e00f      	b.n	80069be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800699e:	f107 030c 	add.w	r3, r7, #12
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff ff14 	bl	80067d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	0a5a      	lsrs	r2, r3, #9
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069b6:	e002      	b.n	80069be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80069be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000059 	.word	0x20000059

080069d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <disk_status+0x30>)
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	79fa      	ldrb	r2, [r7, #7]
 80069e8:	4905      	ldr	r1, [pc, #20]	; (8006a00 <disk_status+0x30>)
 80069ea:	440a      	add	r2, r1
 80069ec:	7a12      	ldrb	r2, [r2, #8]
 80069ee:	4610      	mov	r0, r2
 80069f0:	4798      	blx	r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20003cc0 	.word	0x20003cc0

08006a04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <disk_initialize+0x48>)
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d111      	bne.n	8006a40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	4a0b      	ldr	r2, [pc, #44]	; (8006a4c <disk_initialize+0x48>)
 8006a20:	2101      	movs	r1, #1
 8006a22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <disk_initialize+0x48>)
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	79fa      	ldrb	r2, [r7, #7]
 8006a32:	4906      	ldr	r1, [pc, #24]	; (8006a4c <disk_initialize+0x48>)
 8006a34:	440a      	add	r2, r1
 8006a36:	7a12      	ldrb	r2, [r2, #8]
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20003cc0 	.word	0x20003cc0

08006a50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <disk_read+0x3c>)
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	689c      	ldr	r4, [r3, #8]
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <disk_read+0x3c>)
 8006a70:	4413      	add	r3, r2
 8006a72:	7a18      	ldrb	r0, [r3, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	47a0      	blx	r4
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd90      	pop	{r4, r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20003cc0 	.word	0x20003cc0

08006a90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a90:	b590      	push	{r4, r7, lr}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <disk_write+0x3c>)
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68dc      	ldr	r4, [r3, #12]
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4a07      	ldr	r2, [pc, #28]	; (8006acc <disk_write+0x3c>)
 8006ab0:	4413      	add	r3, r2
 8006ab2:	7a18      	ldrb	r0, [r3, #8]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	47a0      	blx	r4
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd90      	pop	{r4, r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20003cc0 	.word	0x20003cc0

08006ad0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	603a      	str	r2, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
 8006adc:	460b      	mov	r3, r1
 8006ade:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <disk_ioctl+0x38>)
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	79fa      	ldrb	r2, [r7, #7]
 8006aee:	4906      	ldr	r1, [pc, #24]	; (8006b08 <disk_ioctl+0x38>)
 8006af0:	440a      	add	r2, r1
 8006af2:	7a10      	ldrb	r0, [r2, #8]
 8006af4:	79b9      	ldrb	r1, [r7, #6]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4798      	blx	r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	73fb      	strb	r3, [r7, #15]
  return res;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20003cc0 	.word	0x20003cc0

08006b0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3301      	adds	r3, #1
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	b21a      	sxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b21b      	sxth	r3, r3
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b2e:	89fb      	ldrh	r3, [r7, #14]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3303      	adds	r3, #3
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	3202      	adds	r2, #2
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	3201      	adds	r2, #1
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	887a      	ldrh	r2, [r7, #2]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	887a      	ldrh	r2, [r7, #2]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	0a1b      	lsrs	r3, r3, #8
 8006bd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	1c53      	adds	r3, r2, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	6179      	str	r1, [r7, #20]
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	607b      	str	r3, [r7, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f1      	bne.n	8006c2a <mem_cpy+0x1a>
	}
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c52:	b480      	push	{r7}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	617a      	str	r2, [r7, #20]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f3      	bne.n	8006c62 <mem_set+0x10>
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c88:	b480      	push	{r7}
 8006c8a:	b089      	sub	sp, #36	; 0x24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	61fa      	str	r2, [r7, #28]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	61ba      	str	r2, [r7, #24]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	1acb      	subs	r3, r1, r3
 8006cb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	607b      	str	r3, [r7, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <mem_cmp+0x40>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0eb      	beq.n	8006ca0 <mem_cmp+0x18>

	return r;
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3724      	adds	r7, #36	; 0x24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006ce0:	e002      	b.n	8006ce8 <chk_chr+0x12>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <chk_chr+0x26>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d1f2      	bne.n	8006ce2 <chk_chr+0xc>
	return *str;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e029      	b.n	8006d74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d20:	4a27      	ldr	r2, [pc, #156]	; (8006dc0 <chk_lock+0xb4>)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	4413      	add	r3, r2
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01d      	beq.n	8006d6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d2e:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <chk_lock+0xb4>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	4413      	add	r3, r2
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d116      	bne.n	8006d6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d40:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <chk_lock+0xb4>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	4413      	add	r3, r2
 8006d48:	3304      	adds	r3, #4
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d10c      	bne.n	8006d6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d54:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <chk_lock+0xb4>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d102      	bne.n	8006d6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d68:	e007      	b.n	8006d7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d9d2      	bls.n	8006d20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d109      	bne.n	8006d94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <chk_lock+0x80>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d101      	bne.n	8006d90 <chk_lock+0x84>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e010      	b.n	8006db2 <chk_lock+0xa6>
 8006d90:	2312      	movs	r3, #18
 8006d92:	e00e      	b.n	8006db2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d108      	bne.n	8006dac <chk_lock+0xa0>
 8006d9a:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <chk_lock+0xb4>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	4413      	add	r3, r2
 8006da2:	330c      	adds	r3, #12
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006daa:	d101      	bne.n	8006db0 <chk_lock+0xa4>
 8006dac:	2310      	movs	r3, #16
 8006dae:	e000      	b.n	8006db2 <chk_lock+0xa6>
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20003c90 	.word	0x20003c90

08006dc4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	e002      	b.n	8006dd6 <enq_lock+0x12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d806      	bhi.n	8006dea <enq_lock+0x26>
 8006ddc:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <enq_lock+0x40>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	4413      	add	r3, r2
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f2      	bne.n	8006dd0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20003c90 	.word	0x20003c90

08006e08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e01f      	b.n	8006e58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e18:	4a41      	ldr	r2, [pc, #260]	; (8006f20 <inc_lock+0x118>)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	4413      	add	r3, r2
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d113      	bne.n	8006e52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e2a:	4a3d      	ldr	r2, [pc, #244]	; (8006f20 <inc_lock+0x118>)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	4413      	add	r3, r2
 8006e32:	3304      	adds	r3, #4
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d109      	bne.n	8006e52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e3e:	4a38      	ldr	r2, [pc, #224]	; (8006f20 <inc_lock+0x118>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	4413      	add	r3, r2
 8006e46:	3308      	adds	r3, #8
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d006      	beq.n	8006e60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d9dc      	bls.n	8006e18 <inc_lock+0x10>
 8006e5e:	e000      	b.n	8006e62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d132      	bne.n	8006ece <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e002      	b.n	8006e74 <inc_lock+0x6c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d806      	bhi.n	8006e88 <inc_lock+0x80>
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <inc_lock+0x118>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	4413      	add	r3, r2
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f2      	bne.n	8006e6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d101      	bne.n	8006e92 <inc_lock+0x8a>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e040      	b.n	8006f14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4922      	ldr	r1, [pc, #136]	; (8006f20 <inc_lock+0x118>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	440b      	add	r3, r1
 8006e9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	491e      	ldr	r1, [pc, #120]	; (8006f20 <inc_lock+0x118>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	440b      	add	r3, r1
 8006eac:	3304      	adds	r3, #4
 8006eae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	491a      	ldr	r1, [pc, #104]	; (8006f20 <inc_lock+0x118>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	440b      	add	r3, r1
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ec0:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <inc_lock+0x118>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	330c      	adds	r3, #12
 8006eca:	2200      	movs	r2, #0
 8006ecc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <inc_lock+0xe0>
 8006ed4:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <inc_lock+0x118>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	4413      	add	r3, r2
 8006edc:	330c      	adds	r3, #12
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <inc_lock+0xe0>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e015      	b.n	8006f14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <inc_lock+0xf8>
 8006eee:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <inc_lock+0x118>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	4413      	add	r3, r2
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	e001      	b.n	8006f04 <inc_lock+0xfc>
 8006f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f04:	4906      	ldr	r1, [pc, #24]	; (8006f20 <inc_lock+0x118>)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	440b      	add	r3, r1
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20003c90 	.word	0x20003c90

08006f24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d825      	bhi.n	8006f84 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <dec_lock+0x74>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	4413      	add	r3, r2
 8006f40:	330c      	adds	r3, #12
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f46:	89fb      	ldrh	r3, [r7, #14]
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d101      	bne.n	8006f52 <dec_lock+0x2e>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <dec_lock+0x3a>
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	; (8006f98 <dec_lock+0x74>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	4413      	add	r3, r2
 8006f66:	330c      	adds	r3, #12
 8006f68:	89fa      	ldrh	r2, [r7, #14]
 8006f6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f6c:	89fb      	ldrh	r3, [r7, #14]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <dec_lock+0x5a>
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <dec_lock+0x74>)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	737b      	strb	r3, [r7, #13]
 8006f82:	e001      	b.n	8006f88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f84:	2302      	movs	r3, #2
 8006f86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006f88:	7b7b      	ldrb	r3, [r7, #13]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20003c90 	.word	0x20003c90

08006f9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e010      	b.n	8006fcc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006faa:	4a0d      	ldr	r2, [pc, #52]	; (8006fe0 <clear_lock+0x44>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	4413      	add	r3, r2
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d105      	bne.n	8006fc6 <clear_lock+0x2a>
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <clear_lock+0x44>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	4413      	add	r3, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d9eb      	bls.n	8006faa <clear_lock+0xe>
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20003c90 	.word	0x20003c90

08006fe4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d034      	beq.n	8007062 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7858      	ldrb	r0, [r3, #1]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007008:	2301      	movs	r3, #1
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	f7ff fd40 	bl	8006a90 <disk_write>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
 800701a:	e022      	b.n	8007062 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	429a      	cmp	r2, r3
 8007030:	d217      	bcs.n	8007062 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	789b      	ldrb	r3, [r3, #2]
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e010      	b.n	800705c <sync_window+0x78>
					wsect += fs->fsize;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7858      	ldrb	r0, [r3, #1]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800704e:	2301      	movs	r3, #1
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	f7ff fd1d 	bl	8006a90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3b01      	subs	r3, #1
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d8eb      	bhi.n	800703a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d01b      	beq.n	80070bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ffad 	bl	8006fe4 <sync_window>
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d113      	bne.n	80070bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7858      	ldrb	r0, [r3, #1]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800709e:	2301      	movs	r3, #1
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	f7ff fcd5 	bl	8006a50 <disk_read>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295
 80070b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff ff87 	bl	8006fe4 <sync_window>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d158      	bne.n	8007192 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d148      	bne.n	800717a <sync_fs+0xb2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d144      	bne.n	800717a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3330      	adds	r3, #48	; 0x30
 80070f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fda9 	bl	8006c52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3330      	adds	r3, #48	; 0x30
 8007104:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007108:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fd38 	bl	8006b82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3330      	adds	r3, #48	; 0x30
 8007116:	4921      	ldr	r1, [pc, #132]	; (800719c <sync_fs+0xd4>)
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fd4d 	bl	8006bb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007126:	491e      	ldr	r1, [pc, #120]	; (80071a0 <sync_fs+0xd8>)
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fd45 	bl	8006bb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3330      	adds	r3, #48	; 0x30
 8007132:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7ff fd3b 	bl	8006bb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3330      	adds	r3, #48	; 0x30
 8007146:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7ff fd31 	bl	8006bb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7858      	ldrb	r0, [r3, #1]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716e:	2301      	movs	r3, #1
 8007170:	f7ff fc8e 	bl	8006a90 <disk_write>
			fs->fsi_flag = 0;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fca4 	bl	8006ad0 <disk_ioctl>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <sync_fs+0xca>
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	41615252 	.word	0x41615252
 80071a0:	61417272 	.word	0x61417272

080071a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	3b02      	subs	r3, #2
 80071b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	3b02      	subs	r3, #2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d301      	bcc.n	80071c4 <clust2sect+0x20>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e008      	b.n	80071d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	895b      	ldrh	r3, [r3, #10]
 80071c8:	461a      	mov	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	fb03 f202 	mul.w	r2, r3, r2
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	4413      	add	r3, r2
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d904      	bls.n	8007202 <get_fat+0x20>
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d302      	bcc.n	8007208 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e08f      	b.n	8007328 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d062      	beq.n	80072dc <get_fat+0xfa>
 8007216:	2b03      	cmp	r3, #3
 8007218:	dc7c      	bgt.n	8007314 <get_fat+0x132>
 800721a:	2b01      	cmp	r3, #1
 800721c:	d002      	beq.n	8007224 <get_fat+0x42>
 800721e:	2b02      	cmp	r3, #2
 8007220:	d042      	beq.n	80072a8 <get_fat+0xc6>
 8007222:	e077      	b.n	8007314 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	0a5b      	lsrs	r3, r3, #9
 800723a:	4413      	add	r3, r2
 800723c:	4619      	mov	r1, r3
 800723e:	6938      	ldr	r0, [r7, #16]
 8007240:	f7ff ff14 	bl	800706c <move_window>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d167      	bne.n	800731a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	60fa      	str	r2, [r7, #12]
 8007250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800725c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	0a5b      	lsrs	r3, r3, #9
 8007266:	4413      	add	r3, r2
 8007268:	4619      	mov	r1, r3
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f7ff fefe 	bl	800706c <move_window>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d153      	bne.n	800731e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	461a      	mov	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4313      	orrs	r3, r2
 800728c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <get_fat+0xbc>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	e002      	b.n	80072a4 <get_fat+0xc2>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a4:	617b      	str	r3, [r7, #20]
			break;
 80072a6:	e03f      	b.n	8007328 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6a1a      	ldr	r2, [r3, #32]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	4413      	add	r3, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	6938      	ldr	r0, [r7, #16]
 80072b6:	f7ff fed9 	bl	800706c <move_window>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d130      	bne.n	8007322 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072ce:	4413      	add	r3, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fc1b 	bl	8006b0c <ld_word>
 80072d6:	4603      	mov	r3, r0
 80072d8:	617b      	str	r3, [r7, #20]
			break;
 80072da:	e025      	b.n	8007328 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	09db      	lsrs	r3, r3, #7
 80072e4:	4413      	add	r3, r2
 80072e6:	4619      	mov	r1, r3
 80072e8:	6938      	ldr	r0, [r7, #16]
 80072ea:	f7ff febf 	bl	800706c <move_window>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d118      	bne.n	8007326 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007302:	4413      	add	r3, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fc19 	bl	8006b3c <ld_dword>
 800730a:	4603      	mov	r3, r0
 800730c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007310:	617b      	str	r3, [r7, #20]
			break;
 8007312:	e009      	b.n	8007328 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007314:	2301      	movs	r3, #1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e006      	b.n	8007328 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007326:	bf00      	nop
		}
	}

	return val;
 8007328:	697b      	ldr	r3, [r7, #20]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007332:	b590      	push	{r4, r7, lr}
 8007334:	b089      	sub	sp, #36	; 0x24
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800733e:	2302      	movs	r3, #2
 8007340:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b01      	cmp	r3, #1
 8007346:	f240 80d2 	bls.w	80074ee <put_fat+0x1bc>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	429a      	cmp	r2, r3
 8007352:	f080 80cc 	bcs.w	80074ee <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b03      	cmp	r3, #3
 800735c:	f000 8096 	beq.w	800748c <put_fat+0x15a>
 8007360:	2b03      	cmp	r3, #3
 8007362:	f300 80cd 	bgt.w	8007500 <put_fat+0x1ce>
 8007366:	2b01      	cmp	r3, #1
 8007368:	d002      	beq.n	8007370 <put_fat+0x3e>
 800736a:	2b02      	cmp	r3, #2
 800736c:	d06e      	beq.n	800744c <put_fat+0x11a>
 800736e:	e0c7      	b.n	8007500 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4413      	add	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	0a5b      	lsrs	r3, r3, #9
 8007386:	4413      	add	r3, r2
 8007388:	4619      	mov	r1, r3
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff fe6e 	bl	800706c <move_window>
 8007390:	4603      	mov	r3, r0
 8007392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007394:	7ffb      	ldrb	r3, [r7, #31]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 80ab 	bne.w	80074f2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	61b9      	str	r1, [r7, #24]
 80073a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ac:	4413      	add	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <put_fat+0xa4>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	b25a      	sxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	e001      	b.n	80073da <put_fat+0xa8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1a      	ldr	r2, [r3, #32]
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	4413      	add	r3, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff fe3b 	bl	800706c <move_window>
 80073f6:	4603      	mov	r3, r0
 80073f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d17a      	bne.n	80074f6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740c:	4413      	add	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <put_fat+0xf0>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e00e      	b.n	8007440 <put_fat+0x10e>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f023 030f 	bic.w	r3, r3, #15
 800742c:	b25a      	sxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	b25b      	sxtb	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b25b      	sxtb	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	70da      	strb	r2, [r3, #3]
			break;
 800744a:	e059      	b.n	8007500 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	4413      	add	r3, r2
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fe07 	bl	800706c <move_window>
 800745e:	4603      	mov	r3, r0
 8007460:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007462:	7ffb      	ldrb	r3, [r7, #31]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d148      	bne.n	80074fa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007476:	4413      	add	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	b292      	uxth	r2, r2
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff fb7f 	bl	8006b82 <st_word>
			fs->wflag = 1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	70da      	strb	r2, [r3, #3]
			break;
 800748a:	e039      	b.n	8007500 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	4413      	add	r3, r2
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff fde7 	bl	800706c <move_window>
 800749e:	4603      	mov	r3, r0
 80074a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074a2:	7ffb      	ldrb	r3, [r7, #31]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d12a      	bne.n	80074fe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074bc:	4413      	add	r3, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fb3c 	bl	8006b3c <ld_dword>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074ca:	4323      	orrs	r3, r4
 80074cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074dc:	4413      	add	r3, r2
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fb69 	bl	8006bb8 <st_dword>
			fs->wflag = 1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	70da      	strb	r2, [r3, #3]
			break;
 80074ec:	e008      	b.n	8007500 <put_fat+0x1ce>
		}
	}
 80074ee:	bf00      	nop
 80074f0:	e006      	b.n	8007500 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80074f2:	bf00      	nop
 80074f4:	e004      	b.n	8007500 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80074f6:	bf00      	nop
 80074f8:	e002      	b.n	8007500 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80074fe:	bf00      	nop
	return res;
 8007500:	7ffb      	ldrb	r3, [r7, #31]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3724      	adds	r7, #36	; 0x24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}

0800750a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b088      	sub	sp, #32
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d904      	bls.n	8007530 <remove_chain+0x26>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	429a      	cmp	r2, r3
 800752e:	d301      	bcc.n	8007534 <remove_chain+0x2a>
 8007530:	2302      	movs	r3, #2
 8007532:	e04b      	b.n	80075cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	69b8      	ldr	r0, [r7, #24]
 8007542:	f7ff fef6 	bl	8007332 <put_fat>
 8007546:	4603      	mov	r3, r0
 8007548:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800754a:	7ffb      	ldrb	r3, [r7, #31]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <remove_chain+0x4a>
 8007550:	7ffb      	ldrb	r3, [r7, #31]
 8007552:	e03b      	b.n	80075cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fe43 	bl	80071e2 <get_fat>
 800755c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d031      	beq.n	80075c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <remove_chain+0x64>
 800756a:	2302      	movs	r3, #2
 800756c:	e02e      	b.n	80075cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d101      	bne.n	800757a <remove_chain+0x70>
 8007576:	2301      	movs	r3, #1
 8007578:	e028      	b.n	80075cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800757a:	2200      	movs	r2, #0
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	69b8      	ldr	r0, [r7, #24]
 8007580:	f7ff fed7 	bl	8007332 <put_fat>
 8007584:	4603      	mov	r3, r0
 8007586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007588:	7ffb      	ldrb	r3, [r7, #31]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <remove_chain+0x88>
 800758e:	7ffb      	ldrb	r3, [r7, #31]
 8007590:	e01c      	b.n	80075cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	3b02      	subs	r3, #2
 800759c:	429a      	cmp	r2, r3
 800759e:	d20b      	bcs.n	80075b8 <remove_chain+0xae>
			fs->free_clst++;
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d3c6      	bcc.n	8007554 <remove_chain+0x4a>
 80075c6:	e000      	b.n	80075ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10d      	bne.n	8007606 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <create_chain+0x2c>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d31b      	bcc.n	8007638 <create_chain+0x64>
 8007600:	2301      	movs	r3, #1
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	e018      	b.n	8007638 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fdea 	bl	80071e2 <get_fat>
 800760e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d801      	bhi.n	800761a <create_chain+0x46>
 8007616:	2301      	movs	r3, #1
 8007618:	e070      	b.n	80076fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d101      	bne.n	8007626 <create_chain+0x52>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	e06a      	b.n	80076fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d201      	bcs.n	8007634 <create_chain+0x60>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	e063      	b.n	80076fc <create_chain+0x128>
		scl = clst;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	3301      	adds	r3, #1
 8007640:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	429a      	cmp	r2, r3
 800764a:	d307      	bcc.n	800765c <create_chain+0x88>
				ncl = 2;
 800764c:	2302      	movs	r3, #2
 800764e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	429a      	cmp	r2, r3
 8007656:	d901      	bls.n	800765c <create_chain+0x88>
 8007658:	2300      	movs	r3, #0
 800765a:	e04f      	b.n	80076fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800765c:	69f9      	ldr	r1, [r7, #28]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fdbf 	bl	80071e2 <get_fat>
 8007664:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00e      	beq.n	800768a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d003      	beq.n	800767a <create_chain+0xa6>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d101      	bne.n	800767e <create_chain+0xaa>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e03e      	b.n	80076fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	429a      	cmp	r2, r3
 8007684:	d1da      	bne.n	800763c <create_chain+0x68>
 8007686:	2300      	movs	r3, #0
 8007688:	e038      	b.n	80076fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800768a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6938      	ldr	r0, [r7, #16]
 8007694:	f7ff fe4d 	bl	8007332 <put_fat>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <create_chain+0xe2>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6938      	ldr	r0, [r7, #16]
 80076ae:	f7ff fe40 	bl	8007332 <put_fat>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d116      	bne.n	80076ea <create_chain+0x116>
		fs->last_clst = ncl;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	3b02      	subs	r3, #2
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d804      	bhi.n	80076da <create_chain+0x106>
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	711a      	strb	r2, [r3, #4]
 80076e8:	e007      	b.n	80076fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d102      	bne.n	80076f6 <create_chain+0x122>
 80076f0:	f04f 33ff 	mov.w	r3, #4294967295
 80076f4:	e000      	b.n	80076f8 <create_chain+0x124>
 80076f6:	2301      	movs	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80076fa:	69fb      	ldr	r3, [r7, #28]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	3304      	adds	r3, #4
 800771a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	0a5b      	lsrs	r3, r3, #9
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	8952      	ldrh	r2, [r2, #10]
 8007724:	fbb3 f3f2 	udiv	r3, r3, r2
 8007728:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	613a      	str	r2, [r7, #16]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <clmt_clust+0x3a>
 800773a:	2300      	movs	r3, #0
 800773c:	e010      	b.n	8007760 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	d307      	bcc.n	8007756 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3304      	adds	r3, #4
 8007752:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007754:	e7e9      	b.n	800772a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007756:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4413      	add	r3, r2
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007782:	d204      	bcs.n	800778e <dir_sdi+0x22>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <dir_sdi+0x26>
		return FR_INT_ERR;
 800778e:	2302      	movs	r3, #2
 8007790:	e063      	b.n	800785a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <dir_sdi+0x46>
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d902      	bls.n	80077b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10c      	bne.n	80077d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	8912      	ldrh	r2, [r2, #8]
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d301      	bcc.n	80077c8 <dir_sdi+0x5c>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e048      	b.n	800785a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	61da      	str	r2, [r3, #28]
 80077d0:	e029      	b.n	8007826 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	895b      	ldrh	r3, [r3, #10]
 80077d6:	025b      	lsls	r3, r3, #9
 80077d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077da:	e019      	b.n	8007810 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fcfe 	bl	80071e2 <get_fat>
 80077e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d101      	bne.n	80077f4 <dir_sdi+0x88>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e032      	b.n	800785a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d904      	bls.n	8007804 <dir_sdi+0x98>
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	429a      	cmp	r2, r3
 8007802:	d301      	bcc.n	8007808 <dir_sdi+0x9c>
 8007804:	2302      	movs	r3, #2
 8007806:	e028      	b.n	800785a <dir_sdi+0xee>
			ofs -= csz;
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d2e1      	bcs.n	80077dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	6938      	ldr	r0, [r7, #16]
 800781c:	f7ff fcc2 	bl	80071a4 <clust2sect>
 8007820:	4602      	mov	r2, r0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <dir_sdi+0xcc>
 8007834:	2302      	movs	r3, #2
 8007836:	e010      	b.n	800785a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	0a5b      	lsrs	r3, r3, #9
 8007840:	441a      	add	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007852:	441a      	add	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	3320      	adds	r3, #32
 8007878:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <dir_next+0x28>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007888:	d301      	bcc.n	800788e <dir_next+0x2c>
 800788a:	2304      	movs	r3, #4
 800788c:	e0aa      	b.n	80079e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 8098 	bne.w	80079ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	8912      	ldrh	r2, [r2, #8]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	f0c0 8088 	bcc.w	80079ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	61da      	str	r2, [r3, #28]
 80078c0:	2304      	movs	r3, #4
 80078c2:	e08f      	b.n	80079e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	0a5b      	lsrs	r3, r3, #9
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	8952      	ldrh	r2, [r2, #10]
 80078cc:	3a01      	subs	r2, #1
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d17a      	bne.n	80079ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7ff fc80 	bl	80071e2 <get_fat>
 80078e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d801      	bhi.n	80078ee <dir_next+0x8c>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e07a      	b.n	80079e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d101      	bne.n	80078fa <dir_next+0x98>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e074      	b.n	80079e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	429a      	cmp	r2, r3
 8007902:	d358      	bcc.n	80079b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	61da      	str	r2, [r3, #28]
 8007910:	2304      	movs	r3, #4
 8007912:	e067      	b.n	80079e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	4619      	mov	r1, r3
 800791c:	4610      	mov	r0, r2
 800791e:	f7ff fe59 	bl	80075d4 <create_chain>
 8007922:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <dir_next+0xcc>
 800792a:	2307      	movs	r3, #7
 800792c:	e05a      	b.n	80079e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <dir_next+0xd6>
 8007934:	2302      	movs	r3, #2
 8007936:	e055      	b.n	80079e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d101      	bne.n	8007944 <dir_next+0xe2>
 8007940:	2301      	movs	r3, #1
 8007942:	e04f      	b.n	80079e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff fb4d 	bl	8006fe4 <sync_window>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <dir_next+0xf2>
 8007950:	2301      	movs	r3, #1
 8007952:	e047      	b.n	80079e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3330      	adds	r3, #48	; 0x30
 8007958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff f977 	bl	8006c52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7ff fc1a 	bl	80071a4 <clust2sect>
 8007970:	4602      	mov	r2, r0
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	62da      	str	r2, [r3, #44]	; 0x2c
 8007976:	e012      	b.n	800799e <dir_next+0x13c>
						fs->wflag = 1;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fb30 	bl	8006fe4 <sync_window>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <dir_next+0x12c>
 800798a:	2301      	movs	r3, #1
 800798c:	e02a      	b.n	80079e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3301      	adds	r3, #1
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	62da      	str	r2, [r3, #44]	; 0x2c
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	895b      	ldrh	r3, [r3, #10]
 80079a2:	461a      	mov	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d3e6      	bcc.n	8007978 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079bc:	6979      	ldr	r1, [r7, #20]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fbf0 	bl	80071a4 <clust2sect>
 80079c4:	4602      	mov	r2, r0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	441a      	add	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff feb4 	bl	800776c <dir_sdi>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d12b      	bne.n	8007a66 <dir_alloc+0x7a>
		n = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fb27 	bl	800706c <move_window>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d11d      	bne.n	8007a64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2be5      	cmp	r3, #229	; 0xe5
 8007a30:	d004      	beq.n	8007a3c <dir_alloc+0x50>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d107      	bne.n	8007a4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d102      	bne.n	8007a50 <dir_alloc+0x64>
 8007a4a:	e00c      	b.n	8007a66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a50:	2101      	movs	r1, #1
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff ff05 	bl	8007862 <dir_next>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0d7      	beq.n	8007a12 <dir_alloc+0x26>
 8007a62:	e000      	b.n	8007a66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d101      	bne.n	8007a70 <dir_alloc+0x84>
 8007a6c:	2307      	movs	r3, #7
 8007a6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	331a      	adds	r3, #26
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff f83f 	bl	8006b0c <ld_word>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d109      	bne.n	8007aae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff f834 	bl	8006b0c <ld_word>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	331a      	adds	r3, #26
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	b292      	uxth	r2, r2
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f857 	bl	8006b82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d109      	bne.n	8007af0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f103 0214 	add.w	r2, r3, #20
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f7ff f849 	bl	8006b82 <st_word>
	}
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b06:	2100      	movs	r1, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fe2f 	bl	800776c <dir_sdi>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <dir_find+0x24>
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	e03e      	b.n	8007b9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f7ff faa2 	bl	800706c <move_window>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d12f      	bne.n	8007b92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <dir_find+0x4e>
 8007b40:	2304      	movs	r3, #4
 8007b42:	75fb      	strb	r3, [r7, #23]
 8007b44:	e028      	b.n	8007b98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	330b      	adds	r3, #11
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	330b      	adds	r3, #11
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <dir_find+0x86>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a18      	ldr	r0, [r3, #32]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3324      	adds	r3, #36	; 0x24
 8007b70:	220b      	movs	r2, #11
 8007b72:	4619      	mov	r1, r3
 8007b74:	f7ff f888 	bl	8006c88 <mem_cmp>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b7e:	2100      	movs	r1, #0
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fe6e 	bl	8007862 <dir_next>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0c5      	beq.n	8007b1c <dir_find+0x24>
 8007b90:	e002      	b.n	8007b98 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b96:	bf00      	nop

	return res;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ff1a 	bl	80079ec <dir_alloc>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11c      	bne.n	8007bfc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68b8      	ldr	r0, [r7, #8]
 8007bca:	f7ff fa4f 	bl	800706c <move_window>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d111      	bne.n	8007bfc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff f836 	bl	8006c52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a18      	ldr	r0, [r3, #32]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	220b      	movs	r2, #11
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f7ff f80d 	bl	8006c10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c1e:	220b      	movs	r2, #11
 8007c20:	2120      	movs	r1, #32
 8007c22:	68b8      	ldr	r0, [r7, #8]
 8007c24:	f7ff f815 	bl	8006c52 <mem_set>
	si = i = 0; ni = 8;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	613b      	str	r3, [r7, #16]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	2308      	movs	r3, #8
 8007c32:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	61fa      	str	r2, [r7, #28]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c42:	7efb      	ldrb	r3, [r7, #27]
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d94e      	bls.n	8007ce6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c48:	7efb      	ldrb	r3, [r7, #27]
 8007c4a:	2b2f      	cmp	r3, #47	; 0x2f
 8007c4c:	d006      	beq.n	8007c5c <create_name+0x54>
 8007c4e:	7efb      	ldrb	r3, [r7, #27]
 8007c50:	2b5c      	cmp	r3, #92	; 0x5c
 8007c52:	d110      	bne.n	8007c76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c54:	e002      	b.n	8007c5c <create_name+0x54>
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b2f      	cmp	r3, #47	; 0x2f
 8007c66:	d0f6      	beq.n	8007c56 <create_name+0x4e>
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b5c      	cmp	r3, #92	; 0x5c
 8007c72:	d0f0      	beq.n	8007c56 <create_name+0x4e>
			break;
 8007c74:	e038      	b.n	8007ce8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007c76:	7efb      	ldrb	r3, [r7, #27]
 8007c78:	2b2e      	cmp	r3, #46	; 0x2e
 8007c7a:	d003      	beq.n	8007c84 <create_name+0x7c>
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d30c      	bcc.n	8007c9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b0b      	cmp	r3, #11
 8007c88:	d002      	beq.n	8007c90 <create_name+0x88>
 8007c8a:	7efb      	ldrb	r3, [r7, #27]
 8007c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8e:	d001      	beq.n	8007c94 <create_name+0x8c>
 8007c90:	2306      	movs	r3, #6
 8007c92:	e044      	b.n	8007d1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007c94:	2308      	movs	r3, #8
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	230b      	movs	r3, #11
 8007c9a:	617b      	str	r3, [r7, #20]
			continue;
 8007c9c:	e022      	b.n	8007ce4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007c9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da04      	bge.n	8007cb0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ca6:	7efb      	ldrb	r3, [r7, #27]
 8007ca8:	3b80      	subs	r3, #128	; 0x80
 8007caa:	4a1f      	ldr	r2, [pc, #124]	; (8007d28 <create_name+0x120>)
 8007cac:	5cd3      	ldrb	r3, [r2, r3]
 8007cae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cb0:	7efb      	ldrb	r3, [r7, #27]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	481d      	ldr	r0, [pc, #116]	; (8007d2c <create_name+0x124>)
 8007cb6:	f7ff f80e 	bl	8006cd6 <chk_chr>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <create_name+0xbc>
 8007cc0:	2306      	movs	r3, #6
 8007cc2:	e02c      	b.n	8007d1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007cc4:	7efb      	ldrb	r3, [r7, #27]
 8007cc6:	2b60      	cmp	r3, #96	; 0x60
 8007cc8:	d905      	bls.n	8007cd6 <create_name+0xce>
 8007cca:	7efb      	ldrb	r3, [r7, #27]
 8007ccc:	2b7a      	cmp	r3, #122	; 0x7a
 8007cce:	d802      	bhi.n	8007cd6 <create_name+0xce>
 8007cd0:	7efb      	ldrb	r3, [r7, #27]
 8007cd2:	3b20      	subs	r3, #32
 8007cd4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	613a      	str	r2, [r7, #16]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4413      	add	r3, r2
 8007ce0:	7efa      	ldrb	r2, [r7, #27]
 8007ce2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ce4:	e7a6      	b.n	8007c34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ce6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	441a      	add	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <create_name+0xf4>
 8007cf8:	2306      	movs	r3, #6
 8007cfa:	e010      	b.n	8007d1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2be5      	cmp	r3, #229	; 0xe5
 8007d02:	d102      	bne.n	8007d0a <create_name+0x102>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2205      	movs	r2, #5
 8007d08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d0a:	7efb      	ldrb	r3, [r7, #27]
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d801      	bhi.n	8007d14 <create_name+0x10c>
 8007d10:	2204      	movs	r2, #4
 8007d12:	e000      	b.n	8007d16 <create_name+0x10e>
 8007d14:	2200      	movs	r2, #0
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	330b      	adds	r3, #11
 8007d1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	0800a350 	.word	0x0800a350
 8007d2c:	0800a2d8 	.word	0x0800a2d8

08007d30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d44:	e002      	b.n	8007d4c <follow_path+0x1c>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b2f      	cmp	r3, #47	; 0x2f
 8007d52:	d0f8      	beq.n	8007d46 <follow_path+0x16>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b5c      	cmp	r3, #92	; 0x5c
 8007d5a:	d0f4      	beq.n	8007d46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b1f      	cmp	r3, #31
 8007d68:	d80a      	bhi.n	8007d80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2280      	movs	r2, #128	; 0x80
 8007d6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff fcf9 	bl	800776c <dir_sdi>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]
 8007d7e:	e043      	b.n	8007e08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d80:	463b      	mov	r3, r7
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff3f 	bl	8007c08 <create_name>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d134      	bne.n	8007dfe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff feaf 	bl	8007af8 <dir_find>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007da4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d127      	bne.n	8007e02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d122      	bne.n	8007e02 <follow_path+0xd2>
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dc0:	e01f      	b.n	8007e02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dc2:	7afb      	ldrb	r3, [r7, #11]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11c      	bne.n	8007e06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	799b      	ldrb	r3, [r3, #6]
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007dd8:	2305      	movs	r3, #5
 8007dda:	75fb      	strb	r3, [r7, #23]
 8007ddc:	e014      	b.n	8007e08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dec:	4413      	add	r3, r2
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff fe42 	bl	8007a7a <ld_clust>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007dfc:	e7c0      	b.n	8007d80 <follow_path+0x50>
			if (res != FR_OK) break;
 8007dfe:	bf00      	nop
 8007e00:	e002      	b.n	8007e08 <follow_path+0xd8>
				break;
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e06:	bf00      	nop
			}
		}
	}

	return res;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d031      	beq.n	8007e8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e002      	b.n	8007e36 <get_ldnumber+0x24>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3301      	adds	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d903      	bls.n	8007e46 <get_ldnumber+0x34>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b3a      	cmp	r3, #58	; 0x3a
 8007e44:	d1f4      	bne.n	8007e30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b3a      	cmp	r3, #58	; 0x3a
 8007e4c:	d11c      	bne.n	8007e88 <get_ldnumber+0x76>
			tp = *path;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	60fa      	str	r2, [r7, #12]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	3b30      	subs	r3, #48	; 0x30
 8007e5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d80e      	bhi.n	8007e84 <get_ldnumber+0x72>
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d10a      	bne.n	8007e84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d107      	bne.n	8007e84 <get_ldnumber+0x72>
					vol = (int)i;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	e002      	b.n	8007e8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e8c:	693b      	ldr	r3, [r7, #16]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	70da      	strb	r2, [r3, #3]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff f8d8 	bl	800706c <move_window>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <check_fs+0x2a>
 8007ec2:	2304      	movs	r3, #4
 8007ec4:	e038      	b.n	8007f38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3330      	adds	r3, #48	; 0x30
 8007eca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fe1c 	bl	8006b0c <ld_word>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d001      	beq.n	8007ee4 <check_fs+0x48>
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e029      	b.n	8007f38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eea:	2be9      	cmp	r3, #233	; 0xe9
 8007eec:	d009      	beq.n	8007f02 <check_fs+0x66>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ef4:	2beb      	cmp	r3, #235	; 0xeb
 8007ef6:	d11e      	bne.n	8007f36 <check_fs+0x9a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007efe:	2b90      	cmp	r3, #144	; 0x90
 8007f00:	d119      	bne.n	8007f36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3330      	adds	r3, #48	; 0x30
 8007f06:	3336      	adds	r3, #54	; 0x36
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fe17 	bl	8006b3c <ld_dword>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f14:	4a0a      	ldr	r2, [pc, #40]	; (8007f40 <check_fs+0xa4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d101      	bne.n	8007f1e <check_fs+0x82>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e00c      	b.n	8007f38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3330      	adds	r3, #48	; 0x30
 8007f22:	3352      	adds	r3, #82	; 0x52
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe fe09 	bl	8006b3c <ld_dword>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4a05      	ldr	r2, [pc, #20]	; (8007f44 <check_fs+0xa8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d101      	bne.n	8007f36 <check_fs+0x9a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	e000      	b.n	8007f38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f36:	2302      	movs	r3, #2
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	00544146 	.word	0x00544146
 8007f44:	33544146 	.word	0x33544146

08007f48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b096      	sub	sp, #88	; 0x58
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff ff58 	bl	8007e12 <get_ldnumber>
 8007f62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da01      	bge.n	8007f6e <find_volume+0x26>
 8007f6a:	230b      	movs	r3, #11
 8007f6c:	e22d      	b.n	80083ca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f6e:	4aa1      	ldr	r2, [pc, #644]	; (80081f4 <find_volume+0x2ac>)
 8007f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <find_volume+0x3a>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	e223      	b.n	80083ca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	f023 0301 	bic.w	r3, r3, #1
 8007f8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01a      	beq.n	8007fce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fd17 	bl	80069d0 <disk_status>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10c      	bne.n	8007fce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <find_volume+0x82>
 8007fba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fc6:	230a      	movs	r3, #10
 8007fc8:	e1ff      	b.n	80083ca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e1fd      	b.n	80083ca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fd0f 	bl	8006a04 <disk_initialize>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e1e6      	b.n	80083ca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <find_volume+0xca>
 8008002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800800e:	230a      	movs	r3, #10
 8008010:	e1db      	b.n	80083ca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800801a:	f7ff ff3f 	bl	8007e9c <check_fs>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008028:	2b02      	cmp	r3, #2
 800802a:	d149      	bne.n	80080c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800802c:	2300      	movs	r3, #0
 800802e:	643b      	str	r3, [r7, #64]	; 0x40
 8008030:	e01e      	b.n	8008070 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008040:	4413      	add	r3, r2
 8008042:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	3304      	adds	r3, #4
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d006      	beq.n	800805c <find_volume+0x114>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	3308      	adds	r3, #8
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fd72 	bl	8006b3c <ld_dword>
 8008058:	4602      	mov	r2, r0
 800805a:	e000      	b.n	800805e <find_volume+0x116>
 800805c:	2200      	movs	r2, #0
 800805e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	3358      	adds	r3, #88	; 0x58
 8008064:	443b      	add	r3, r7
 8008066:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800806a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806c:	3301      	adds	r3, #1
 800806e:	643b      	str	r3, [r7, #64]	; 0x40
 8008070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008072:	2b03      	cmp	r3, #3
 8008074:	d9dd      	bls.n	8008032 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008076:	2300      	movs	r3, #0
 8008078:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800807a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <find_volume+0x13e>
 8008080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008082:	3b01      	subs	r3, #1
 8008084:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	3358      	adds	r3, #88	; 0x58
 800808c:	443b      	add	r3, r7
 800808e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008092:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <find_volume+0x15e>
 800809a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800809c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800809e:	f7ff fefd 	bl	8007e9c <check_fs>
 80080a2:	4603      	mov	r3, r0
 80080a4:	e000      	b.n	80080a8 <find_volume+0x160>
 80080a6:	2303      	movs	r3, #3
 80080a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d905      	bls.n	80080c0 <find_volume+0x178>
 80080b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b6:	3301      	adds	r3, #1
 80080b8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d9e2      	bls.n	8008086 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d101      	bne.n	80080cc <find_volume+0x184>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e17e      	b.n	80083ca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d901      	bls.n	80080d8 <find_volume+0x190>
 80080d4:	230d      	movs	r3, #13
 80080d6:	e178      	b.n	80083ca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	3330      	adds	r3, #48	; 0x30
 80080dc:	330b      	adds	r3, #11
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fd14 	bl	8006b0c <ld_word>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ea:	d001      	beq.n	80080f0 <find_volume+0x1a8>
 80080ec:	230d      	movs	r3, #13
 80080ee:	e16c      	b.n	80083ca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	3330      	adds	r3, #48	; 0x30
 80080f4:	3316      	adds	r3, #22
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fd08 	bl	8006b0c <ld_word>
 80080fc:	4603      	mov	r3, r0
 80080fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <find_volume+0x1cc>
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	3330      	adds	r3, #48	; 0x30
 800810a:	3324      	adds	r3, #36	; 0x24
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fd15 	bl	8006b3c <ld_dword>
 8008112:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008118:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d005      	beq.n	8008138 <find_volume+0x1f0>
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	789b      	ldrb	r3, [r3, #2]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d001      	beq.n	8008138 <find_volume+0x1f0>
 8008134:	230d      	movs	r3, #13
 8008136:	e148      	b.n	80083ca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b29a      	uxth	r2, r3
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	895b      	ldrh	r3, [r3, #10]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d008      	beq.n	800816c <find_volume+0x224>
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	895b      	ldrh	r3, [r3, #10]
 800815e:	461a      	mov	r2, r3
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	895b      	ldrh	r3, [r3, #10]
 8008164:	3b01      	subs	r3, #1
 8008166:	4013      	ands	r3, r2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <find_volume+0x228>
 800816c:	230d      	movs	r3, #13
 800816e:	e12c      	b.n	80083ca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	3330      	adds	r3, #48	; 0x30
 8008174:	3311      	adds	r3, #17
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fcc8 	bl	8006b0c <ld_word>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	891b      	ldrh	r3, [r3, #8]
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <find_volume+0x24e>
 8008192:	230d      	movs	r3, #13
 8008194:	e119      	b.n	80083ca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	3330      	adds	r3, #48	; 0x30
 800819a:	3313      	adds	r3, #19
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fcb5 	bl	8006b0c <ld_word>
 80081a2:	4603      	mov	r3, r0
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <find_volume+0x272>
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	3330      	adds	r3, #48	; 0x30
 80081b0:	3320      	adds	r3, #32
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fcc2 	bl	8006b3c <ld_dword>
 80081b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	3330      	adds	r3, #48	; 0x30
 80081be:	330e      	adds	r3, #14
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fca3 	bl	8006b0c <ld_word>
 80081c6:	4603      	mov	r3, r0
 80081c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <find_volume+0x28c>
 80081d0:	230d      	movs	r3, #13
 80081d2:	e0fa      	b.n	80083ca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	4413      	add	r3, r2
 80081da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081dc:	8912      	ldrh	r2, [r2, #8]
 80081de:	0912      	lsrs	r2, r2, #4
 80081e0:	b292      	uxth	r2, r2
 80081e2:	4413      	add	r3, r2
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d204      	bcs.n	80081f8 <find_volume+0x2b0>
 80081ee:	230d      	movs	r3, #13
 80081f0:	e0eb      	b.n	80083ca <find_volume+0x482>
 80081f2:	bf00      	nop
 80081f4:	20003c88 	.word	0x20003c88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008200:	8952      	ldrh	r2, [r2, #10]
 8008202:	fbb3 f3f2 	udiv	r3, r3, r2
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <find_volume+0x2ca>
 800820e:	230d      	movs	r3, #13
 8008210:	e0db      	b.n	80083ca <find_volume+0x482>
		fmt = FS_FAT32;
 8008212:	2303      	movs	r3, #3
 8008214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800821e:	4293      	cmp	r3, r2
 8008220:	d802      	bhi.n	8008228 <find_volume+0x2e0>
 8008222:	2302      	movs	r3, #2
 8008224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800822e:	4293      	cmp	r3, r2
 8008230:	d802      	bhi.n	8008238 <find_volume+0x2f0>
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	1c9a      	adds	r2, r3, #2
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008244:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008246:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824a:	441a      	add	r2, r3
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	441a      	add	r2, r3
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800825a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800825e:	2b03      	cmp	r3, #3
 8008260:	d11e      	bne.n	80082a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	3330      	adds	r3, #48	; 0x30
 8008266:	332a      	adds	r3, #42	; 0x2a
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fc4f 	bl	8006b0c <ld_word>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <find_volume+0x330>
 8008274:	230d      	movs	r3, #13
 8008276:	e0a8      	b.n	80083ca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	891b      	ldrh	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <find_volume+0x33c>
 8008280:	230d      	movs	r3, #13
 8008282:	e0a2      	b.n	80083ca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	3330      	adds	r3, #48	; 0x30
 8008288:	332c      	adds	r3, #44	; 0x2c
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fc56 	bl	8006b3c <ld_dword>
 8008290:	4602      	mov	r2, r0
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	647b      	str	r3, [r7, #68]	; 0x44
 800829e:	e01f      	b.n	80082e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	891b      	ldrh	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <find_volume+0x364>
 80082a8:	230d      	movs	r3, #13
 80082aa:	e08e      	b.n	80083ca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ae:	6a1a      	ldr	r2, [r3, #32]
 80082b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b2:	441a      	add	r2, r3
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d103      	bne.n	80082c8 <find_volume+0x380>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	e00a      	b.n	80082de <find_volume+0x396>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	4613      	mov	r3, r2
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	4413      	add	r3, r2
 80082d2:	085a      	lsrs	r2, r3, #1
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80082ea:	0a5b      	lsrs	r3, r3, #9
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d201      	bcs.n	80082f4 <find_volume+0x3ac>
 80082f0:	230d      	movs	r3, #13
 80082f2:	e06a      	b.n	80083ca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	f04f 32ff 	mov.w	r2, #4294967295
 80082fa:	611a      	str	r2, [r3, #16]
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	2280      	movs	r2, #128	; 0x80
 8008308:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800830a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800830e:	2b03      	cmp	r3, #3
 8008310:	d149      	bne.n	80083a6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	3330      	adds	r3, #48	; 0x30
 8008316:	3330      	adds	r3, #48	; 0x30
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fbf7 	bl	8006b0c <ld_word>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	d140      	bne.n	80083a6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008326:	3301      	adds	r3, #1
 8008328:	4619      	mov	r1, r3
 800832a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800832c:	f7fe fe9e 	bl	800706c <move_window>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d137      	bne.n	80083a6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	2200      	movs	r2, #0
 800833a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	3330      	adds	r3, #48	; 0x30
 8008340:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe fbe1 	bl	8006b0c <ld_word>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008352:	429a      	cmp	r2, r3
 8008354:	d127      	bne.n	80083a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	3330      	adds	r3, #48	; 0x30
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fbee 	bl	8006b3c <ld_dword>
 8008360:	4603      	mov	r3, r0
 8008362:	4a1c      	ldr	r2, [pc, #112]	; (80083d4 <find_volume+0x48c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d11e      	bne.n	80083a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	3330      	adds	r3, #48	; 0x30
 800836c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fbe3 	bl	8006b3c <ld_dword>
 8008376:	4603      	mov	r3, r0
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <find_volume+0x490>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d113      	bne.n	80083a6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	3330      	adds	r3, #48	; 0x30
 8008382:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fbd8 	bl	8006b3c <ld_dword>
 800838c:	4602      	mov	r2, r0
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	3330      	adds	r3, #48	; 0x30
 8008396:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fbce 	bl	8006b3c <ld_dword>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80083ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <find_volume+0x494>)
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <find_volume+0x494>)
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <find_volume+0x494>)
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083c4:	f7fe fdea 	bl	8006f9c <clear_lock>
#endif
	return FR_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3758      	adds	r7, #88	; 0x58
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	41615252 	.word	0x41615252
 80083d8:	61417272 	.word	0x61417272
 80083dc:	20003c8c 	.word	0x20003c8c

080083e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083ea:	2309      	movs	r3, #9
 80083ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01c      	beq.n	800842e <validate+0x4e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d018      	beq.n	800842e <validate+0x4e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <validate+0x4e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	889a      	ldrh	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	88db      	ldrh	r3, [r3, #6]
 8008410:	429a      	cmp	r2, r3
 8008412:	d10c      	bne.n	800842e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fad8 	bl	80069d0 <disk_status>
 8008420:	4603      	mov	r3, r0
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <validate+0x4e>
			res = FR_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <validate+0x5a>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	e000      	b.n	800843c <validate+0x5c>
 800843a:	2300      	movs	r3, #0
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	6013      	str	r3, [r2, #0]
	return res;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	4613      	mov	r3, r2
 8008458:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800845e:	f107 0310 	add.w	r3, r7, #16
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fcd5 	bl	8007e12 <get_ldnumber>
 8008468:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	da01      	bge.n	8008474 <f_mount+0x28>
 8008470:	230b      	movs	r3, #11
 8008472:	e02b      	b.n	80084cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008474:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <f_mount+0x88>)
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800847c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008484:	69b8      	ldr	r0, [r7, #24]
 8008486:	f7fe fd89 	bl	8006f9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	490d      	ldr	r1, [pc, #52]	; (80084d4 <f_mount+0x88>)
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <f_mount+0x66>
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d001      	beq.n	80084b6 <f_mount+0x6a>
 80084b2:	2300      	movs	r3, #0
 80084b4:	e00a      	b.n	80084cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084b6:	f107 010c 	add.w	r1, r7, #12
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	2200      	movs	r2, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fd41 	bl	8007f48 <find_volume>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20003c88 	.word	0x20003c88

080084d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b098      	sub	sp, #96	; 0x60
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <f_open+0x18>
 80084ec:	2309      	movs	r3, #9
 80084ee:	e1ad      	b.n	800884c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	f107 0110 	add.w	r1, r7, #16
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff fd20 	bl	8007f48 <find_volume>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800850e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 8191 	bne.w	800883a <f_open+0x362>
		dj.obj.fs = fs;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fc03 	bl	8007d30 <follow_path>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d11a      	bne.n	800856e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008538:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800853c:	b25b      	sxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	da03      	bge.n	800854a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008542:	2306      	movs	r3, #6
 8008544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008548:	e011      	b.n	800856e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fbd2 	bl	8006d0c <chk_lock>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	f003 031c 	and.w	r3, r3, #28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d07f      	beq.n	8008678 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800857c:	2b00      	cmp	r3, #0
 800857e:	d017      	beq.n	80085b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008584:	2b04      	cmp	r3, #4
 8008586:	d10e      	bne.n	80085a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008588:	f7fe fc1c 	bl	8006dc4 <enq_lock>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <f_open+0xc8>
 8008592:	f107 0314 	add.w	r3, r7, #20
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fb03 	bl	8007ba2 <dir_register>
 800859c:	4603      	mov	r3, r0
 800859e:	e000      	b.n	80085a2 <f_open+0xca>
 80085a0:	2312      	movs	r3, #18
 80085a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	f043 0308 	orr.w	r3, r3, #8
 80085ac:	71fb      	strb	r3, [r7, #7]
 80085ae:	e010      	b.n	80085d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085b0:	7ebb      	ldrb	r3, [r7, #26]
 80085b2:	f003 0311 	and.w	r3, r3, #17
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <f_open+0xea>
					res = FR_DENIED;
 80085ba:	2307      	movs	r3, #7
 80085bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085c0:	e007      	b.n	80085d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <f_open+0xfa>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d168      	bne.n	80086ac <f_open+0x1d4>
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d063      	beq.n	80086ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80085e4:	f7fe f87a 	bl	80066dc <get_fattime>
 80085e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	330e      	adds	r3, #14
 80085ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fae1 	bl	8006bb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f8:	3316      	adds	r3, #22
 80085fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fadb 	bl	8006bb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008604:	330b      	adds	r3, #11
 8008606:	2220      	movs	r2, #32
 8008608:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fa32 	bl	8007a7a <ld_clust>
 8008616:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800861c:	2200      	movs	r2, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fa4a 	bl	8007ab8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008626:	331c      	adds	r3, #28
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fac4 	bl	8006bb8 <st_dword>
					fs->wflag = 1;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2201      	movs	r2, #1
 8008634:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d037      	beq.n	80086ac <f_open+0x1d4>
						dw = fs->winsect;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008642:	f107 0314 	add.w	r3, r7, #20
 8008646:	2200      	movs	r2, #0
 8008648:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe ff5d 	bl	800750a <remove_chain>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800865a:	2b00      	cmp	r3, #0
 800865c:	d126      	bne.n	80086ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd02 	bl	800706c <move_window>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008672:	3a01      	subs	r2, #1
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e019      	b.n	80086ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867c:	2b00      	cmp	r3, #0
 800867e:	d115      	bne.n	80086ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008680:	7ebb      	ldrb	r3, [r7, #26]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <f_open+0x1ba>
					res = FR_NO_FILE;
 800868a:	2304      	movs	r3, #4
 800868c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008690:	e00c      	b.n	80086ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <f_open+0x1d4>
 800869c:	7ebb      	ldrb	r3, [r7, #26]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <f_open+0x1d4>
						res = FR_DENIED;
 80086a6:	2307      	movs	r3, #7
 80086a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80086ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d128      	bne.n	8008706 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80086ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	f107 0314 	add.w	r3, r7, #20
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fb8b 	bl	8006e08 <inc_lock>
 80086f2:	4602      	mov	r2, r0
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <f_open+0x22e>
 8008700:	2302      	movs	r3, #2
 8008702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 8095 	bne.w	800883a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff f9af 	bl	8007a7a <ld_clust>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	331c      	adds	r3, #28
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fa08 	bl	8006b3c <ld_dword>
 800872c:	4602      	mov	r2, r0
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	88da      	ldrh	r2, [r3, #6]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	79fa      	ldrb	r2, [r7, #7]
 800874a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3330      	adds	r3, #48	; 0x30
 8008762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fa72 	bl	8006c52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d060      	beq.n	800883a <f_open+0x362>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d05c      	beq.n	800883a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	895b      	ldrh	r3, [r3, #10]
 800878c:	025b      	lsls	r3, r3, #9
 800878e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	657b      	str	r3, [r7, #84]	; 0x54
 800879c:	e016      	b.n	80087cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fd1d 	bl	80071e2 <get_fat>
 80087a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80087aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d802      	bhi.n	80087b6 <f_open+0x2de>
 80087b0:	2302      	movs	r3, #2
 80087b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d102      	bne.n	80087c4 <f_open+0x2ec>
 80087be:	2301      	movs	r3, #1
 80087c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	657b      	str	r3, [r7, #84]	; 0x54
 80087cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d103      	bne.n	80087dc <f_open+0x304>
 80087d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d8:	429a      	cmp	r2, r3
 80087da:	d8e0      	bhi.n	800879e <f_open+0x2c6>
				}
				fp->clust = clst;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d127      	bne.n	800883a <f_open+0x362>
 80087ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d022      	beq.n	800883a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fcd3 	bl	80071a4 <clust2sect>
 80087fe:	6478      	str	r0, [r7, #68]	; 0x44
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <f_open+0x336>
						res = FR_INT_ERR;
 8008806:	2302      	movs	r3, #2
 8008808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800880c:	e015      	b.n	800883a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800880e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008810:	0a5a      	lsrs	r2, r3, #9
 8008812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	7858      	ldrb	r0, [r3, #1]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1a      	ldr	r2, [r3, #32]
 8008828:	2301      	movs	r3, #1
 800882a:	f7fe f911 	bl	8006a50 <disk_read>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <f_open+0x362>
 8008834:	2301      	movs	r3, #1
 8008836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800883a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <f_open+0x370>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800884c:	4618      	mov	r0, r3
 800884e:	3760      	adds	r7, #96	; 0x60
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	; 0x30
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f107 0210 	add.w	r2, r7, #16
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fdb3 	bl	80083e0 <validate>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008884:	2b00      	cmp	r3, #0
 8008886:	d107      	bne.n	8008898 <f_write+0x44>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	7d5b      	ldrb	r3, [r3, #21]
 800888c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <f_write+0x4a>
 8008898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889c:	e14b      	b.n	8008b36 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <f_write+0x5a>
 80088aa:	2307      	movs	r3, #7
 80088ac:	e143      	b.n	8008b36 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	f080 812d 	bcs.w	8008b1a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	43db      	mvns	r3, r3
 80088c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088c8:	e127      	b.n	8008b1a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 80e3 	bne.w	8008a9e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	0a5b      	lsrs	r3, r3, #9
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	8952      	ldrh	r2, [r2, #10]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	4013      	ands	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d143      	bne.n	8008976 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10c      	bne.n	8008910 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11a      	bne.n	8008938 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2100      	movs	r1, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fe64 	bl	80075d4 <create_chain>
 800890c:	62b8      	str	r0, [r7, #40]	; 0x28
 800890e:	e013      	b.n	8008938 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	4619      	mov	r1, r3
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7fe fef0 	bl	8007704 <clmt_clust>
 8008924:	62b8      	str	r0, [r7, #40]	; 0x28
 8008926:	e007      	b.n	8008938 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fe fe4f 	bl	80075d4 <create_chain>
 8008936:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80f2 	beq.w	8008b24 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	2b01      	cmp	r3, #1
 8008944:	d104      	bne.n	8008950 <f_write+0xfc>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2202      	movs	r2, #2
 800894a:	755a      	strb	r2, [r3, #21]
 800894c:	2302      	movs	r3, #2
 800894e:	e0f2      	b.n	8008b36 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008956:	d104      	bne.n	8008962 <f_write+0x10e>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	755a      	strb	r2, [r3, #21]
 800895e:	2301      	movs	r3, #1
 8008960:	e0e9      	b.n	8008b36 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008966:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <f_write+0x122>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	7d1b      	ldrb	r3, [r3, #20]
 800897a:	b25b      	sxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	da18      	bge.n	80089b2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	7858      	ldrb	r0, [r3, #1]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1a      	ldr	r2, [r3, #32]
 800898e:	2301      	movs	r3, #1
 8008990:	f7fe f87e 	bl	8006a90 <disk_write>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <f_write+0x150>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	755a      	strb	r2, [r3, #21]
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0c8      	b.n	8008b36 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	7d1b      	ldrb	r3, [r3, #20]
 80089a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f7fe fbf2 	bl	80071a4 <clust2sect>
 80089c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <f_write+0x17e>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2202      	movs	r2, #2
 80089cc:	755a      	strb	r2, [r3, #21]
 80089ce:	2302      	movs	r3, #2
 80089d0:	e0b1      	b.n	8008b36 <f_write+0x2e2>
			sect += csect;
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	4413      	add	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d03c      	beq.n	8008a60 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	4413      	add	r3, r2
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	8952      	ldrh	r2, [r2, #10]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d905      	bls.n	8008a00 <f_write+0x1ac>
					cc = fs->csize - csect;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	895b      	ldrh	r3, [r3, #10]
 80089f8:	461a      	mov	r2, r3
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	7858      	ldrb	r0, [r3, #1]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	69f9      	ldr	r1, [r7, #28]
 8008a0a:	f7fe f841 	bl	8006a90 <disk_write>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <f_write+0x1ca>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	755a      	strb	r2, [r3, #21]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e08b      	b.n	8008b36 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1a      	ldr	r2, [r3, #32]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	6a3a      	ldr	r2, [r7, #32]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d915      	bls.n	8008a58 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	025b      	lsls	r3, r3, #9
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a44:	4619      	mov	r1, r3
 8008a46:	f7fe f8e3 	bl	8006c10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	7d1b      	ldrb	r3, [r3, #20]
 8008a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	025b      	lsls	r3, r3, #9
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a5e:	e03f      	b.n	8008ae0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d016      	beq.n	8008a98 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	699a      	ldr	r2, [r3, #24]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d210      	bcs.n	8008a98 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	7858      	ldrb	r0, [r3, #1]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a80:	2301      	movs	r3, #1
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	f7fd ffe4 	bl	8006a50 <disk_read>
 8008a88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	755a      	strb	r2, [r3, #21]
 8008a94:	2301      	movs	r3, #1
 8008a96:	e04e      	b.n	8008b36 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d901      	bls.n	8008ab8 <f_write+0x264>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac6:	4413      	add	r3, r2
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	69f9      	ldr	r1, [r7, #28]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe f89f 	bl	8006c10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	4413      	add	r3, r2
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	699a      	ldr	r2, [r3, #24]
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	441a      	add	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	619a      	str	r2, [r3, #24]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	bf38      	it	cc
 8008b00:	461a      	movcc	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	441a      	add	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f aed4 	bne.w	80088ca <f_write+0x76>
 8008b22:	e000      	b.n	8008b26 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	7d1b      	ldrb	r3, [r3, #20]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3730      	adds	r7, #48	; 0x30
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f107 0208 	add.w	r2, r7, #8
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fc46 	bl	80083e0 <validate>
 8008b54:	4603      	mov	r3, r0
 8008b56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d168      	bne.n	8008c30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7d1b      	ldrb	r3, [r3, #20]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d062      	beq.n	8008c30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7d1b      	ldrb	r3, [r3, #20]
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	da15      	bge.n	8008ba0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7858      	ldrb	r0, [r3, #1]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1a      	ldr	r2, [r3, #32]
 8008b82:	2301      	movs	r3, #1
 8008b84:	f7fd ff84 	bl	8006a90 <disk_write>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <f_sync+0x54>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e04f      	b.n	8008c32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7d1b      	ldrb	r3, [r3, #20]
 8008b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ba0:	f7fd fd9c 	bl	80066dc <get_fattime>
 8008ba4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7fe fa5c 	bl	800706c <move_window>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d138      	bne.n	8008c30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	330b      	adds	r3, #11
 8008bc8:	781a      	ldrb	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	330b      	adds	r3, #11
 8008bce:	f042 0220 	orr.w	r2, r2, #32
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68f9      	ldr	r1, [r7, #12]
 8008be2:	f7fe ff69 	bl	8007ab8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 021c 	add.w	r2, r3, #28
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fd ffe0 	bl	8006bb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3316      	adds	r3, #22
 8008bfc:	6939      	ldr	r1, [r7, #16]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd ffda 	bl	8006bb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3312      	adds	r3, #18
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fd ffb9 	bl	8006b82 <st_word>
					fs->wflag = 1;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2201      	movs	r2, #1
 8008c14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fa55 	bl	80070c8 <sync_fs>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff ff7b 	bl	8008b3e <f_sync>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d118      	bne.n	8008c84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f107 0208 	add.w	r2, r7, #8
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fbc0 	bl	80083e0 <validate>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10c      	bne.n	8008c84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe f958 	bl	8006f24 <dec_lock>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b090      	sub	sp, #64	; 0x40
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f107 0208 	add.w	r2, r7, #8
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff fb9d 	bl	80083e0 <validate>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008cac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <f_lseek+0x2e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7d5b      	ldrb	r3, [r3, #21]
 8008cb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008cbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <f_lseek+0x3c>
 8008cc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc8:	e1e6      	b.n	8009098 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80d1 	beq.w	8008e76 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d15a      	bne.n	8008d92 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1d1a      	adds	r2, r3, #4
 8008ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	2302      	movs	r3, #2
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d03a      	beq.n	8008d72 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	2300      	movs	r3, #0
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	3302      	adds	r3, #2
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	3301      	adds	r3, #1
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fa62 	bl	80071e2 <get_fat>
 8008d1e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d804      	bhi.n	8008d30 <f_lseek+0xa2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	755a      	strb	r2, [r3, #21]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e1b3      	b.n	8009098 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d104      	bne.n	8008d42 <f_lseek+0xb4>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	755a      	strb	r2, [r3, #21]
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e1aa      	b.n	8009098 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d0de      	beq.n	8008d0a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d809      	bhi.n	8008d68 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	627a      	str	r2, [r7, #36]	; 0x24
 8008d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	627a      	str	r2, [r7, #36]	; 0x24
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3c4      	bcc.n	8008cfc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d78:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d803      	bhi.n	8008d8a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	e184      	b.n	8009094 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008d8a:	2311      	movs	r3, #17
 8008d8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008d90:	e180      	b.n	8009094 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d902      	bls.n	8008da2 <f_lseek+0x114>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 8172 	beq.w	8009094 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fe fca4 	bl	8007704 <clmt_clust>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f7fe f9ea 	bl	80071a4 <clust2sect>
 8008dd0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d104      	bne.n	8008de2 <f_lseek+0x154>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	755a      	strb	r2, [r3, #21]
 8008dde:	2302      	movs	r3, #2
 8008de0:	e15a      	b.n	8009098 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	0a5b      	lsrs	r3, r3, #9
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	8952      	ldrh	r2, [r2, #10]
 8008dec:	3a01      	subs	r2, #1
 8008dee:	4013      	ands	r3, r2
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	4413      	add	r3, r2
 8008df4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8148 	beq.w	8009094 <f_lseek+0x406>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	f000 8142 	beq.w	8009094 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	7d1b      	ldrb	r3, [r3, #20]
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da18      	bge.n	8008e4c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	7858      	ldrb	r0, [r3, #1]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1a      	ldr	r2, [r3, #32]
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f7fd fe31 	bl	8006a90 <disk_write>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d004      	beq.n	8008e3e <f_lseek+0x1b0>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	755a      	strb	r2, [r3, #21]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e12c      	b.n	8009098 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7d1b      	ldrb	r3, [r3, #20]
 8008e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	7858      	ldrb	r0, [r3, #1]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e56:	2301      	movs	r3, #1
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	f7fd fdf9 	bl	8006a50 <disk_read>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <f_lseek+0x1e0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	755a      	strb	r2, [r3, #21]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e114      	b.n	8009098 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	621a      	str	r2, [r3, #32]
 8008e74:	e10e      	b.n	8009094 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d908      	bls.n	8008e92 <f_lseek+0x204>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7d1b      	ldrb	r3, [r3, #20]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80a7 	beq.w	8008ff8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	895b      	ldrh	r3, [r3, #10]
 8008eae:	025b      	lsls	r3, r3, #9
 8008eb0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01b      	beq.n	8008ef0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	1e5a      	subs	r2, r3, #1
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	1e59      	subs	r1, r3, #1
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d30f      	bcc.n	8008ef0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	1e5a      	subs	r2, r3, #1
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	425b      	negs	r3, r3
 8008ed8:	401a      	ands	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008eee:	e022      	b.n	8008f36 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d119      	bne.n	8008f30 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2100      	movs	r1, #0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fb67 	bl	80075d4 <create_chain>
 8008f06:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d104      	bne.n	8008f18 <f_lseek+0x28a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	755a      	strb	r2, [r3, #21]
 8008f14:	2302      	movs	r3, #2
 8008f16:	e0bf      	b.n	8009098 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d104      	bne.n	8008f2a <f_lseek+0x29c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	755a      	strb	r2, [r3, #21]
 8008f26:	2301      	movs	r3, #1
 8008f28:	e0b6      	b.n	8009098 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f34:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05d      	beq.n	8008ff8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008f3c:	e03a      	b.n	8008fb4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	441a      	add	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7d1b      	ldrb	r3, [r3, #20]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fb36 	bl	80075d4 <create_chain>
 8008f68:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d108      	bne.n	8008f82 <f_lseek+0x2f4>
							ofs = 0; break;
 8008f70:	2300      	movs	r3, #0
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	e022      	b.n	8008fbc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe f931 	bl	80071e2 <get_fat>
 8008f80:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d104      	bne.n	8008f94 <f_lseek+0x306>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	755a      	strb	r2, [r3, #21]
 8008f90:	2301      	movs	r3, #1
 8008f92:	e081      	b.n	8009098 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d904      	bls.n	8008fa4 <f_lseek+0x316>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d304      	bcc.n	8008fae <f_lseek+0x320>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	755a      	strb	r2, [r3, #21]
 8008faa:	2302      	movs	r3, #2
 8008fac:	e074      	b.n	8009098 <f_lseek+0x40a>
					fp->clust = clst;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d8c0      	bhi.n	8008f3e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	441a      	add	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d012      	beq.n	8008ff8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f8e4 	bl	80071a4 <clust2sect>
 8008fdc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <f_lseek+0x360>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	755a      	strb	r2, [r3, #21]
 8008fea:	2302      	movs	r3, #2
 8008fec:	e054      	b.n	8009098 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	0a5b      	lsrs	r3, r3, #9
 8008ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff4:	4413      	add	r3, r2
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	429a      	cmp	r2, r3
 8009002:	d90a      	bls.n	800901a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7d1b      	ldrb	r3, [r3, #20]
 8009010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009014:	b2da      	uxtb	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009022:	2b00      	cmp	r3, #0
 8009024:	d036      	beq.n	8009094 <f_lseek+0x406>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800902c:	429a      	cmp	r2, r3
 800902e:	d031      	beq.n	8009094 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7d1b      	ldrb	r3, [r3, #20]
 8009034:	b25b      	sxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	da18      	bge.n	800906c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	7858      	ldrb	r0, [r3, #1]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1a      	ldr	r2, [r3, #32]
 8009048:	2301      	movs	r3, #1
 800904a:	f7fd fd21 	bl	8006a90 <disk_write>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d004      	beq.n	800905e <f_lseek+0x3d0>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	755a      	strb	r2, [r3, #21]
 800905a:	2301      	movs	r3, #1
 800905c:	e01c      	b.n	8009098 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	7d1b      	ldrb	r3, [r3, #20]
 8009062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009066:	b2da      	uxtb	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	7858      	ldrb	r0, [r3, #1]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009076:	2301      	movs	r3, #1
 8009078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800907a:	f7fd fce9 	bl	8006a50 <disk_read>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <f_lseek+0x400>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	755a      	strb	r2, [r3, #21]
 800908a:	2301      	movs	r3, #1
 800908c:	e004      	b.n	8009098 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009092:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009098:	4618      	mov	r0, r3
 800909a:	3740      	adds	r7, #64	; 0x40
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090ae:	2301      	movs	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090b8:	7a5b      	ldrb	r3, [r3, #9]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d131      	bne.n	8009124 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090c0:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090c2:	7a5b      	ldrb	r3, [r3, #9]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090ca:	2100      	movs	r1, #0
 80090cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090ce:	4b19      	ldr	r3, [pc, #100]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090d0:	7a5b      	ldrb	r3, [r3, #9]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4a17      	ldr	r2, [pc, #92]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090e0:	7a5b      	ldrb	r3, [r3, #9]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	4b13      	ldr	r3, [pc, #76]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090e8:	4413      	add	r3, r2
 80090ea:	79fa      	ldrb	r2, [r7, #7]
 80090ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80090ee:	4b11      	ldr	r3, [pc, #68]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090f0:	7a5b      	ldrb	r3, [r3, #9]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	b2d1      	uxtb	r1, r2
 80090f8:	4a0e      	ldr	r2, [pc, #56]	; (8009134 <FATFS_LinkDriverEx+0x94>)
 80090fa:	7251      	strb	r1, [r2, #9]
 80090fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090fe:	7dbb      	ldrb	r3, [r7, #22]
 8009100:	3330      	adds	r3, #48	; 0x30
 8009102:	b2da      	uxtb	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	3301      	adds	r3, #1
 800910c:	223a      	movs	r2, #58	; 0x3a
 800910e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	3302      	adds	r3, #2
 8009114:	222f      	movs	r2, #47	; 0x2f
 8009116:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	3303      	adds	r3, #3
 800911c:	2200      	movs	r2, #0
 800911e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
}
 8009126:	4618      	mov	r0, r3
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20003cc0 	.word	0x20003cc0

08009138 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009142:	2200      	movs	r2, #0
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff ffaa 	bl	80090a0 <FATFS_LinkDriverEx>
 800914c:	4603      	mov	r3, r0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	; (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	2000005c 	.word	0x2000005c

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	; (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	; (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	; (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	; (80091a8 <__libc_init_array+0x44>)
 8009178:	f001 f824 	bl	800a1c4 <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	0800a470 	.word	0x0800a470
 80091a0:	0800a470 	.word	0x0800a470
 80091a4:	0800a470 	.word	0x0800a470
 80091a8:	0800a474 	.word	0x0800a474

080091ac <memset>:
 80091ac:	4402      	add	r2, r0
 80091ae:	4603      	mov	r3, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <_free_r>:
 80091bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091be:	2900      	cmp	r1, #0
 80091c0:	d044      	beq.n	800924c <_free_r+0x90>
 80091c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c6:	9001      	str	r0, [sp, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f1a1 0404 	sub.w	r4, r1, #4
 80091ce:	bfb8      	it	lt
 80091d0:	18e4      	addlt	r4, r4, r3
 80091d2:	f000 fc51 	bl	8009a78 <__malloc_lock>
 80091d6:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <_free_r+0x94>)
 80091d8:	9801      	ldr	r0, [sp, #4]
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x30>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	b003      	add	sp, #12
 80091e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e8:	f000 bc4c 	b.w	8009a84 <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x46>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	1961      	adds	r1, r4, r5
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1949      	addeq	r1, r1, r5
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x22>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x50>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x46>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1855      	adds	r5, r2, r1
 8009210:	42a5      	cmp	r5, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x70>
 8009214:	6824      	ldr	r4, [r4, #0]
 8009216:	4421      	add	r1, r4
 8009218:	1854      	adds	r4, r2, r1
 800921a:	42a3      	cmp	r3, r4
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x26>
 8009220:	681c      	ldr	r4, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4421      	add	r1, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x26>
 800922c:	d902      	bls.n	8009234 <_free_r+0x78>
 800922e:	230c      	movs	r3, #12
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x26>
 8009234:	6825      	ldr	r5, [r4, #0]
 8009236:	1961      	adds	r1, r4, r5
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1949      	addeq	r1, r1, r5
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7ca      	b.n	80091e2 <_free_r+0x26>
 800924c:	b003      	add	sp, #12
 800924e:	bd30      	pop	{r4, r5, pc}
 8009250:	20003ccc 	.word	0x20003ccc

08009254 <sbrk_aligned>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0e      	ldr	r6, [pc, #56]	; (8009290 <sbrk_aligned+0x3c>)
 8009258:	460c      	mov	r4, r1
 800925a:	6831      	ldr	r1, [r6, #0]
 800925c:	4605      	mov	r5, r0
 800925e:	b911      	cbnz	r1, 8009266 <sbrk_aligned+0x12>
 8009260:	f000 f91a 	bl	8009498 <_sbrk_r>
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 f915 	bl	8009498 <_sbrk_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d00a      	beq.n	8009288 <sbrk_aligned+0x34>
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d007      	beq.n	800928c <sbrk_aligned+0x38>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f90a 	bl	8009498 <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d101      	bne.n	800928c <sbrk_aligned+0x38>
 8009288:	f04f 34ff 	mov.w	r4, #4294967295
 800928c:	4620      	mov	r0, r4
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	20003cd0 	.word	0x20003cd0

08009294 <_malloc_r>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	1ccd      	adds	r5, r1, #3
 800929a:	f025 0503 	bic.w	r5, r5, #3
 800929e:	3508      	adds	r5, #8
 80092a0:	2d0c      	cmp	r5, #12
 80092a2:	bf38      	it	cc
 80092a4:	250c      	movcc	r5, #12
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	4607      	mov	r7, r0
 80092aa:	db01      	blt.n	80092b0 <_malloc_r+0x1c>
 80092ac:	42a9      	cmp	r1, r5
 80092ae:	d905      	bls.n	80092bc <_malloc_r+0x28>
 80092b0:	230c      	movs	r3, #12
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	2600      	movs	r6, #0
 80092b6:	4630      	mov	r0, r6
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	4e2e      	ldr	r6, [pc, #184]	; (8009378 <_malloc_r+0xe4>)
 80092be:	f000 fbdb 	bl	8009a78 <__malloc_lock>
 80092c2:	6833      	ldr	r3, [r6, #0]
 80092c4:	461c      	mov	r4, r3
 80092c6:	bb34      	cbnz	r4, 8009316 <_malloc_r+0x82>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ffc2 	bl	8009254 <sbrk_aligned>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	4604      	mov	r4, r0
 80092d4:	d14d      	bne.n	8009372 <_malloc_r+0xde>
 80092d6:	6834      	ldr	r4, [r6, #0]
 80092d8:	4626      	mov	r6, r4
 80092da:	2e00      	cmp	r6, #0
 80092dc:	d140      	bne.n	8009360 <_malloc_r+0xcc>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4631      	mov	r1, r6
 80092e2:	4638      	mov	r0, r7
 80092e4:	eb04 0803 	add.w	r8, r4, r3
 80092e8:	f000 f8d6 	bl	8009498 <_sbrk_r>
 80092ec:	4580      	cmp	r8, r0
 80092ee:	d13a      	bne.n	8009366 <_malloc_r+0xd2>
 80092f0:	6821      	ldr	r1, [r4, #0]
 80092f2:	3503      	adds	r5, #3
 80092f4:	1a6d      	subs	r5, r5, r1
 80092f6:	f025 0503 	bic.w	r5, r5, #3
 80092fa:	3508      	adds	r5, #8
 80092fc:	2d0c      	cmp	r5, #12
 80092fe:	bf38      	it	cc
 8009300:	250c      	movcc	r5, #12
 8009302:	4629      	mov	r1, r5
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ffa5 	bl	8009254 <sbrk_aligned>
 800930a:	3001      	adds	r0, #1
 800930c:	d02b      	beq.n	8009366 <_malloc_r+0xd2>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	442b      	add	r3, r5
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	e00e      	b.n	8009334 <_malloc_r+0xa0>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	1b52      	subs	r2, r2, r5
 800931a:	d41e      	bmi.n	800935a <_malloc_r+0xc6>
 800931c:	2a0b      	cmp	r2, #11
 800931e:	d916      	bls.n	800934e <_malloc_r+0xba>
 8009320:	1961      	adds	r1, r4, r5
 8009322:	42a3      	cmp	r3, r4
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	bf18      	it	ne
 8009328:	6059      	strne	r1, [r3, #4]
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	bf08      	it	eq
 800932e:	6031      	streq	r1, [r6, #0]
 8009330:	5162      	str	r2, [r4, r5]
 8009332:	604b      	str	r3, [r1, #4]
 8009334:	4638      	mov	r0, r7
 8009336:	f104 060b 	add.w	r6, r4, #11
 800933a:	f000 fba3 	bl	8009a84 <__malloc_unlock>
 800933e:	f026 0607 	bic.w	r6, r6, #7
 8009342:	1d23      	adds	r3, r4, #4
 8009344:	1af2      	subs	r2, r6, r3
 8009346:	d0b6      	beq.n	80092b6 <_malloc_r+0x22>
 8009348:	1b9b      	subs	r3, r3, r6
 800934a:	50a3      	str	r3, [r4, r2]
 800934c:	e7b3      	b.n	80092b6 <_malloc_r+0x22>
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	42a3      	cmp	r3, r4
 8009352:	bf0c      	ite	eq
 8009354:	6032      	streq	r2, [r6, #0]
 8009356:	605a      	strne	r2, [r3, #4]
 8009358:	e7ec      	b.n	8009334 <_malloc_r+0xa0>
 800935a:	4623      	mov	r3, r4
 800935c:	6864      	ldr	r4, [r4, #4]
 800935e:	e7b2      	b.n	80092c6 <_malloc_r+0x32>
 8009360:	4634      	mov	r4, r6
 8009362:	6876      	ldr	r6, [r6, #4]
 8009364:	e7b9      	b.n	80092da <_malloc_r+0x46>
 8009366:	230c      	movs	r3, #12
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4638      	mov	r0, r7
 800936c:	f000 fb8a 	bl	8009a84 <__malloc_unlock>
 8009370:	e7a1      	b.n	80092b6 <_malloc_r+0x22>
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	e7de      	b.n	8009334 <_malloc_r+0xa0>
 8009376:	bf00      	nop
 8009378:	20003ccc 	.word	0x20003ccc

0800937c <iprintf>:
 800937c:	b40f      	push	{r0, r1, r2, r3}
 800937e:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <iprintf+0x2c>)
 8009380:	b513      	push	{r0, r1, r4, lr}
 8009382:	681c      	ldr	r4, [r3, #0]
 8009384:	b124      	cbz	r4, 8009390 <iprintf+0x14>
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	b913      	cbnz	r3, 8009390 <iprintf+0x14>
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fa6e 	bl	800986c <__sinit>
 8009390:	ab05      	add	r3, sp, #20
 8009392:	9a04      	ldr	r2, [sp, #16]
 8009394:	68a1      	ldr	r1, [r4, #8]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fba3 	bl	8009ae4 <_vfiprintf_r>
 800939e:	b002      	add	sp, #8
 80093a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a4:	b004      	add	sp, #16
 80093a6:	4770      	bx	lr
 80093a8:	2000005c 	.word	0x2000005c

080093ac <_puts_r>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	460e      	mov	r6, r1
 80093b0:	4605      	mov	r5, r0
 80093b2:	b118      	cbz	r0, 80093bc <_puts_r+0x10>
 80093b4:	6983      	ldr	r3, [r0, #24]
 80093b6:	b90b      	cbnz	r3, 80093bc <_puts_r+0x10>
 80093b8:	f000 fa58 	bl	800986c <__sinit>
 80093bc:	69ab      	ldr	r3, [r5, #24]
 80093be:	68ac      	ldr	r4, [r5, #8]
 80093c0:	b913      	cbnz	r3, 80093c8 <_puts_r+0x1c>
 80093c2:	4628      	mov	r0, r5
 80093c4:	f000 fa52 	bl	800986c <__sinit>
 80093c8:	4b2c      	ldr	r3, [pc, #176]	; (800947c <_puts_r+0xd0>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d120      	bne.n	8009410 <_puts_r+0x64>
 80093ce:	686c      	ldr	r4, [r5, #4]
 80093d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093d2:	07db      	lsls	r3, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_puts_r+0x36>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	0598      	lsls	r0, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_puts_r+0x36>
 80093dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093de:	f000 fae3 	bl	80099a8 <__retarget_lock_acquire_recursive>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	0719      	lsls	r1, r3, #28
 80093e6:	d51d      	bpl.n	8009424 <_puts_r+0x78>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	b1db      	cbz	r3, 8009424 <_puts_r+0x78>
 80093ec:	3e01      	subs	r6, #1
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093f4:	3b01      	subs	r3, #1
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	bb39      	cbnz	r1, 800944a <_puts_r+0x9e>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da38      	bge.n	8009470 <_puts_r+0xc4>
 80093fe:	4622      	mov	r2, r4
 8009400:	210a      	movs	r1, #10
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f858 	bl	80094b8 <__swbuf_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d011      	beq.n	8009430 <_puts_r+0x84>
 800940c:	250a      	movs	r5, #10
 800940e:	e011      	b.n	8009434 <_puts_r+0x88>
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <_puts_r+0xd4>)
 8009412:	429c      	cmp	r4, r3
 8009414:	d101      	bne.n	800941a <_puts_r+0x6e>
 8009416:	68ac      	ldr	r4, [r5, #8]
 8009418:	e7da      	b.n	80093d0 <_puts_r+0x24>
 800941a:	4b1a      	ldr	r3, [pc, #104]	; (8009484 <_puts_r+0xd8>)
 800941c:	429c      	cmp	r4, r3
 800941e:	bf08      	it	eq
 8009420:	68ec      	ldreq	r4, [r5, #12]
 8009422:	e7d5      	b.n	80093d0 <_puts_r+0x24>
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f898 	bl	800955c <__swsetup_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	d0dd      	beq.n	80093ec <_puts_r+0x40>
 8009430:	f04f 35ff 	mov.w	r5, #4294967295
 8009434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009436:	07da      	lsls	r2, r3, #31
 8009438:	d405      	bmi.n	8009446 <_puts_r+0x9a>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	059b      	lsls	r3, r3, #22
 800943e:	d402      	bmi.n	8009446 <_puts_r+0x9a>
 8009440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009442:	f000 fab2 	bl	80099aa <__retarget_lock_release_recursive>
 8009446:	4628      	mov	r0, r5
 8009448:	bd70      	pop	{r4, r5, r6, pc}
 800944a:	2b00      	cmp	r3, #0
 800944c:	da04      	bge.n	8009458 <_puts_r+0xac>
 800944e:	69a2      	ldr	r2, [r4, #24]
 8009450:	429a      	cmp	r2, r3
 8009452:	dc06      	bgt.n	8009462 <_puts_r+0xb6>
 8009454:	290a      	cmp	r1, #10
 8009456:	d004      	beq.n	8009462 <_puts_r+0xb6>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	6022      	str	r2, [r4, #0]
 800945e:	7019      	strb	r1, [r3, #0]
 8009460:	e7c5      	b.n	80093ee <_puts_r+0x42>
 8009462:	4622      	mov	r2, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 f827 	bl	80094b8 <__swbuf_r>
 800946a:	3001      	adds	r0, #1
 800946c:	d1bf      	bne.n	80093ee <_puts_r+0x42>
 800946e:	e7df      	b.n	8009430 <_puts_r+0x84>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	250a      	movs	r5, #10
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	6022      	str	r2, [r4, #0]
 8009478:	701d      	strb	r5, [r3, #0]
 800947a:	e7db      	b.n	8009434 <_puts_r+0x88>
 800947c:	0800a3f4 	.word	0x0800a3f4
 8009480:	0800a414 	.word	0x0800a414
 8009484:	0800a3d4 	.word	0x0800a3d4

08009488 <puts>:
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <puts+0xc>)
 800948a:	4601      	mov	r1, r0
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f7ff bf8d 	b.w	80093ac <_puts_r>
 8009492:	bf00      	nop
 8009494:	2000005c 	.word	0x2000005c

08009498 <_sbrk_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d06      	ldr	r5, [pc, #24]	; (80094b4 <_sbrk_r+0x1c>)
 800949c:	2300      	movs	r3, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7f8 f9dc 	bl	8001860 <_sbrk>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_sbrk_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_sbrk_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20003cd8 	.word	0x20003cd8

080094b8 <__swbuf_r>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	460e      	mov	r6, r1
 80094bc:	4614      	mov	r4, r2
 80094be:	4605      	mov	r5, r0
 80094c0:	b118      	cbz	r0, 80094ca <__swbuf_r+0x12>
 80094c2:	6983      	ldr	r3, [r0, #24]
 80094c4:	b90b      	cbnz	r3, 80094ca <__swbuf_r+0x12>
 80094c6:	f000 f9d1 	bl	800986c <__sinit>
 80094ca:	4b21      	ldr	r3, [pc, #132]	; (8009550 <__swbuf_r+0x98>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d12b      	bne.n	8009528 <__swbuf_r+0x70>
 80094d0:	686c      	ldr	r4, [r5, #4]
 80094d2:	69a3      	ldr	r3, [r4, #24]
 80094d4:	60a3      	str	r3, [r4, #8]
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	071a      	lsls	r2, r3, #28
 80094da:	d52f      	bpl.n	800953c <__swbuf_r+0x84>
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	b36b      	cbz	r3, 800953c <__swbuf_r+0x84>
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	6820      	ldr	r0, [r4, #0]
 80094e4:	1ac0      	subs	r0, r0, r3
 80094e6:	6963      	ldr	r3, [r4, #20]
 80094e8:	b2f6      	uxtb	r6, r6
 80094ea:	4283      	cmp	r3, r0
 80094ec:	4637      	mov	r7, r6
 80094ee:	dc04      	bgt.n	80094fa <__swbuf_r+0x42>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f926 	bl	8009744 <_fflush_r>
 80094f8:	bb30      	cbnz	r0, 8009548 <__swbuf_r+0x90>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	701e      	strb	r6, [r3, #0]
 8009508:	6963      	ldr	r3, [r4, #20]
 800950a:	3001      	adds	r0, #1
 800950c:	4283      	cmp	r3, r0
 800950e:	d004      	beq.n	800951a <__swbuf_r+0x62>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d506      	bpl.n	8009524 <__swbuf_r+0x6c>
 8009516:	2e0a      	cmp	r6, #10
 8009518:	d104      	bne.n	8009524 <__swbuf_r+0x6c>
 800951a:	4621      	mov	r1, r4
 800951c:	4628      	mov	r0, r5
 800951e:	f000 f911 	bl	8009744 <_fflush_r>
 8009522:	b988      	cbnz	r0, 8009548 <__swbuf_r+0x90>
 8009524:	4638      	mov	r0, r7
 8009526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009528:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <__swbuf_r+0x9c>)
 800952a:	429c      	cmp	r4, r3
 800952c:	d101      	bne.n	8009532 <__swbuf_r+0x7a>
 800952e:	68ac      	ldr	r4, [r5, #8]
 8009530:	e7cf      	b.n	80094d2 <__swbuf_r+0x1a>
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <__swbuf_r+0xa0>)
 8009534:	429c      	cmp	r4, r3
 8009536:	bf08      	it	eq
 8009538:	68ec      	ldreq	r4, [r5, #12]
 800953a:	e7ca      	b.n	80094d2 <__swbuf_r+0x1a>
 800953c:	4621      	mov	r1, r4
 800953e:	4628      	mov	r0, r5
 8009540:	f000 f80c 	bl	800955c <__swsetup_r>
 8009544:	2800      	cmp	r0, #0
 8009546:	d0cb      	beq.n	80094e0 <__swbuf_r+0x28>
 8009548:	f04f 37ff 	mov.w	r7, #4294967295
 800954c:	e7ea      	b.n	8009524 <__swbuf_r+0x6c>
 800954e:	bf00      	nop
 8009550:	0800a3f4 	.word	0x0800a3f4
 8009554:	0800a414 	.word	0x0800a414
 8009558:	0800a3d4 	.word	0x0800a3d4

0800955c <__swsetup_r>:
 800955c:	4b32      	ldr	r3, [pc, #200]	; (8009628 <__swsetup_r+0xcc>)
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	681d      	ldr	r5, [r3, #0]
 8009562:	4606      	mov	r6, r0
 8009564:	460c      	mov	r4, r1
 8009566:	b125      	cbz	r5, 8009572 <__swsetup_r+0x16>
 8009568:	69ab      	ldr	r3, [r5, #24]
 800956a:	b913      	cbnz	r3, 8009572 <__swsetup_r+0x16>
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f97d 	bl	800986c <__sinit>
 8009572:	4b2e      	ldr	r3, [pc, #184]	; (800962c <__swsetup_r+0xd0>)
 8009574:	429c      	cmp	r4, r3
 8009576:	d10f      	bne.n	8009598 <__swsetup_r+0x3c>
 8009578:	686c      	ldr	r4, [r5, #4]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009580:	0719      	lsls	r1, r3, #28
 8009582:	d42c      	bmi.n	80095de <__swsetup_r+0x82>
 8009584:	06dd      	lsls	r5, r3, #27
 8009586:	d411      	bmi.n	80095ac <__swsetup_r+0x50>
 8009588:	2309      	movs	r3, #9
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	e03e      	b.n	8009616 <__swsetup_r+0xba>
 8009598:	4b25      	ldr	r3, [pc, #148]	; (8009630 <__swsetup_r+0xd4>)
 800959a:	429c      	cmp	r4, r3
 800959c:	d101      	bne.n	80095a2 <__swsetup_r+0x46>
 800959e:	68ac      	ldr	r4, [r5, #8]
 80095a0:	e7eb      	b.n	800957a <__swsetup_r+0x1e>
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <__swsetup_r+0xd8>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	bf08      	it	eq
 80095a8:	68ec      	ldreq	r4, [r5, #12]
 80095aa:	e7e6      	b.n	800957a <__swsetup_r+0x1e>
 80095ac:	0758      	lsls	r0, r3, #29
 80095ae:	d512      	bpl.n	80095d6 <__swsetup_r+0x7a>
 80095b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b2:	b141      	cbz	r1, 80095c6 <__swsetup_r+0x6a>
 80095b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <__swsetup_r+0x66>
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fdfd 	bl	80091bc <_free_r>
 80095c2:	2300      	movs	r3, #0
 80095c4:	6363      	str	r3, [r4, #52]	; 0x34
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	2300      	movs	r3, #0
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f043 0308 	orr.w	r3, r3, #8
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	b94b      	cbnz	r3, 80095f6 <__swsetup_r+0x9a>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ec:	d003      	beq.n	80095f6 <__swsetup_r+0x9a>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4630      	mov	r0, r6
 80095f2:	f000 fa01 	bl	80099f8 <__smakebuf_r>
 80095f6:	89a0      	ldrh	r0, [r4, #12]
 80095f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095fc:	f010 0301 	ands.w	r3, r0, #1
 8009600:	d00a      	beq.n	8009618 <__swsetup_r+0xbc>
 8009602:	2300      	movs	r3, #0
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6963      	ldr	r3, [r4, #20]
 8009608:	425b      	negs	r3, r3
 800960a:	61a3      	str	r3, [r4, #24]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	b943      	cbnz	r3, 8009622 <__swsetup_r+0xc6>
 8009610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009614:	d1ba      	bne.n	800958c <__swsetup_r+0x30>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	0781      	lsls	r1, r0, #30
 800961a:	bf58      	it	pl
 800961c:	6963      	ldrpl	r3, [r4, #20]
 800961e:	60a3      	str	r3, [r4, #8]
 8009620:	e7f4      	b.n	800960c <__swsetup_r+0xb0>
 8009622:	2000      	movs	r0, #0
 8009624:	e7f7      	b.n	8009616 <__swsetup_r+0xba>
 8009626:	bf00      	nop
 8009628:	2000005c 	.word	0x2000005c
 800962c:	0800a3f4 	.word	0x0800a3f4
 8009630:	0800a414 	.word	0x0800a414
 8009634:	0800a3d4 	.word	0x0800a3d4

08009638 <__sflush_r>:
 8009638:	898a      	ldrh	r2, [r1, #12]
 800963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963e:	4605      	mov	r5, r0
 8009640:	0710      	lsls	r0, r2, #28
 8009642:	460c      	mov	r4, r1
 8009644:	d458      	bmi.n	80096f8 <__sflush_r+0xc0>
 8009646:	684b      	ldr	r3, [r1, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc05      	bgt.n	8009658 <__sflush_r+0x20>
 800964c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	dc02      	bgt.n	8009658 <__sflush_r+0x20>
 8009652:	2000      	movs	r0, #0
 8009654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800965a:	2e00      	cmp	r6, #0
 800965c:	d0f9      	beq.n	8009652 <__sflush_r+0x1a>
 800965e:	2300      	movs	r3, #0
 8009660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009664:	682f      	ldr	r7, [r5, #0]
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	d032      	beq.n	80096d0 <__sflush_r+0x98>
 800966a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	075a      	lsls	r2, r3, #29
 8009670:	d505      	bpl.n	800967e <__sflush_r+0x46>
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	1ac0      	subs	r0, r0, r3
 8009676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009678:	b10b      	cbz	r3, 800967e <__sflush_r+0x46>
 800967a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800967c:	1ac0      	subs	r0, r0, r3
 800967e:	2300      	movs	r3, #0
 8009680:	4602      	mov	r2, r0
 8009682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009684:	6a21      	ldr	r1, [r4, #32]
 8009686:	4628      	mov	r0, r5
 8009688:	47b0      	blx	r6
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	d106      	bne.n	800969e <__sflush_r+0x66>
 8009690:	6829      	ldr	r1, [r5, #0]
 8009692:	291d      	cmp	r1, #29
 8009694:	d82c      	bhi.n	80096f0 <__sflush_r+0xb8>
 8009696:	4a2a      	ldr	r2, [pc, #168]	; (8009740 <__sflush_r+0x108>)
 8009698:	40ca      	lsrs	r2, r1
 800969a:	07d6      	lsls	r6, r2, #31
 800969c:	d528      	bpl.n	80096f0 <__sflush_r+0xb8>
 800969e:	2200      	movs	r2, #0
 80096a0:	6062      	str	r2, [r4, #4]
 80096a2:	04d9      	lsls	r1, r3, #19
 80096a4:	6922      	ldr	r2, [r4, #16]
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	d504      	bpl.n	80096b4 <__sflush_r+0x7c>
 80096aa:	1c42      	adds	r2, r0, #1
 80096ac:	d101      	bne.n	80096b2 <__sflush_r+0x7a>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	b903      	cbnz	r3, 80096b4 <__sflush_r+0x7c>
 80096b2:	6560      	str	r0, [r4, #84]	; 0x54
 80096b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b6:	602f      	str	r7, [r5, #0]
 80096b8:	2900      	cmp	r1, #0
 80096ba:	d0ca      	beq.n	8009652 <__sflush_r+0x1a>
 80096bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c0:	4299      	cmp	r1, r3
 80096c2:	d002      	beq.n	80096ca <__sflush_r+0x92>
 80096c4:	4628      	mov	r0, r5
 80096c6:	f7ff fd79 	bl	80091bc <_free_r>
 80096ca:	2000      	movs	r0, #0
 80096cc:	6360      	str	r0, [r4, #52]	; 0x34
 80096ce:	e7c1      	b.n	8009654 <__sflush_r+0x1c>
 80096d0:	6a21      	ldr	r1, [r4, #32]
 80096d2:	2301      	movs	r3, #1
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b0      	blx	r6
 80096d8:	1c41      	adds	r1, r0, #1
 80096da:	d1c7      	bne.n	800966c <__sflush_r+0x34>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0c4      	beq.n	800966c <__sflush_r+0x34>
 80096e2:	2b1d      	cmp	r3, #29
 80096e4:	d001      	beq.n	80096ea <__sflush_r+0xb2>
 80096e6:	2b16      	cmp	r3, #22
 80096e8:	d101      	bne.n	80096ee <__sflush_r+0xb6>
 80096ea:	602f      	str	r7, [r5, #0]
 80096ec:	e7b1      	b.n	8009652 <__sflush_r+0x1a>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	e7ad      	b.n	8009654 <__sflush_r+0x1c>
 80096f8:	690f      	ldr	r7, [r1, #16]
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	d0a9      	beq.n	8009652 <__sflush_r+0x1a>
 80096fe:	0793      	lsls	r3, r2, #30
 8009700:	680e      	ldr	r6, [r1, #0]
 8009702:	bf08      	it	eq
 8009704:	694b      	ldreq	r3, [r1, #20]
 8009706:	600f      	str	r7, [r1, #0]
 8009708:	bf18      	it	ne
 800970a:	2300      	movne	r3, #0
 800970c:	eba6 0807 	sub.w	r8, r6, r7
 8009710:	608b      	str	r3, [r1, #8]
 8009712:	f1b8 0f00 	cmp.w	r8, #0
 8009716:	dd9c      	ble.n	8009652 <__sflush_r+0x1a>
 8009718:	6a21      	ldr	r1, [r4, #32]
 800971a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800971c:	4643      	mov	r3, r8
 800971e:	463a      	mov	r2, r7
 8009720:	4628      	mov	r0, r5
 8009722:	47b0      	blx	r6
 8009724:	2800      	cmp	r0, #0
 8009726:	dc06      	bgt.n	8009736 <__sflush_r+0xfe>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	e78e      	b.n	8009654 <__sflush_r+0x1c>
 8009736:	4407      	add	r7, r0
 8009738:	eba8 0800 	sub.w	r8, r8, r0
 800973c:	e7e9      	b.n	8009712 <__sflush_r+0xda>
 800973e:	bf00      	nop
 8009740:	20400001 	.word	0x20400001

08009744 <_fflush_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	4605      	mov	r5, r0
 800974a:	460c      	mov	r4, r1
 800974c:	b913      	cbnz	r3, 8009754 <_fflush_r+0x10>
 800974e:	2500      	movs	r5, #0
 8009750:	4628      	mov	r0, r5
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	b118      	cbz	r0, 800975e <_fflush_r+0x1a>
 8009756:	6983      	ldr	r3, [r0, #24]
 8009758:	b90b      	cbnz	r3, 800975e <_fflush_r+0x1a>
 800975a:	f000 f887 	bl	800986c <__sinit>
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <_fflush_r+0x6c>)
 8009760:	429c      	cmp	r4, r3
 8009762:	d11b      	bne.n	800979c <_fflush_r+0x58>
 8009764:	686c      	ldr	r4, [r5, #4]
 8009766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ef      	beq.n	800974e <_fflush_r+0xa>
 800976e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009770:	07d0      	lsls	r0, r2, #31
 8009772:	d404      	bmi.n	800977e <_fflush_r+0x3a>
 8009774:	0599      	lsls	r1, r3, #22
 8009776:	d402      	bmi.n	800977e <_fflush_r+0x3a>
 8009778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800977a:	f000 f915 	bl	80099a8 <__retarget_lock_acquire_recursive>
 800977e:	4628      	mov	r0, r5
 8009780:	4621      	mov	r1, r4
 8009782:	f7ff ff59 	bl	8009638 <__sflush_r>
 8009786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009788:	07da      	lsls	r2, r3, #31
 800978a:	4605      	mov	r5, r0
 800978c:	d4e0      	bmi.n	8009750 <_fflush_r+0xc>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	059b      	lsls	r3, r3, #22
 8009792:	d4dd      	bmi.n	8009750 <_fflush_r+0xc>
 8009794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009796:	f000 f908 	bl	80099aa <__retarget_lock_release_recursive>
 800979a:	e7d9      	b.n	8009750 <_fflush_r+0xc>
 800979c:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <_fflush_r+0x70>)
 800979e:	429c      	cmp	r4, r3
 80097a0:	d101      	bne.n	80097a6 <_fflush_r+0x62>
 80097a2:	68ac      	ldr	r4, [r5, #8]
 80097a4:	e7df      	b.n	8009766 <_fflush_r+0x22>
 80097a6:	4b04      	ldr	r3, [pc, #16]	; (80097b8 <_fflush_r+0x74>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	bf08      	it	eq
 80097ac:	68ec      	ldreq	r4, [r5, #12]
 80097ae:	e7da      	b.n	8009766 <_fflush_r+0x22>
 80097b0:	0800a3f4 	.word	0x0800a3f4
 80097b4:	0800a414 	.word	0x0800a414
 80097b8:	0800a3d4 	.word	0x0800a3d4

080097bc <std>:
 80097bc:	2300      	movs	r3, #0
 80097be:	b510      	push	{r4, lr}
 80097c0:	4604      	mov	r4, r0
 80097c2:	e9c0 3300 	strd	r3, r3, [r0]
 80097c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ca:	6083      	str	r3, [r0, #8]
 80097cc:	8181      	strh	r1, [r0, #12]
 80097ce:	6643      	str	r3, [r0, #100]	; 0x64
 80097d0:	81c2      	strh	r2, [r0, #14]
 80097d2:	6183      	str	r3, [r0, #24]
 80097d4:	4619      	mov	r1, r3
 80097d6:	2208      	movs	r2, #8
 80097d8:	305c      	adds	r0, #92	; 0x5c
 80097da:	f7ff fce7 	bl	80091ac <memset>
 80097de:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <std+0x38>)
 80097e0:	6263      	str	r3, [r4, #36]	; 0x24
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <std+0x3c>)
 80097e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <std+0x40>)
 80097e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <std+0x44>)
 80097ec:	6224      	str	r4, [r4, #32]
 80097ee:	6323      	str	r3, [r4, #48]	; 0x30
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	0800a06d 	.word	0x0800a06d
 80097f8:	0800a08f 	.word	0x0800a08f
 80097fc:	0800a0c7 	.word	0x0800a0c7
 8009800:	0800a0eb 	.word	0x0800a0eb

08009804 <_cleanup_r>:
 8009804:	4901      	ldr	r1, [pc, #4]	; (800980c <_cleanup_r+0x8>)
 8009806:	f000 b8af 	b.w	8009968 <_fwalk_reent>
 800980a:	bf00      	nop
 800980c:	08009745 	.word	0x08009745

08009810 <__sfmoreglue>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	2268      	movs	r2, #104	; 0x68
 8009814:	1e4d      	subs	r5, r1, #1
 8009816:	4355      	muls	r5, r2
 8009818:	460e      	mov	r6, r1
 800981a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800981e:	f7ff fd39 	bl	8009294 <_malloc_r>
 8009822:	4604      	mov	r4, r0
 8009824:	b140      	cbz	r0, 8009838 <__sfmoreglue+0x28>
 8009826:	2100      	movs	r1, #0
 8009828:	e9c0 1600 	strd	r1, r6, [r0]
 800982c:	300c      	adds	r0, #12
 800982e:	60a0      	str	r0, [r4, #8]
 8009830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009834:	f7ff fcba 	bl	80091ac <memset>
 8009838:	4620      	mov	r0, r4
 800983a:	bd70      	pop	{r4, r5, r6, pc}

0800983c <__sfp_lock_acquire>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__sfp_lock_acquire+0x8>)
 800983e:	f000 b8b3 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 8009842:	bf00      	nop
 8009844:	20003cd5 	.word	0x20003cd5

08009848 <__sfp_lock_release>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__sfp_lock_release+0x8>)
 800984a:	f000 b8ae 	b.w	80099aa <__retarget_lock_release_recursive>
 800984e:	bf00      	nop
 8009850:	20003cd5 	.word	0x20003cd5

08009854 <__sinit_lock_acquire>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__sinit_lock_acquire+0x8>)
 8009856:	f000 b8a7 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 800985a:	bf00      	nop
 800985c:	20003cd6 	.word	0x20003cd6

08009860 <__sinit_lock_release>:
 8009860:	4801      	ldr	r0, [pc, #4]	; (8009868 <__sinit_lock_release+0x8>)
 8009862:	f000 b8a2 	b.w	80099aa <__retarget_lock_release_recursive>
 8009866:	bf00      	nop
 8009868:	20003cd6 	.word	0x20003cd6

0800986c <__sinit>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4604      	mov	r4, r0
 8009870:	f7ff fff0 	bl	8009854 <__sinit_lock_acquire>
 8009874:	69a3      	ldr	r3, [r4, #24]
 8009876:	b11b      	cbz	r3, 8009880 <__sinit+0x14>
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f7ff bff0 	b.w	8009860 <__sinit_lock_release>
 8009880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009884:	6523      	str	r3, [r4, #80]	; 0x50
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <__sinit+0x68>)
 8009888:	4a13      	ldr	r2, [pc, #76]	; (80098d8 <__sinit+0x6c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	62a2      	str	r2, [r4, #40]	; 0x28
 800988e:	42a3      	cmp	r3, r4
 8009890:	bf04      	itt	eq
 8009892:	2301      	moveq	r3, #1
 8009894:	61a3      	streq	r3, [r4, #24]
 8009896:	4620      	mov	r0, r4
 8009898:	f000 f820 	bl	80098dc <__sfp>
 800989c:	6060      	str	r0, [r4, #4]
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 f81c 	bl	80098dc <__sfp>
 80098a4:	60a0      	str	r0, [r4, #8]
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f818 	bl	80098dc <__sfp>
 80098ac:	2200      	movs	r2, #0
 80098ae:	60e0      	str	r0, [r4, #12]
 80098b0:	2104      	movs	r1, #4
 80098b2:	6860      	ldr	r0, [r4, #4]
 80098b4:	f7ff ff82 	bl	80097bc <std>
 80098b8:	68a0      	ldr	r0, [r4, #8]
 80098ba:	2201      	movs	r2, #1
 80098bc:	2109      	movs	r1, #9
 80098be:	f7ff ff7d 	bl	80097bc <std>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	2202      	movs	r2, #2
 80098c6:	2112      	movs	r1, #18
 80098c8:	f7ff ff78 	bl	80097bc <std>
 80098cc:	2301      	movs	r3, #1
 80098ce:	61a3      	str	r3, [r4, #24]
 80098d0:	e7d2      	b.n	8009878 <__sinit+0xc>
 80098d2:	bf00      	nop
 80098d4:	0800a3d0 	.word	0x0800a3d0
 80098d8:	08009805 	.word	0x08009805

080098dc <__sfp>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	4607      	mov	r7, r0
 80098e0:	f7ff ffac 	bl	800983c <__sfp_lock_acquire>
 80098e4:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <__sfp+0x84>)
 80098e6:	681e      	ldr	r6, [r3, #0]
 80098e8:	69b3      	ldr	r3, [r6, #24]
 80098ea:	b913      	cbnz	r3, 80098f2 <__sfp+0x16>
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff ffbd 	bl	800986c <__sinit>
 80098f2:	3648      	adds	r6, #72	; 0x48
 80098f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	d503      	bpl.n	8009904 <__sfp+0x28>
 80098fc:	6833      	ldr	r3, [r6, #0]
 80098fe:	b30b      	cbz	r3, 8009944 <__sfp+0x68>
 8009900:	6836      	ldr	r6, [r6, #0]
 8009902:	e7f7      	b.n	80098f4 <__sfp+0x18>
 8009904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009908:	b9d5      	cbnz	r5, 8009940 <__sfp+0x64>
 800990a:	4b16      	ldr	r3, [pc, #88]	; (8009964 <__sfp+0x88>)
 800990c:	60e3      	str	r3, [r4, #12]
 800990e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009912:	6665      	str	r5, [r4, #100]	; 0x64
 8009914:	f000 f847 	bl	80099a6 <__retarget_lock_init_recursive>
 8009918:	f7ff ff96 	bl	8009848 <__sfp_lock_release>
 800991c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009924:	6025      	str	r5, [r4, #0]
 8009926:	61a5      	str	r5, [r4, #24]
 8009928:	2208      	movs	r2, #8
 800992a:	4629      	mov	r1, r5
 800992c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009930:	f7ff fc3c 	bl	80091ac <memset>
 8009934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800993c:	4620      	mov	r0, r4
 800993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009940:	3468      	adds	r4, #104	; 0x68
 8009942:	e7d9      	b.n	80098f8 <__sfp+0x1c>
 8009944:	2104      	movs	r1, #4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ff62 	bl	8009810 <__sfmoreglue>
 800994c:	4604      	mov	r4, r0
 800994e:	6030      	str	r0, [r6, #0]
 8009950:	2800      	cmp	r0, #0
 8009952:	d1d5      	bne.n	8009900 <__sfp+0x24>
 8009954:	f7ff ff78 	bl	8009848 <__sfp_lock_release>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	e7ee      	b.n	800993c <__sfp+0x60>
 800995e:	bf00      	nop
 8009960:	0800a3d0 	.word	0x0800a3d0
 8009964:	ffff0001 	.word	0xffff0001

08009968 <_fwalk_reent>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	4606      	mov	r6, r0
 800996e:	4688      	mov	r8, r1
 8009970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009974:	2700      	movs	r7, #0
 8009976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800997a:	f1b9 0901 	subs.w	r9, r9, #1
 800997e:	d505      	bpl.n	800998c <_fwalk_reent+0x24>
 8009980:	6824      	ldr	r4, [r4, #0]
 8009982:	2c00      	cmp	r4, #0
 8009984:	d1f7      	bne.n	8009976 <_fwalk_reent+0xe>
 8009986:	4638      	mov	r0, r7
 8009988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998c:	89ab      	ldrh	r3, [r5, #12]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d907      	bls.n	80099a2 <_fwalk_reent+0x3a>
 8009992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009996:	3301      	adds	r3, #1
 8009998:	d003      	beq.n	80099a2 <_fwalk_reent+0x3a>
 800999a:	4629      	mov	r1, r5
 800999c:	4630      	mov	r0, r6
 800999e:	47c0      	blx	r8
 80099a0:	4307      	orrs	r7, r0
 80099a2:	3568      	adds	r5, #104	; 0x68
 80099a4:	e7e9      	b.n	800997a <_fwalk_reent+0x12>

080099a6 <__retarget_lock_init_recursive>:
 80099a6:	4770      	bx	lr

080099a8 <__retarget_lock_acquire_recursive>:
 80099a8:	4770      	bx	lr

080099aa <__retarget_lock_release_recursive>:
 80099aa:	4770      	bx	lr

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	; 0x58
 80099b8:	4614      	mov	r4, r2
 80099ba:	461d      	mov	r5, r3
 80099bc:	da08      	bge.n	80099d0 <__swhatbuf_r+0x24>
 80099be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	061a      	lsls	r2, r3, #24
 80099c8:	d410      	bmi.n	80099ec <__swhatbuf_r+0x40>
 80099ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ce:	e00e      	b.n	80099ee <__swhatbuf_r+0x42>
 80099d0:	466a      	mov	r2, sp
 80099d2:	f000 fbb1 	bl	800a138 <_fstat_r>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	dbf1      	blt.n	80099be <__swhatbuf_r+0x12>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e4:	425a      	negs	r2, r3
 80099e6:	415a      	adcs	r2, r3
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	e7ee      	b.n	80099ca <__swhatbuf_r+0x1e>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	2000      	movs	r0, #0
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	b016      	add	sp, #88	; 0x58
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b002      	add	sp, #8
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffc8 	bl	80099ac <__swhatbuf_r>
 8009a1c:	9900      	ldr	r1, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff fc37 	bl	8009294 <_malloc_r>
 8009a26:	b948      	cbnz	r0, 8009a3c <__smakebuf_r+0x44>
 8009a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d4ef      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	f043 0302 	orr.w	r3, r3, #2
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7e3      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <__smakebuf_r+0x7c>)
 8009a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	6163      	str	r3, [r4, #20]
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	b15b      	cbz	r3, 8009a6c <__smakebuf_r+0x74>
 8009a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 fb7f 	bl	800a15c <_isatty_r>
 8009a5e:	b128      	cbz	r0, 8009a6c <__smakebuf_r+0x74>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	89a0      	ldrh	r0, [r4, #12]
 8009a6e:	4305      	orrs	r5, r0
 8009a70:	81a5      	strh	r5, [r4, #12]
 8009a72:	e7cd      	b.n	8009a10 <__smakebuf_r+0x18>
 8009a74:	08009805 	.word	0x08009805

08009a78 <__malloc_lock>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__malloc_lock+0x8>)
 8009a7a:	f7ff bf95 	b.w	80099a8 <__retarget_lock_acquire_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20003cd4 	.word	0x20003cd4

08009a84 <__malloc_unlock>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__malloc_unlock+0x8>)
 8009a86:	f7ff bf90 	b.w	80099aa <__retarget_lock_release_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20003cd4 	.word	0x20003cd4

08009a90 <__sfputc_r>:
 8009a90:	6893      	ldr	r3, [r2, #8]
 8009a92:	3b01      	subs	r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	b410      	push	{r4}
 8009a98:	6093      	str	r3, [r2, #8]
 8009a9a:	da08      	bge.n	8009aae <__sfputc_r+0x1e>
 8009a9c:	6994      	ldr	r4, [r2, #24]
 8009a9e:	42a3      	cmp	r3, r4
 8009aa0:	db01      	blt.n	8009aa6 <__sfputc_r+0x16>
 8009aa2:	290a      	cmp	r1, #10
 8009aa4:	d103      	bne.n	8009aae <__sfputc_r+0x1e>
 8009aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aaa:	f7ff bd05 	b.w	80094b8 <__swbuf_r>
 8009aae:	6813      	ldr	r3, [r2, #0]
 8009ab0:	1c58      	adds	r0, r3, #1
 8009ab2:	6010      	str	r0, [r2, #0]
 8009ab4:	7019      	strb	r1, [r3, #0]
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <__sfputs_r>:
 8009abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	18d5      	adds	r5, r2, r3
 8009ac8:	42ac      	cmp	r4, r5
 8009aca:	d101      	bne.n	8009ad0 <__sfputs_r+0x12>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e007      	b.n	8009ae0 <__sfputs_r+0x22>
 8009ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ffda 	bl	8009a90 <__sfputc_r>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d1f3      	bne.n	8009ac8 <__sfputs_r+0xa>
 8009ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ae4 <_vfiprintf_r>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	460d      	mov	r5, r1
 8009aea:	b09d      	sub	sp, #116	; 0x74
 8009aec:	4614      	mov	r4, r2
 8009aee:	4698      	mov	r8, r3
 8009af0:	4606      	mov	r6, r0
 8009af2:	b118      	cbz	r0, 8009afc <_vfiprintf_r+0x18>
 8009af4:	6983      	ldr	r3, [r0, #24]
 8009af6:	b90b      	cbnz	r3, 8009afc <_vfiprintf_r+0x18>
 8009af8:	f7ff feb8 	bl	800986c <__sinit>
 8009afc:	4b89      	ldr	r3, [pc, #548]	; (8009d24 <_vfiprintf_r+0x240>)
 8009afe:	429d      	cmp	r5, r3
 8009b00:	d11b      	bne.n	8009b3a <_vfiprintf_r+0x56>
 8009b02:	6875      	ldr	r5, [r6, #4]
 8009b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b06:	07d9      	lsls	r1, r3, #31
 8009b08:	d405      	bmi.n	8009b16 <_vfiprintf_r+0x32>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	059a      	lsls	r2, r3, #22
 8009b0e:	d402      	bmi.n	8009b16 <_vfiprintf_r+0x32>
 8009b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b12:	f7ff ff49 	bl	80099a8 <__retarget_lock_acquire_recursive>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	071b      	lsls	r3, r3, #28
 8009b1a:	d501      	bpl.n	8009b20 <_vfiprintf_r+0x3c>
 8009b1c:	692b      	ldr	r3, [r5, #16]
 8009b1e:	b9eb      	cbnz	r3, 8009b5c <_vfiprintf_r+0x78>
 8009b20:	4629      	mov	r1, r5
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff fd1a 	bl	800955c <__swsetup_r>
 8009b28:	b1c0      	cbz	r0, 8009b5c <_vfiprintf_r+0x78>
 8009b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b2c:	07dc      	lsls	r4, r3, #31
 8009b2e:	d50e      	bpl.n	8009b4e <_vfiprintf_r+0x6a>
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	b01d      	add	sp, #116	; 0x74
 8009b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3a:	4b7b      	ldr	r3, [pc, #492]	; (8009d28 <_vfiprintf_r+0x244>)
 8009b3c:	429d      	cmp	r5, r3
 8009b3e:	d101      	bne.n	8009b44 <_vfiprintf_r+0x60>
 8009b40:	68b5      	ldr	r5, [r6, #8]
 8009b42:	e7df      	b.n	8009b04 <_vfiprintf_r+0x20>
 8009b44:	4b79      	ldr	r3, [pc, #484]	; (8009d2c <_vfiprintf_r+0x248>)
 8009b46:	429d      	cmp	r5, r3
 8009b48:	bf08      	it	eq
 8009b4a:	68f5      	ldreq	r5, [r6, #12]
 8009b4c:	e7da      	b.n	8009b04 <_vfiprintf_r+0x20>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	0598      	lsls	r0, r3, #22
 8009b52:	d4ed      	bmi.n	8009b30 <_vfiprintf_r+0x4c>
 8009b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b56:	f7ff ff28 	bl	80099aa <__retarget_lock_release_recursive>
 8009b5a:	e7e9      	b.n	8009b30 <_vfiprintf_r+0x4c>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	2320      	movs	r3, #32
 8009b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b6a:	2330      	movs	r3, #48	; 0x30
 8009b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d30 <_vfiprintf_r+0x24c>
 8009b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b74:	f04f 0901 	mov.w	r9, #1
 8009b78:	4623      	mov	r3, r4
 8009b7a:	469a      	mov	sl, r3
 8009b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b80:	b10a      	cbz	r2, 8009b86 <_vfiprintf_r+0xa2>
 8009b82:	2a25      	cmp	r2, #37	; 0x25
 8009b84:	d1f9      	bne.n	8009b7a <_vfiprintf_r+0x96>
 8009b86:	ebba 0b04 	subs.w	fp, sl, r4
 8009b8a:	d00b      	beq.n	8009ba4 <_vfiprintf_r+0xc0>
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	4622      	mov	r2, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7ff ff93 	bl	8009abe <__sfputs_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f000 80aa 	beq.w	8009cf2 <_vfiprintf_r+0x20e>
 8009b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba0:	445a      	add	r2, fp
 8009ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80a2 	beq.w	8009cf2 <_vfiprintf_r+0x20e>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bb8:	f10a 0a01 	add.w	sl, sl, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	9307      	str	r3, [sp, #28]
 8009bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bc6:	4654      	mov	r4, sl
 8009bc8:	2205      	movs	r2, #5
 8009bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bce:	4858      	ldr	r0, [pc, #352]	; (8009d30 <_vfiprintf_r+0x24c>)
 8009bd0:	f7f6 fb06 	bl	80001e0 <memchr>
 8009bd4:	9a04      	ldr	r2, [sp, #16]
 8009bd6:	b9d8      	cbnz	r0, 8009c10 <_vfiprintf_r+0x12c>
 8009bd8:	06d1      	lsls	r1, r2, #27
 8009bda:	bf44      	itt	mi
 8009bdc:	2320      	movmi	r3, #32
 8009bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009be2:	0713      	lsls	r3, r2, #28
 8009be4:	bf44      	itt	mi
 8009be6:	232b      	movmi	r3, #43	; 0x2b
 8009be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bec:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf2:	d015      	beq.n	8009c20 <_vfiprintf_r+0x13c>
 8009bf4:	9a07      	ldr	r2, [sp, #28]
 8009bf6:	4654      	mov	r4, sl
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	f04f 0c0a 	mov.w	ip, #10
 8009bfe:	4621      	mov	r1, r4
 8009c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c04:	3b30      	subs	r3, #48	; 0x30
 8009c06:	2b09      	cmp	r3, #9
 8009c08:	d94e      	bls.n	8009ca8 <_vfiprintf_r+0x1c4>
 8009c0a:	b1b0      	cbz	r0, 8009c3a <_vfiprintf_r+0x156>
 8009c0c:	9207      	str	r2, [sp, #28]
 8009c0e:	e014      	b.n	8009c3a <_vfiprintf_r+0x156>
 8009c10:	eba0 0308 	sub.w	r3, r0, r8
 8009c14:	fa09 f303 	lsl.w	r3, r9, r3
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	46a2      	mov	sl, r4
 8009c1e:	e7d2      	b.n	8009bc6 <_vfiprintf_r+0xe2>
 8009c20:	9b03      	ldr	r3, [sp, #12]
 8009c22:	1d19      	adds	r1, r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	9103      	str	r1, [sp, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfbb      	ittet	lt
 8009c2c:	425b      	neglt	r3, r3
 8009c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c32:	9307      	strge	r3, [sp, #28]
 8009c34:	9307      	strlt	r3, [sp, #28]
 8009c36:	bfb8      	it	lt
 8009c38:	9204      	strlt	r2, [sp, #16]
 8009c3a:	7823      	ldrb	r3, [r4, #0]
 8009c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c3e:	d10c      	bne.n	8009c5a <_vfiprintf_r+0x176>
 8009c40:	7863      	ldrb	r3, [r4, #1]
 8009c42:	2b2a      	cmp	r3, #42	; 0x2a
 8009c44:	d135      	bne.n	8009cb2 <_vfiprintf_r+0x1ce>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	1d1a      	adds	r2, r3, #4
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	9203      	str	r2, [sp, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bfb8      	it	lt
 8009c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c56:	3402      	adds	r4, #2
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d40 <_vfiprintf_r+0x25c>
 8009c5e:	7821      	ldrb	r1, [r4, #0]
 8009c60:	2203      	movs	r2, #3
 8009c62:	4650      	mov	r0, sl
 8009c64:	f7f6 fabc 	bl	80001e0 <memchr>
 8009c68:	b140      	cbz	r0, 8009c7c <_vfiprintf_r+0x198>
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	eba0 000a 	sub.w	r0, r0, sl
 8009c70:	fa03 f000 	lsl.w	r0, r3, r0
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	4303      	orrs	r3, r0
 8009c78:	3401      	adds	r4, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	482c      	ldr	r0, [pc, #176]	; (8009d34 <_vfiprintf_r+0x250>)
 8009c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c86:	2206      	movs	r2, #6
 8009c88:	f7f6 faaa 	bl	80001e0 <memchr>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d03f      	beq.n	8009d10 <_vfiprintf_r+0x22c>
 8009c90:	4b29      	ldr	r3, [pc, #164]	; (8009d38 <_vfiprintf_r+0x254>)
 8009c92:	bb1b      	cbnz	r3, 8009cdc <_vfiprintf_r+0x1f8>
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	3307      	adds	r3, #7
 8009c98:	f023 0307 	bic.w	r3, r3, #7
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	443b      	add	r3, r7
 8009ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca6:	e767      	b.n	8009b78 <_vfiprintf_r+0x94>
 8009ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cac:	460c      	mov	r4, r1
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e7a5      	b.n	8009bfe <_vfiprintf_r+0x11a>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	9305      	str	r3, [sp, #20]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f04f 0c0a 	mov.w	ip, #10
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cc4:	3a30      	subs	r2, #48	; 0x30
 8009cc6:	2a09      	cmp	r2, #9
 8009cc8:	d903      	bls.n	8009cd2 <_vfiprintf_r+0x1ee>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0c5      	beq.n	8009c5a <_vfiprintf_r+0x176>
 8009cce:	9105      	str	r1, [sp, #20]
 8009cd0:	e7c3      	b.n	8009c5a <_vfiprintf_r+0x176>
 8009cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e7f0      	b.n	8009cbe <_vfiprintf_r+0x1da>
 8009cdc:	ab03      	add	r3, sp, #12
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	4b16      	ldr	r3, [pc, #88]	; (8009d3c <_vfiprintf_r+0x258>)
 8009ce4:	a904      	add	r1, sp, #16
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f3af 8000 	nop.w
 8009cec:	4607      	mov	r7, r0
 8009cee:	1c78      	adds	r0, r7, #1
 8009cf0:	d1d6      	bne.n	8009ca0 <_vfiprintf_r+0x1bc>
 8009cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cf4:	07d9      	lsls	r1, r3, #31
 8009cf6:	d405      	bmi.n	8009d04 <_vfiprintf_r+0x220>
 8009cf8:	89ab      	ldrh	r3, [r5, #12]
 8009cfa:	059a      	lsls	r2, r3, #22
 8009cfc:	d402      	bmi.n	8009d04 <_vfiprintf_r+0x220>
 8009cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d00:	f7ff fe53 	bl	80099aa <__retarget_lock_release_recursive>
 8009d04:	89ab      	ldrh	r3, [r5, #12]
 8009d06:	065b      	lsls	r3, r3, #25
 8009d08:	f53f af12 	bmi.w	8009b30 <_vfiprintf_r+0x4c>
 8009d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d0e:	e711      	b.n	8009b34 <_vfiprintf_r+0x50>
 8009d10:	ab03      	add	r3, sp, #12
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <_vfiprintf_r+0x258>)
 8009d18:	a904      	add	r1, sp, #16
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f000 f880 	bl	8009e20 <_printf_i>
 8009d20:	e7e4      	b.n	8009cec <_vfiprintf_r+0x208>
 8009d22:	bf00      	nop
 8009d24:	0800a3f4 	.word	0x0800a3f4
 8009d28:	0800a414 	.word	0x0800a414
 8009d2c:	0800a3d4 	.word	0x0800a3d4
 8009d30:	0800a434 	.word	0x0800a434
 8009d34:	0800a43e 	.word	0x0800a43e
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	08009abf 	.word	0x08009abf
 8009d40:	0800a43a 	.word	0x0800a43a

08009d44 <_printf_common>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	4616      	mov	r6, r2
 8009d4a:	4699      	mov	r9, r3
 8009d4c:	688a      	ldr	r2, [r1, #8]
 8009d4e:	690b      	ldr	r3, [r1, #16]
 8009d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d54:	4293      	cmp	r3, r2
 8009d56:	bfb8      	it	lt
 8009d58:	4613      	movlt	r3, r2
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d60:	4607      	mov	r7, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	b10a      	cbz	r2, 8009d6a <_printf_common+0x26>
 8009d66:	3301      	adds	r3, #1
 8009d68:	6033      	str	r3, [r6, #0]
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	0699      	lsls	r1, r3, #26
 8009d6e:	bf42      	ittt	mi
 8009d70:	6833      	ldrmi	r3, [r6, #0]
 8009d72:	3302      	addmi	r3, #2
 8009d74:	6033      	strmi	r3, [r6, #0]
 8009d76:	6825      	ldr	r5, [r4, #0]
 8009d78:	f015 0506 	ands.w	r5, r5, #6
 8009d7c:	d106      	bne.n	8009d8c <_printf_common+0x48>
 8009d7e:	f104 0a19 	add.w	sl, r4, #25
 8009d82:	68e3      	ldr	r3, [r4, #12]
 8009d84:	6832      	ldr	r2, [r6, #0]
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	dc26      	bgt.n	8009dda <_printf_common+0x96>
 8009d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d90:	1e13      	subs	r3, r2, #0
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	bf18      	it	ne
 8009d96:	2301      	movne	r3, #1
 8009d98:	0692      	lsls	r2, r2, #26
 8009d9a:	d42b      	bmi.n	8009df4 <_printf_common+0xb0>
 8009d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009da0:	4649      	mov	r1, r9
 8009da2:	4638      	mov	r0, r7
 8009da4:	47c0      	blx	r8
 8009da6:	3001      	adds	r0, #1
 8009da8:	d01e      	beq.n	8009de8 <_printf_common+0xa4>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	68e5      	ldr	r5, [r4, #12]
 8009dae:	6832      	ldr	r2, [r6, #0]
 8009db0:	f003 0306 	and.w	r3, r3, #6
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	bf08      	it	eq
 8009db8:	1aad      	subeq	r5, r5, r2
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	6922      	ldr	r2, [r4, #16]
 8009dbe:	bf0c      	ite	eq
 8009dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dc4:	2500      	movne	r5, #0
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	bfc4      	itt	gt
 8009dca:	1a9b      	subgt	r3, r3, r2
 8009dcc:	18ed      	addgt	r5, r5, r3
 8009dce:	2600      	movs	r6, #0
 8009dd0:	341a      	adds	r4, #26
 8009dd2:	42b5      	cmp	r5, r6
 8009dd4:	d11a      	bne.n	8009e0c <_printf_common+0xc8>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e008      	b.n	8009dec <_printf_common+0xa8>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4652      	mov	r2, sl
 8009dde:	4649      	mov	r1, r9
 8009de0:	4638      	mov	r0, r7
 8009de2:	47c0      	blx	r8
 8009de4:	3001      	adds	r0, #1
 8009de6:	d103      	bne.n	8009df0 <_printf_common+0xac>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df0:	3501      	adds	r5, #1
 8009df2:	e7c6      	b.n	8009d82 <_printf_common+0x3e>
 8009df4:	18e1      	adds	r1, r4, r3
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	2030      	movs	r0, #48	; 0x30
 8009dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dfe:	4422      	add	r2, r4
 8009e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e08:	3302      	adds	r3, #2
 8009e0a:	e7c7      	b.n	8009d9c <_printf_common+0x58>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	4622      	mov	r2, r4
 8009e10:	4649      	mov	r1, r9
 8009e12:	4638      	mov	r0, r7
 8009e14:	47c0      	blx	r8
 8009e16:	3001      	adds	r0, #1
 8009e18:	d0e6      	beq.n	8009de8 <_printf_common+0xa4>
 8009e1a:	3601      	adds	r6, #1
 8009e1c:	e7d9      	b.n	8009dd2 <_printf_common+0x8e>
	...

08009e20 <_printf_i>:
 8009e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	7e0f      	ldrb	r7, [r1, #24]
 8009e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e28:	2f78      	cmp	r7, #120	; 0x78
 8009e2a:	4691      	mov	r9, r2
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	469a      	mov	sl, r3
 8009e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e36:	d807      	bhi.n	8009e48 <_printf_i+0x28>
 8009e38:	2f62      	cmp	r7, #98	; 0x62
 8009e3a:	d80a      	bhi.n	8009e52 <_printf_i+0x32>
 8009e3c:	2f00      	cmp	r7, #0
 8009e3e:	f000 80d8 	beq.w	8009ff2 <_printf_i+0x1d2>
 8009e42:	2f58      	cmp	r7, #88	; 0x58
 8009e44:	f000 80a3 	beq.w	8009f8e <_printf_i+0x16e>
 8009e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e50:	e03a      	b.n	8009ec8 <_printf_i+0xa8>
 8009e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e56:	2b15      	cmp	r3, #21
 8009e58:	d8f6      	bhi.n	8009e48 <_printf_i+0x28>
 8009e5a:	a101      	add	r1, pc, #4	; (adr r1, 8009e60 <_printf_i+0x40>)
 8009e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e60:	08009eb9 	.word	0x08009eb9
 8009e64:	08009ecd 	.word	0x08009ecd
 8009e68:	08009e49 	.word	0x08009e49
 8009e6c:	08009e49 	.word	0x08009e49
 8009e70:	08009e49 	.word	0x08009e49
 8009e74:	08009e49 	.word	0x08009e49
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009e49 	.word	0x08009e49
 8009e80:	08009e49 	.word	0x08009e49
 8009e84:	08009e49 	.word	0x08009e49
 8009e88:	08009e49 	.word	0x08009e49
 8009e8c:	08009fd9 	.word	0x08009fd9
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009fbb 	.word	0x08009fbb
 8009e98:	08009e49 	.word	0x08009e49
 8009e9c:	08009e49 	.word	0x08009e49
 8009ea0:	08009ffb 	.word	0x08009ffb
 8009ea4:	08009e49 	.word	0x08009e49
 8009ea8:	08009efd 	.word	0x08009efd
 8009eac:	08009e49 	.word	0x08009e49
 8009eb0:	08009e49 	.word	0x08009e49
 8009eb4:	08009fc3 	.word	0x08009fc3
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	1d1a      	adds	r2, r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	602a      	str	r2, [r5, #0]
 8009ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e0a3      	b.n	800a014 <_printf_i+0x1f4>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	6829      	ldr	r1, [r5, #0]
 8009ed0:	0606      	lsls	r6, r0, #24
 8009ed2:	f101 0304 	add.w	r3, r1, #4
 8009ed6:	d50a      	bpl.n	8009eee <_printf_i+0xce>
 8009ed8:	680e      	ldr	r6, [r1, #0]
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	2e00      	cmp	r6, #0
 8009ede:	da03      	bge.n	8009ee8 <_printf_i+0xc8>
 8009ee0:	232d      	movs	r3, #45	; 0x2d
 8009ee2:	4276      	negs	r6, r6
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	485e      	ldr	r0, [pc, #376]	; (800a064 <_printf_i+0x244>)
 8009eea:	230a      	movs	r3, #10
 8009eec:	e019      	b.n	8009f22 <_printf_i+0x102>
 8009eee:	680e      	ldr	r6, [r1, #0]
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ef6:	bf18      	it	ne
 8009ef8:	b236      	sxthne	r6, r6
 8009efa:	e7ef      	b.n	8009edc <_printf_i+0xbc>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	6029      	str	r1, [r5, #0]
 8009f04:	0601      	lsls	r1, r0, #24
 8009f06:	d501      	bpl.n	8009f0c <_printf_i+0xec>
 8009f08:	681e      	ldr	r6, [r3, #0]
 8009f0a:	e002      	b.n	8009f12 <_printf_i+0xf2>
 8009f0c:	0646      	lsls	r6, r0, #25
 8009f0e:	d5fb      	bpl.n	8009f08 <_printf_i+0xe8>
 8009f10:	881e      	ldrh	r6, [r3, #0]
 8009f12:	4854      	ldr	r0, [pc, #336]	; (800a064 <_printf_i+0x244>)
 8009f14:	2f6f      	cmp	r7, #111	; 0x6f
 8009f16:	bf0c      	ite	eq
 8009f18:	2308      	moveq	r3, #8
 8009f1a:	230a      	movne	r3, #10
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f22:	6865      	ldr	r5, [r4, #4]
 8009f24:	60a5      	str	r5, [r4, #8]
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	bfa2      	ittt	ge
 8009f2a:	6821      	ldrge	r1, [r4, #0]
 8009f2c:	f021 0104 	bicge.w	r1, r1, #4
 8009f30:	6021      	strge	r1, [r4, #0]
 8009f32:	b90e      	cbnz	r6, 8009f38 <_printf_i+0x118>
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	d04d      	beq.n	8009fd4 <_printf_i+0x1b4>
 8009f38:	4615      	mov	r5, r2
 8009f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f42:	5dc7      	ldrb	r7, [r0, r7]
 8009f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f48:	4637      	mov	r7, r6
 8009f4a:	42bb      	cmp	r3, r7
 8009f4c:	460e      	mov	r6, r1
 8009f4e:	d9f4      	bls.n	8009f3a <_printf_i+0x11a>
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d10b      	bne.n	8009f6c <_printf_i+0x14c>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	07de      	lsls	r6, r3, #31
 8009f58:	d508      	bpl.n	8009f6c <_printf_i+0x14c>
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	4299      	cmp	r1, r3
 8009f60:	bfde      	ittt	le
 8009f62:	2330      	movle	r3, #48	; 0x30
 8009f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f6c:	1b52      	subs	r2, r2, r5
 8009f6e:	6122      	str	r2, [r4, #16]
 8009f70:	f8cd a000 	str.w	sl, [sp]
 8009f74:	464b      	mov	r3, r9
 8009f76:	aa03      	add	r2, sp, #12
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	f7ff fee2 	bl	8009d44 <_printf_common>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d14c      	bne.n	800a01e <_printf_i+0x1fe>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	b004      	add	sp, #16
 8009f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8e:	4835      	ldr	r0, [pc, #212]	; (800a064 <_printf_i+0x244>)
 8009f90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f94:	6829      	ldr	r1, [r5, #0]
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f9c:	6029      	str	r1, [r5, #0]
 8009f9e:	061d      	lsls	r5, r3, #24
 8009fa0:	d514      	bpl.n	8009fcc <_printf_i+0x1ac>
 8009fa2:	07df      	lsls	r7, r3, #31
 8009fa4:	bf44      	itt	mi
 8009fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8009faa:	6023      	strmi	r3, [r4, #0]
 8009fac:	b91e      	cbnz	r6, 8009fb6 <_printf_i+0x196>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f023 0320 	bic.w	r3, r3, #32
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	e7b0      	b.n	8009f1c <_printf_i+0xfc>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	f043 0320 	orr.w	r3, r3, #32
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	2378      	movs	r3, #120	; 0x78
 8009fc4:	4828      	ldr	r0, [pc, #160]	; (800a068 <_printf_i+0x248>)
 8009fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fca:	e7e3      	b.n	8009f94 <_printf_i+0x174>
 8009fcc:	0659      	lsls	r1, r3, #25
 8009fce:	bf48      	it	mi
 8009fd0:	b2b6      	uxthmi	r6, r6
 8009fd2:	e7e6      	b.n	8009fa2 <_printf_i+0x182>
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	e7bb      	b.n	8009f50 <_printf_i+0x130>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	6826      	ldr	r6, [r4, #0]
 8009fdc:	6961      	ldr	r1, [r4, #20]
 8009fde:	1d18      	adds	r0, r3, #4
 8009fe0:	6028      	str	r0, [r5, #0]
 8009fe2:	0635      	lsls	r5, r6, #24
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	d501      	bpl.n	8009fec <_printf_i+0x1cc>
 8009fe8:	6019      	str	r1, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <_printf_i+0x1d2>
 8009fec:	0670      	lsls	r0, r6, #25
 8009fee:	d5fb      	bpl.n	8009fe8 <_printf_i+0x1c8>
 8009ff0:	8019      	strh	r1, [r3, #0]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	e7ba      	b.n	8009f70 <_printf_i+0x150>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	602a      	str	r2, [r5, #0]
 800a000:	681d      	ldr	r5, [r3, #0]
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	2100      	movs	r1, #0
 800a006:	4628      	mov	r0, r5
 800a008:	f7f6 f8ea 	bl	80001e0 <memchr>
 800a00c:	b108      	cbz	r0, 800a012 <_printf_i+0x1f2>
 800a00e:	1b40      	subs	r0, r0, r5
 800a010:	6060      	str	r0, [r4, #4]
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	2300      	movs	r3, #0
 800a018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a01c:	e7a8      	b.n	8009f70 <_printf_i+0x150>
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	462a      	mov	r2, r5
 800a022:	4649      	mov	r1, r9
 800a024:	4640      	mov	r0, r8
 800a026:	47d0      	blx	sl
 800a028:	3001      	adds	r0, #1
 800a02a:	d0ab      	beq.n	8009f84 <_printf_i+0x164>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	079b      	lsls	r3, r3, #30
 800a030:	d413      	bmi.n	800a05a <_printf_i+0x23a>
 800a032:	68e0      	ldr	r0, [r4, #12]
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	4298      	cmp	r0, r3
 800a038:	bfb8      	it	lt
 800a03a:	4618      	movlt	r0, r3
 800a03c:	e7a4      	b.n	8009f88 <_printf_i+0x168>
 800a03e:	2301      	movs	r3, #1
 800a040:	4632      	mov	r2, r6
 800a042:	4649      	mov	r1, r9
 800a044:	4640      	mov	r0, r8
 800a046:	47d0      	blx	sl
 800a048:	3001      	adds	r0, #1
 800a04a:	d09b      	beq.n	8009f84 <_printf_i+0x164>
 800a04c:	3501      	adds	r5, #1
 800a04e:	68e3      	ldr	r3, [r4, #12]
 800a050:	9903      	ldr	r1, [sp, #12]
 800a052:	1a5b      	subs	r3, r3, r1
 800a054:	42ab      	cmp	r3, r5
 800a056:	dcf2      	bgt.n	800a03e <_printf_i+0x21e>
 800a058:	e7eb      	b.n	800a032 <_printf_i+0x212>
 800a05a:	2500      	movs	r5, #0
 800a05c:	f104 0619 	add.w	r6, r4, #25
 800a060:	e7f5      	b.n	800a04e <_printf_i+0x22e>
 800a062:	bf00      	nop
 800a064:	0800a445 	.word	0x0800a445
 800a068:	0800a456 	.word	0x0800a456

0800a06c <__sread>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	f000 f894 	bl	800a1a0 <_read_r>
 800a078:	2800      	cmp	r0, #0
 800a07a:	bfab      	itete	ge
 800a07c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a07e:	89a3      	ldrhlt	r3, [r4, #12]
 800a080:	181b      	addge	r3, r3, r0
 800a082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a086:	bfac      	ite	ge
 800a088:	6563      	strge	r3, [r4, #84]	; 0x54
 800a08a:	81a3      	strhlt	r3, [r4, #12]
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <__swrite>:
 800a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	461f      	mov	r7, r3
 800a094:	898b      	ldrh	r3, [r1, #12]
 800a096:	05db      	lsls	r3, r3, #23
 800a098:	4605      	mov	r5, r0
 800a09a:	460c      	mov	r4, r1
 800a09c:	4616      	mov	r6, r2
 800a09e:	d505      	bpl.n	800a0ac <__swrite+0x1e>
 800a0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f000 f868 	bl	800a17c <_lseek_r>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	463b      	mov	r3, r7
 800a0bc:	4628      	mov	r0, r5
 800a0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	f000 b817 	b.w	800a0f4 <_write_r>

0800a0c6 <__sseek>:
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ce:	f000 f855 	bl	800a17c <_lseek_r>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	bf15      	itete	ne
 800a0d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0e2:	81a3      	strheq	r3, [r4, #12]
 800a0e4:	bf18      	it	ne
 800a0e6:	81a3      	strhne	r3, [r4, #12]
 800a0e8:	bd10      	pop	{r4, pc}

0800a0ea <__sclose>:
 800a0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ee:	f000 b813 	b.w	800a118 <_close_r>
	...

0800a0f4 <_write_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_write_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f6 ffb4 	bl	8001070 <_write>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_write_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_write_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20003cd8 	.word	0x20003cd8

0800a118 <_close_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_close_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f7 fb67 	bl	80017f6 <_close>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_close_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_close_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	20003cd8 	.word	0x20003cd8

0800a138 <_fstat_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_fstat_r+0x20>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	f7f7 fb62 	bl	800180e <_fstat>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d102      	bne.n	800a154 <_fstat_r+0x1c>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	b103      	cbz	r3, 800a154 <_fstat_r+0x1c>
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	20003cd8 	.word	0x20003cd8

0800a15c <_isatty_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_isatty_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f7 fb61 	bl	800182e <_isatty>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_isatty_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_isatty_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20003cd8 	.word	0x20003cd8

0800a17c <_lseek_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4d07      	ldr	r5, [pc, #28]	; (800a19c <_lseek_r+0x20>)
 800a180:	4604      	mov	r4, r0
 800a182:	4608      	mov	r0, r1
 800a184:	4611      	mov	r1, r2
 800a186:	2200      	movs	r2, #0
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f7f7 fb5a 	bl	8001844 <_lseek>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_lseek_r+0x1e>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_lseek_r+0x1e>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20003cd8 	.word	0x20003cd8

0800a1a0 <_read_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d07      	ldr	r5, [pc, #28]	; (800a1c0 <_read_r+0x20>)
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	4608      	mov	r0, r1
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	602a      	str	r2, [r5, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f7f7 fb04 	bl	80017bc <_read>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_read_r+0x1e>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_read_r+0x1e>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20003cd8 	.word	0x20003cd8

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
