
I2S_RECORDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c1c  200000c0  0800a7b0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cdc  0800a7b0  00023cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a4e  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003162  00000000  00000000  00033b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00036ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f6ed  00000000  00000000  00038c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000464a  00000000  00000000  00048375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004c9bf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004b78  00000000  00000000  0004ca10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a43c 	.word	0x0800a43c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	0800a43c 	.word	0x0800a43c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sd_card_init>:
static uint32_t wav_file_size2;
static uint32_t wav_file_size3;
uint8_t channel = 1;

void sd_card_init()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	490c      	ldr	r1, [pc, #48]	; (80005bc <sd_card_init+0x38>)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <sd_card_init+0x3c>)
 800058e:	f007 ffed 	bl	800856c <f_mount>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <sd_card_init+0x40>)
 8000598:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <sd_card_init+0x40>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <sd_card_init+0x2c>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <sd_card_init+0x40>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <sd_card_init+0x44>)
 80005aa:	f009 f823 	bl	80095f4 <iprintf>
		while(1);
 80005ae:	e7fe      	b.n	80005ae <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005b0:	4806      	ldr	r0, [pc, #24]	; (80005cc <sd_card_init+0x48>)
 80005b2:	f009 f8a5 	bl	8009700 <puts>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20003c84 	.word	0x20003c84
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	200000dc 	.word	0x200000dc
 80005c8:	0800a454 	.word	0x0800a454
 80005cc:	0800a478 	.word	0x0800a478

080005d0 <start_recording>:

void start_recording(uint32_t frequency)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint32_t temp_number;
	uint32_t byte_rate = frequency * 2 * 2;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	617b      	str	r3, [r7, #20]

	wav_file_header[24] = (uint8_t)frequency;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b49      	ldr	r3, [pc, #292]	; (8000708 <start_recording+0x138>)
 80005e4:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(frequency >> 8);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b46      	ldr	r3, [pc, #280]	; (8000708 <start_recording+0x138>)
 80005ee:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(frequency >> 16);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	0c1b      	lsrs	r3, r3, #16
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b44      	ldr	r3, [pc, #272]	; (8000708 <start_recording+0x138>)
 80005f8:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(frequency >> 24);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	0e1b      	lsrs	r3, r3, #24
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <start_recording+0x138>)
 8000602:	76da      	strb	r2, [r3, #27]
	wav_file_header[28] = (uint8_t)byte_rate;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <start_recording+0x138>)
 800060a:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <start_recording+0x138>)
 8000614:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	0c1b      	lsrs	r3, r3, #16
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <start_recording+0x138>)
 800061e:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	0e1b      	lsrs	r3, r3, #24
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <start_recording+0x138>)
 8000628:	77da      	strb	r2, [r3, #31]

	uint16_t data_size = sizeof(wav_file_header);
 800062a:	232c      	movs	r3, #44	; 0x2c
 800062c:	827b      	strh	r3, [r7, #18]

	// creating a file
	sd_result = f_unlink (file_name1);
 800062e:	4837      	ldr	r0, [pc, #220]	; (800070c <start_recording+0x13c>)
 8000630:	f008 fdc6 	bl	80091c0 <f_unlink>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <start_recording+0x140>)
 800063a:	701a      	strb	r2, [r3, #0]
	sd_result = f_open(&wavFile1 ,file_name1, FA_WRITE|FA_CREATE_ALWAYS);
 800063c:	220a      	movs	r2, #10
 800063e:	4933      	ldr	r1, [pc, #204]	; (800070c <start_recording+0x13c>)
 8000640:	4834      	ldr	r0, [pc, #208]	; (8000714 <start_recording+0x144>)
 8000642:	f007 ffd9 	bl	80085f8 <f_open>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <start_recording+0x140>)
 800064c:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile1,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 800064e:	8a7a      	ldrh	r2, [r7, #18]
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	492c      	ldr	r1, [pc, #176]	; (8000708 <start_recording+0x138>)
 8000656:	482f      	ldr	r0, [pc, #188]	; (8000714 <start_recording+0x144>)
 8000658:	f008 f98c 	bl	8008974 <f_write>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <start_recording+0x140>)
 8000662:	701a      	strb	r2, [r3, #0]

	sd_result = f_unlink (file_name2);
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <start_recording+0x148>)
 8000666:	f008 fdab 	bl	80091c0 <f_unlink>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <start_recording+0x140>)
 8000670:	701a      	strb	r2, [r3, #0]
	sd_result = f_open(&wavFile2 ,file_name2, FA_WRITE|FA_CREATE_ALWAYS);
 8000672:	220a      	movs	r2, #10
 8000674:	4928      	ldr	r1, [pc, #160]	; (8000718 <start_recording+0x148>)
 8000676:	4829      	ldr	r0, [pc, #164]	; (800071c <start_recording+0x14c>)
 8000678:	f007 ffbe 	bl	80085f8 <f_open>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <start_recording+0x140>)
 8000682:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile2,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 8000684:	8a7a      	ldrh	r2, [r7, #18]
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	491f      	ldr	r1, [pc, #124]	; (8000708 <start_recording+0x138>)
 800068c:	4823      	ldr	r0, [pc, #140]	; (800071c <start_recording+0x14c>)
 800068e:	f008 f971 	bl	8008974 <f_write>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <start_recording+0x140>)
 8000698:	701a      	strb	r2, [r3, #0]

	sd_result = f_unlink (file_name3);
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <start_recording+0x150>)
 800069c:	f008 fd90 	bl	80091c0 <f_unlink>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <start_recording+0x140>)
 80006a6:	701a      	strb	r2, [r3, #0]
	sd_result = f_open(&wavFile3 ,file_name3, FA_WRITE|FA_CREATE_ALWAYS);
 80006a8:	220a      	movs	r2, #10
 80006aa:	491d      	ldr	r1, [pc, #116]	; (8000720 <start_recording+0x150>)
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <start_recording+0x154>)
 80006ae:	f007 ffa3 	bl	80085f8 <f_open>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <start_recording+0x140>)
 80006b8:	701a      	strb	r2, [r3, #0]
	sd_result = f_write(&wavFile3,(void *)wav_file_header, data_size,(UINT*)&temp_number);
 80006ba:	8a7a      	ldrh	r2, [r7, #18]
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4911      	ldr	r1, [pc, #68]	; (8000708 <start_recording+0x138>)
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <start_recording+0x154>)
 80006c4:	f008 f956 	bl	8008974 <f_write>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <start_recording+0x140>)
 80006ce:	701a      	strb	r2, [r3, #0]


	if(sd_result != 0)
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <start_recording+0x140>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <start_recording+0x116>
	{
		printf("error in creating a file: %d \n", sd_result);
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <start_recording+0x140>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <start_recording+0x158>)
 80006e0:	f008 ff88 	bl	80095f4 <iprintf>
		while(1);
 80006e4:	e7fe      	b.n	80006e4 <start_recording+0x114>
	}
	else
	{
		printf("succeeded in opening a file \n");
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <start_recording+0x15c>)
 80006e8:	f009 f80a 	bl	8009700 <puts>
	}
	wav_file_size1 = 0;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <start_recording+0x160>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
	wav_file_size2 = 0;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <start_recording+0x164>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	wav_file_size3 = 0;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <start_recording+0x168>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000
 800070c:	2000002c 	.word	0x2000002c
 8000710:	200000dc 	.word	0x200000dc
 8000714:	20000310 	.word	0x20000310
 8000718:	20000038 	.word	0x20000038
 800071c:	20000540 	.word	0x20000540
 8000720:	20000044 	.word	0x20000044
 8000724:	20000770 	.word	0x20000770
 8000728:	0800a49c 	.word	0x0800a49c
 800072c:	0800a4bc 	.word	0x0800a4bc
 8000730:	200009a0 	.word	0x200009a0
 8000734:	200009a4 	.word	0x200009a4
 8000738:	200009a8 	.word	0x200009a8

0800073c <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size, uint8_t channel)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
 8000748:	4613      	mov	r3, r2
 800074a:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800074c:	2120      	movs	r1, #32
 800074e:	4828      	ldr	r0, [pc, #160]	; (80007f0 <write2wave_file+0xb4>)
 8000750:	f002 f833 	bl	80027ba <HAL_GPIO_TogglePin>

	uint32_t temp_number;

	switch(channel)
 8000754:	787b      	ldrb	r3, [r7, #1]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d02a      	beq.n	80007b0 <write2wave_file+0x74>
 800075a:	2b03      	cmp	r3, #3
 800075c:	dc3a      	bgt.n	80007d4 <write2wave_file+0x98>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d002      	beq.n	8000768 <write2wave_file+0x2c>
 8000762:	2b02      	cmp	r3, #2
 8000764:	d012      	beq.n	800078c <write2wave_file+0x50>
 8000766:	e035      	b.n	80007d4 <write2wave_file+0x98>
	{
		case 1:
			sd_result = f_write(&wavFile1,(void *)data, data_size,(UINT*)&temp_number);
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <write2wave_file+0xb8>)
 8000772:	f008 f8ff 	bl	8008974 <f_write>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <write2wave_file+0xbc>)
 800077c:	701a      	strb	r2, [r3, #0]
			wav_file_size1 += data_size;
 800077e:	887a      	ldrh	r2, [r7, #2]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <write2wave_file+0xc0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <write2wave_file+0xc0>)
 8000788:	6013      	str	r3, [r2, #0]
			break;
 800078a:	e023      	b.n	80007d4 <write2wave_file+0x98>

		case 2:
			sd_result = f_write(&wavFile2,(void *)data, data_size,(UINT*)&temp_number);
 800078c:	887a      	ldrh	r2, [r7, #2]
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <write2wave_file+0xc4>)
 8000796:	f008 f8ed 	bl	8008974 <f_write>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <write2wave_file+0xbc>)
 80007a0:	701a      	strb	r2, [r3, #0]
			wav_file_size2 += data_size;
 80007a2:	887a      	ldrh	r2, [r7, #2]
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <write2wave_file+0xc8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <write2wave_file+0xc8>)
 80007ac:	6013      	str	r3, [r2, #0]
			break;
 80007ae:	e011      	b.n	80007d4 <write2wave_file+0x98>

		case 3:
			sd_result = f_write(&wavFile3,(void *)data, data_size,(UINT*)&temp_number);
 80007b0:	887a      	ldrh	r2, [r7, #2]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <write2wave_file+0xcc>)
 80007ba:	f008 f8db 	bl	8008974 <f_write>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <write2wave_file+0xbc>)
 80007c4:	701a      	strb	r2, [r3, #0]
			wav_file_size3 += data_size;
 80007c6:	887a      	ldrh	r2, [r7, #2]
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <write2wave_file+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <write2wave_file+0xd0>)
 80007d0:	6013      	str	r3, [r2, #0]
			break;
 80007d2:	bf00      	nop
	}

	if(sd_result != 0)
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <write2wave_file+0xbc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <write2wave_file+0xac>
	{
		printf("error in writing to the file: %d \n", sd_result);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <write2wave_file+0xbc>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <write2wave_file+0xd4>)
 80007e4:	f008 ff06 	bl	80095f4 <iprintf>
	}
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020000 	.word	0x40020000
 80007f4:	20000310 	.word	0x20000310
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	200009a0 	.word	0x200009a0
 8000800:	20000540 	.word	0x20000540
 8000804:	200009a4 	.word	0x200009a4
 8000808:	20000770 	.word	0x20000770
 800080c:	200009a8 	.word	0x200009a8
 8000810:	0800a4dc 	.word	0x0800a4dc

08000814 <stop_recording>:

void stop_recording()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size1 -= 8;
 800081a:	4b76      	ldr	r3, [pc, #472]	; (80009f4 <stop_recording+0x1e0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b08      	subs	r3, #8
 8000820:	4a74      	ldr	r2, [pc, #464]	; (80009f4 <stop_recording+0x1e0>)
 8000822:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size1;
 8000824:	4b73      	ldr	r3, [pc, #460]	; (80009f4 <stop_recording+0x1e0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <stop_recording+0x1e4>)
 800082c:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size1 >> 8);
 800082e:	4b71      	ldr	r3, [pc, #452]	; (80009f4 <stop_recording+0x1e0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <stop_recording+0x1e4>)
 8000838:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size1 >> 16);
 800083a:	4b6e      	ldr	r3, [pc, #440]	; (80009f4 <stop_recording+0x1e0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <stop_recording+0x1e4>)
 8000844:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size1 >> 24);
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <stop_recording+0x1e0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <stop_recording+0x1e4>)
 8000850:	71da      	strb	r2, [r3, #7]
	wav_file_size1 -= 36;
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <stop_recording+0x1e0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b24      	subs	r3, #36	; 0x24
 8000858:	4a66      	ldr	r2, [pc, #408]	; (80009f4 <stop_recording+0x1e0>)
 800085a:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size1;
 800085c:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <stop_recording+0x1e0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <stop_recording+0x1e4>)
 8000864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size1 >> 8);
 8000868:	4b62      	ldr	r3, [pc, #392]	; (80009f4 <stop_recording+0x1e0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <stop_recording+0x1e4>)
 8000872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size1 >> 16);
 8000876:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <stop_recording+0x1e0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <stop_recording+0x1e4>)
 8000880:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size1 >> 24);
 8000884:	4b5b      	ldr	r3, [pc, #364]	; (80009f4 <stop_recording+0x1e0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0e1b      	lsrs	r3, r3, #24
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <stop_recording+0x1e4>)
 800088e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile1, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	4859      	ldr	r0, [pc, #356]	; (80009fc <stop_recording+0x1e8>)
 8000896:	f008 fa8a 	bl	8008dae <f_lseek>
	f_write(&wavFile1,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	222c      	movs	r2, #44	; 0x2c
 800089e:	4956      	ldr	r1, [pc, #344]	; (80009f8 <stop_recording+0x1e4>)
 80008a0:	4856      	ldr	r0, [pc, #344]	; (80009fc <stop_recording+0x1e8>)
 80008a2:	f008 f867 	bl	8008974 <f_write>
	f_close(&wavFile1);
 80008a6:	4855      	ldr	r0, [pc, #340]	; (80009fc <stop_recording+0x1e8>)
 80008a8:	f008 fa57 	bl	8008d5a <f_close>

	wav_file_size2 -= 8;
 80008ac:	4b54      	ldr	r3, [pc, #336]	; (8000a00 <stop_recording+0x1ec>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3b08      	subs	r3, #8
 80008b2:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <stop_recording+0x1ec>)
 80008b4:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size2;
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <stop_recording+0x1ec>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <stop_recording+0x1e4>)
 80008be:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size2 >> 8);
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <stop_recording+0x1ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <stop_recording+0x1e4>)
 80008ca:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size2 >> 16);
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <stop_recording+0x1ec>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <stop_recording+0x1e4>)
 80008d6:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size2 >> 24);
 80008d8:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <stop_recording+0x1ec>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	0e1b      	lsrs	r3, r3, #24
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b45      	ldr	r3, [pc, #276]	; (80009f8 <stop_recording+0x1e4>)
 80008e2:	71da      	strb	r2, [r3, #7]
	wav_file_size2 -= 36;
 80008e4:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <stop_recording+0x1ec>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3b24      	subs	r3, #36	; 0x24
 80008ea:	4a45      	ldr	r2, [pc, #276]	; (8000a00 <stop_recording+0x1ec>)
 80008ec:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size2;
 80008ee:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <stop_recording+0x1ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <stop_recording+0x1e4>)
 80008f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size2 >> 8);
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <stop_recording+0x1ec>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <stop_recording+0x1e4>)
 8000904:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size2 >> 16);
 8000908:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <stop_recording+0x1ec>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <stop_recording+0x1e4>)
 8000912:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size2 >> 24);
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <stop_recording+0x1ec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	0e1b      	lsrs	r3, r3, #24
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <stop_recording+0x1e4>)
 8000920:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile2, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	4837      	ldr	r0, [pc, #220]	; (8000a04 <stop_recording+0x1f0>)
 8000928:	f008 fa41 	bl	8008dae <f_lseek>
	f_write(&wavFile2,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	222c      	movs	r2, #44	; 0x2c
 8000930:	4931      	ldr	r1, [pc, #196]	; (80009f8 <stop_recording+0x1e4>)
 8000932:	4834      	ldr	r0, [pc, #208]	; (8000a04 <stop_recording+0x1f0>)
 8000934:	f008 f81e 	bl	8008974 <f_write>
	f_close(&wavFile2);
 8000938:	4832      	ldr	r0, [pc, #200]	; (8000a04 <stop_recording+0x1f0>)
 800093a:	f008 fa0e 	bl	8008d5a <f_close>

	wav_file_size3 -= 8;
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <stop_recording+0x1f4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3b08      	subs	r3, #8
 8000944:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <stop_recording+0x1f4>)
 8000946:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size3;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <stop_recording+0x1f4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <stop_recording+0x1e4>)
 8000950:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size3 >> 8);
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <stop_recording+0x1f4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <stop_recording+0x1e4>)
 800095c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size3 >> 16);
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <stop_recording+0x1f4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	0c1b      	lsrs	r3, r3, #16
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <stop_recording+0x1e4>)
 8000968:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size3 >> 24);
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <stop_recording+0x1f4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <stop_recording+0x1e4>)
 8000974:	71da      	strb	r2, [r3, #7]
	wav_file_size3 -= 36;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <stop_recording+0x1f4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3b24      	subs	r3, #36	; 0x24
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <stop_recording+0x1f4>)
 800097e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size3;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <stop_recording+0x1f4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <stop_recording+0x1e4>)
 8000988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size3 >> 8);
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <stop_recording+0x1f4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <stop_recording+0x1e4>)
 8000996:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size3 >> 16);
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <stop_recording+0x1f4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <stop_recording+0x1e4>)
 80009a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size3 >> 24);
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <stop_recording+0x1f4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	0e1b      	lsrs	r3, r3, #24
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <stop_recording+0x1e4>)
 80009b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile3, 0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <stop_recording+0x1f8>)
 80009ba:	f008 f9f8 	bl	8008dae <f_lseek>
	f_write(&wavFile3,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	222c      	movs	r2, #44	; 0x2c
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <stop_recording+0x1e4>)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <stop_recording+0x1f8>)
 80009c6:	f007 ffd5 	bl	8008974 <f_write>
	f_close(&wavFile3);
 80009ca:	4810      	ldr	r0, [pc, #64]	; (8000a0c <stop_recording+0x1f8>)
 80009cc:	f008 f9c5 	bl	8008d5a <f_close>

	if(sd_result != 0)
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <stop_recording+0x1fc>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <stop_recording+0x1d2>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <stop_recording+0x1fc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <stop_recording+0x200>)
 80009e0:	f008 fe08 	bl	80095f4 <iprintf>
		while(1);
 80009e4:	e7fe      	b.n	80009e4 <stop_recording+0x1d0>
	}

	printf("closed the file \n");
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <stop_recording+0x204>)
 80009e8:	f008 fe8a 	bl	8009700 <puts>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200009a0 	.word	0x200009a0
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000310 	.word	0x20000310
 8000a00:	200009a4 	.word	0x200009a4
 8000a04:	20000540 	.word	0x20000540
 8000a08:	200009a8 	.word	0x200009a8
 8000a0c:	20000770 	.word	0x20000770
 8000a10:	200000dc 	.word	0x200000dc
 8000a14:	0800a500 	.word	0x0800a500
 8000a18:	0800a52c 	.word	0x0800a52c

08000a1c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a28:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d013      	beq.n	8000a5c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a38:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a3c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00b      	beq.n	8000a5c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a44:	e000      	b.n	8000a48 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a46:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f9      	beq.n	8000a46 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a52:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f000 ff7e 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f902 	bl	8000c7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a78:	f000 f968 	bl	8000d4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fa98 	bl	8000fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a80:	f000 fa2e 	bl	8000ee0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000a84:	f000 fa56 	bl	8000f34 <MX_DMA_Init>
  MX_FATFS_Init();
 8000a88:	f005 fe2c 	bl	80066e4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8000a8c:	f000 fa08 	bl	8000ea0 <MX_SDIO_SD_Init>
  MX_I2S3_Init();
 8000a90:	f000 f9aa 	bl	8000de8 <MX_I2S3_Init>
  MX_I2S2_Init();
 8000a94:	f000 f97a 	bl	8000d8c <MX_I2S2_Init>
  MX_I2S4_Init();
 8000a98:	f000 f9d4 	bl	8000e44 <MX_I2S4_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 8000a9c:	4865      	ldr	r0, [pc, #404]	; (8000c34 <main+0x1c8>)
 8000a9e:	f002 f8bb 	bl	8002c18 <HAL_I2S_DMAStop>
  //HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
  HAL_Delay(500);
 8000aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa6:	f000 ffd5 	bl	8001a54 <HAL_Delay>
  sd_card_init();
 8000aaa:	f7ff fd6b 	bl	8000584 <sd_card_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(button_flag)
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <main+0x1cc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d044      	beq.n	8000b42 <main+0xd6>
		  {

			  if(start_stop_recording)
 8000ab8:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <main+0x1d0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d023      	beq.n	8000b0a <main+0x9e>
			  {
				  HAL_I2S_DMAStop(&hi2s2);
 8000ac2:	485c      	ldr	r0, [pc, #368]	; (8000c34 <main+0x1c8>)
 8000ac4:	f002 f8a8 	bl	8002c18 <HAL_I2S_DMAStop>
				  HAL_I2S_DMAStop(&hi2s3);
 8000ac8:	485d      	ldr	r0, [pc, #372]	; (8000c40 <main+0x1d4>)
 8000aca:	f002 f8a5 	bl	8002c18 <HAL_I2S_DMAStop>
				  HAL_I2S_DMAStop(&hi2s4);
 8000ace:	485d      	ldr	r0, [pc, #372]	; (8000c44 <main+0x1d8>)
 8000ad0:	f002 f8a2 	bl	8002c18 <HAL_I2S_DMAStop>
				  start_stop_recording = 0;
 8000ad4:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <main+0x1d0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
				  stop_recording();
 8000ada:	f7ff fe9b 	bl	8000814 <stop_recording>
				  half_i2s1 = 0;
 8000ade:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <main+0x1dc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
				  full_i2s1 = 0;
 8000ae4:	4b59      	ldr	r3, [pc, #356]	; (8000c4c <main+0x1e0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
				  half_i2s2 = 0;
 8000aea:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <main+0x1e4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
				  full_i2s2 = 0;
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <main+0x1e8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				  half_i2s3 = 0;
 8000af6:	4b58      	ldr	r3, [pc, #352]	; (8000c58 <main+0x1ec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
				  full_i2s3 = 0;
 8000afc:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <main+0x1f0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
				  printf("stop recording \n");
 8000b02:	4857      	ldr	r0, [pc, #348]	; (8000c60 <main+0x1f4>)
 8000b04:	f008 fdfc 	bl	8009700 <puts>
 8000b08:	e018      	b.n	8000b3c <main+0xd0>
			  }
			  else
			  {
				  start_stop_recording = 1;
 8000b0a:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <main+0x1d0>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
				  start_recording(I2S_AUDIOFREQ_32K);
 8000b10:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000b14:	f7ff fd5c 	bl	80005d0 <start_recording>
				  //printf("start_recording %d and %d\n", half_i2s, full_i2s,1);
				  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s1, sizeof(data_i2s1)/2);
 8000b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1c:	4951      	ldr	r1, [pc, #324]	; (8000c64 <main+0x1f8>)
 8000b1e:	4845      	ldr	r0, [pc, #276]	; (8000c34 <main+0x1c8>)
 8000b20:	f001 ffbe 	bl	8002aa0 <HAL_I2S_Receive_DMA>
				  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)data_i2s2, sizeof(data_i2s2)/2);
 8000b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b28:	494f      	ldr	r1, [pc, #316]	; (8000c68 <main+0x1fc>)
 8000b2a:	4845      	ldr	r0, [pc, #276]	; (8000c40 <main+0x1d4>)
 8000b2c:	f001 ffb8 	bl	8002aa0 <HAL_I2S_Receive_DMA>
				  HAL_I2S_Receive_DMA(&hi2s4, (uint16_t *)data_i2s3, sizeof(data_i2s3)/2);
 8000b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b34:	494d      	ldr	r1, [pc, #308]	; (8000c6c <main+0x200>)
 8000b36:	4843      	ldr	r0, [pc, #268]	; (8000c44 <main+0x1d8>)
 8000b38:	f001 ffb2 	bl	8002aa0 <HAL_I2S_Receive_DMA>

			  }
			  button_flag = 0;
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <main+0x1cc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //recording channel 1
	  if(start_stop_recording == 1 && half_i2s1 == 1)
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <main+0x1d0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10d      	bne.n	8000b68 <main+0xfc>
 8000b4c:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <main+0x1dc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d108      	bne.n	8000b68 <main+0xfc>
	  {
		  write2wave_file(((uint8_t*)data_i2s1),	 WAV_WRITE_SAMPLE_COUNT,1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5c:	4841      	ldr	r0, [pc, #260]	; (8000c64 <main+0x1f8>)
 8000b5e:	f7ff fded 	bl	800073c <write2wave_file>
		  half_i2s1 = 0;
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <main+0x1dc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s1 == 1)
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <main+0x1d0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10e      	bne.n	8000b90 <main+0x124>
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <main+0x1e0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d109      	bne.n	8000b90 <main+0x124>
	  {
		  write2wave_file(((uint8_t*)data_i2s1) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,1);
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <main+0x204>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdd9 	bl	800073c <write2wave_file>
		  full_i2s1 = 0;
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <main+0x1e0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	  }

	  //recording channel 2
	  if(start_stop_recording == 1 && half_i2s2 == 1)
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <main+0x1d0>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10d      	bne.n	8000bb6 <main+0x14a>
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <main+0x1e4>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <main+0x14a>
	  {
		  write2wave_file(((uint8_t*)data_i2s2),	 WAV_WRITE_SAMPLE_COUNT,2);
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <main+0x1fc>)
 8000bac:	f7ff fdc6 	bl	800073c <write2wave_file>
		  half_i2s2 = 0;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <main+0x1e4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s2 == 1)
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <main+0x1d0>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10e      	bne.n	8000bde <main+0x172>
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <main+0x1e8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d109      	bne.n	8000bde <main+0x172>
	  {
		  write2wave_file(((uint8_t*)data_i2s2) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,2);
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <main+0x208>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fdb2 	bl	800073c <write2wave_file>
		  full_i2s2 = 0;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <main+0x1e8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	  }

	  //recording channel 3
	  if(start_stop_recording == 1 && half_i2s3 == 1)
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <main+0x1d0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d10d      	bne.n	8000c04 <main+0x198>
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <main+0x1ec>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d108      	bne.n	8000c04 <main+0x198>
	  {
		  write2wave_file(((uint8_t*)data_i2s3),	 WAV_WRITE_SAMPLE_COUNT,3);
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <main+0x200>)
 8000bfa:	f7ff fd9f 	bl	800073c <write2wave_file>
		  half_i2s3 = 0;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <main+0x1ec>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	  }
	  if(start_stop_recording == 1 && full_i2s3 == 1)
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <main+0x1d0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	f47f af4f 	bne.w	8000aae <main+0x42>
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <main+0x1f0>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	f47f af49 	bne.w	8000aae <main+0x42>
	  {
		  write2wave_file(((uint8_t*)data_i2s3) + WAV_WRITE_SAMPLE_COUNT, WAV_WRITE_SAMPLE_COUNT,3);
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <main+0x20c>)
 8000c1e:	2203      	movs	r2, #3
 8000c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fd89 	bl	800073c <write2wave_file>
		  full_i2s3 = 0;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <main+0x1f0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 8000c30:	e73d      	b.n	8000aae <main+0x42>
 8000c32:	bf00      	nop
 8000c34:	200009ac 	.word	0x200009ac
 8000c38:	20000c6c 	.word	0x20000c6c
 8000c3c:	20000c6d 	.word	0x20000c6d
 8000c40:	200009f4 	.word	0x200009f4
 8000c44:	20000a3c 	.word	0x20000a3c
 8000c48:	20003c70 	.word	0x20003c70
 8000c4c:	20003c71 	.word	0x20003c71
 8000c50:	20003c72 	.word	0x20003c72
 8000c54:	20003c73 	.word	0x20003c73
 8000c58:	20003c74 	.word	0x20003c74
 8000c5c:	20003c75 	.word	0x20003c75
 8000c60:	0800a540 	.word	0x0800a540
 8000c64:	20000c70 	.word	0x20000c70
 8000c68:	20001c70 	.word	0x20001c70
 8000c6c:	20002c70 	.word	0x20002c70
 8000c70:	20001470 	.word	0x20001470
 8000c74:	20002470 	.word	0x20002470
 8000c78:	20003470 	.word	0x20003470

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 fbca 	bl	8009424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <SystemClock_Config+0xc8>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <SystemClock_Config+0xc8>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <SystemClock_Config+0xc8>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <SystemClock_Config+0xcc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cec:	2308      	movs	r3, #8
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cf0:	2360      	movs	r3, #96	; 0x60
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fd47 	bl	8003794 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d0c:	f000 fa5e 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 ffa9 	bl	8003c84 <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d38:	f000 fa48 	bl	80011cc <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3750      	adds	r7, #80	; 0x50
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d62:	2301      	movs	r3, #1
 8000d64:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d66:	23c0      	movs	r3, #192	; 0xc0
 8000d68:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 f9a5 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d80:	f000 fa24 	bl	80011cc <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <MX_I2S2_Init+0x58>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000d98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000db2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000db6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_I2S2_Init+0x54>)
 8000dcc:	f001 fd28 	bl	8002820 <HAL_I2S_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000dd6:	f000 f9f9 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200009ac 	.word	0x200009ac
 8000de4:	40003800 	.word	0x40003800

08000de8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <MX_I2S3_Init+0x58>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000df4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000df8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e0e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e12:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_I2S3_Init+0x54>)
 8000e28:	f001 fcfa 	bl	8002820 <HAL_I2S_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e32:	f000 f9cb 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200009f4 	.word	0x200009f4
 8000e40:	40003c00 	.word	0x40003c00

08000e44 <MX_I2S4_Init>:
  * @brief I2S4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S4_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S4_Init 0 */

  /* USER CODE BEGIN I2S4_Init 1 */

  /* USER CODE END I2S4_Init 1 */
  hi2s4.Instance = SPI4;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <MX_I2S4_Init+0x58>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2s4.Init.Mode = I2S_MODE_MASTER_RX;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e50:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e54:	605a      	str	r2, [r3, #4]
  hi2s4.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hi2s4.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	60da      	str	r2, [r3, #12]
  hi2s4.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hi2s4.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e6a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e6e:	615a      	str	r2, [r3, #20]
  hi2s4.Init.CPOL = I2S_CPOL_LOW;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hi2s4.Init.ClockSource = I2S_CLOCK_PLL;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hi2s4.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s4) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_I2S4_Init+0x54>)
 8000e84:	f001 fccc 	bl	8002820 <HAL_I2S_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2S4_Init+0x4e>
  {
    Error_Handler();
 8000e8e:	f000 f99d 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S4_Init 2 */

  /* USER CODE END I2S4_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000a3c 	.word	0x20000a3c
 8000e9c:	40013400 	.word	0x40013400

08000ea0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <MX_SDIO_SD_Init+0x3c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eca:	2208      	movs	r2, #8
 8000ecc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000ba4 	.word	0x20000ba4
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART2_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART2_UART_Init+0x4c>)
 8000f18:	f004 fbaf 	bl	800567a <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 f953 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000c28 	.word	0x20000c28
 8000f30:	40004400 	.word	0x40004400

08000f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_DMA_Init+0x78>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <MX_DMA_Init+0x78>)
 8000f44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_DMA_Init+0x78>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_DMA_Init+0x78>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <MX_DMA_Init+0x78>)
 8000f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_DMA_Init+0x78>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	200b      	movs	r0, #11
 8000f78:	f000 fe6b 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f7c:	200b      	movs	r0, #11
 8000f7e:	f000 fe84 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	200e      	movs	r0, #14
 8000f88:	f000 fe63 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f8c:	200e      	movs	r0, #14
 8000f8e:	f000 fe7c 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2038      	movs	r0, #56	; 0x38
 8000f98:	f000 fe5b 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f9c:	2038      	movs	r0, #56	; 0x38
 8000f9e:	f000 fe74 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a30      	ldr	r2, [pc, #192]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_GPIO_Init+0xe0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_GPIO_Init+0xe0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a22      	ldr	r2, [pc, #136]	; (8001090 <MX_GPIO_Init+0xe0>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_GPIO_Init+0xe0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_GPIO_Init+0xe0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_GPIO_Init+0xe0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_GPIO_Init+0xe0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	4816      	ldr	r0, [pc, #88]	; (8001094 <MX_GPIO_Init+0xe4>)
 800103c:	f001 fba4 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_GPIO_Init+0xe8>)
 8001058:	f001 fa12 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800105c:	2320      	movs	r3, #32
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4808      	ldr	r0, [pc, #32]	; (8001094 <MX_GPIO_Init+0xe4>)
 8001074:	f001 fa04 	bl	8002480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2028      	movs	r0, #40	; 0x28
 800107e:	f000 fde8 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001082:	2028      	movs	r0, #40	; 0x28
 8001084:	f000 fe01 	bl	8001c8a <HAL_NVIC_EnableIRQ>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e009      	b.n	80010c2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	60ba      	str	r2, [r7, #8]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fcb0 	bl	8000a1c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbf1      	blt.n	80010ae <_write+0x12>
  }
  return len;
 80010ca:	687b      	ldr	r3, [r7, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_I2S_RxCpltCallback>:

//	l,r,l,r,l,
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(hi2s->Instance == hi2s2.Instance)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_I2S_RxCpltCallback+0x50>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d103      	bne.n	80010f0 <HAL_I2S_RxCpltCallback+0x1c>
	{
		full_i2s1 = 1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_I2S_RxCpltCallback+0x54>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	else if(hi2s->Instance == hi2s4.Instance)
	{
		full_i2s3 = 1;
	}

}
 80010ee:	e012      	b.n	8001116 <HAL_I2S_RxCpltCallback+0x42>
	else if(hi2s->Instance == hi2s3.Instance)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_I2S_RxCpltCallback+0x58>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d103      	bne.n	8001104 <HAL_I2S_RxCpltCallback+0x30>
		full_i2s2 = 1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_I2S_RxCpltCallback+0x5c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
}
 8001102:	e008      	b.n	8001116 <HAL_I2S_RxCpltCallback+0x42>
	else if(hi2s->Instance == hi2s4.Instance)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_I2S_RxCpltCallback+0x60>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d102      	bne.n	8001116 <HAL_I2S_RxCpltCallback+0x42>
		full_i2s3 = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2S_RxCpltCallback+0x64>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200009ac 	.word	0x200009ac
 8001128:	20003c71 	.word	0x20003c71
 800112c:	200009f4 	.word	0x200009f4
 8001130:	20003c73 	.word	0x20003c73
 8001134:	20000a3c 	.word	0x20000a3c
 8001138:	20003c75 	.word	0x20003c75

0800113c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(hi2s->Instance == hi2s2.Instance)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_I2S_RxHalfCpltCallback+0x50>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d103      	bne.n	8001158 <HAL_I2S_RxHalfCpltCallback+0x1c>
	{
		half_i2s1 = 1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_I2S_RxHalfCpltCallback+0x54>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2s->Instance == hi2s4.Instance)
	{
		half_i2s3 = 1;
	}
}
 8001156:	e012      	b.n	800117e <HAL_I2S_RxHalfCpltCallback+0x42>
	else if(hi2s->Instance == hi2s3.Instance)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_I2S_RxHalfCpltCallback+0x58>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d103      	bne.n	800116c <HAL_I2S_RxHalfCpltCallback+0x30>
		half_i2s2 = 1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_I2S_RxHalfCpltCallback+0x5c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	e008      	b.n	800117e <HAL_I2S_RxHalfCpltCallback+0x42>
	else if(hi2s->Instance == hi2s4.Instance)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_I2S_RxHalfCpltCallback+0x60>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d102      	bne.n	800117e <HAL_I2S_RxHalfCpltCallback+0x42>
		half_i2s3 = 1;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_I2S_RxHalfCpltCallback+0x64>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200009ac 	.word	0x200009ac
 8001190:	20003c70 	.word	0x20003c70
 8001194:	200009f4 	.word	0x200009f4
 8001198:	20003c72 	.word	0x20003c72
 800119c:	20000a3c 	.word	0x20000a3c
 80011a0:	20003c74 	.word	0x20003c74

080011a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b4:	d102      	bne.n	80011bc <HAL_GPIO_EXTI_Callback+0x18>
	{
		button_flag = 1;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x24>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
	}
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000c6c 	.word	0x20000c6c

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001216:	2007      	movs	r0, #7
 8001218:	f000 fd10 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a80      	ldr	r2, [pc, #512]	; (8001448 <HAL_I2S_MspInit+0x220>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d17b      	bne.n	8001342 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	4b7f      	ldr	r3, [pc, #508]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_I2S_MspInit+0x224>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <HAL_I2S_MspInit+0x224>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b75      	ldr	r3, [pc, #468]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a70      	ldr	r2, [pc, #448]	; (800144c <HAL_I2S_MspInit+0x224>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	6a3b      	ldr	r3, [r7, #32]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800129e:	2308      	movs	r3, #8
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ae:	2305      	movs	r3, #5
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4865      	ldr	r0, [pc, #404]	; (8001450 <HAL_I2S_MspInit+0x228>)
 80012ba:	f001 f8e1 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d0:	2305      	movs	r3, #5
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	485e      	ldr	r0, [pc, #376]	; (8001454 <HAL_I2S_MspInit+0x22c>)
 80012dc:	f001 f8d0 	bl	8002480 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80012e0:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_I2S_MspInit+0x230>)
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_I2S_MspInit+0x234>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_I2S_MspInit+0x230>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ec:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_I2S_MspInit+0x230>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f2:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_I2S_MspInit+0x230>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_I2S_MspInit+0x230>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001300:	4b55      	ldr	r3, [pc, #340]	; (8001458 <HAL_I2S_MspInit+0x230>)
 8001302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001306:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_I2S_MspInit+0x230>)
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001310:	4b51      	ldr	r3, [pc, #324]	; (8001458 <HAL_I2S_MspInit+0x230>)
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <HAL_I2S_MspInit+0x230>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <HAL_I2S_MspInit+0x230>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001324:	484c      	ldr	r0, [pc, #304]	; (8001458 <HAL_I2S_MspInit+0x230>)
 8001326:	f000 fccb 	bl	8001cc0 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8001330:	f7ff ff4c 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_I2S_MspInit+0x230>)
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_I2S_MspInit+0x230>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001340:	e117      	b.n	8001572 <HAL_I2S_MspInit+0x34a>
  else if(hi2s->Instance==SPI3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a46      	ldr	r2, [pc, #280]	; (8001460 <HAL_I2S_MspInit+0x238>)
 8001348:	4293      	cmp	r3, r2
 800134a:	f040 8091 	bne.w	8001470 <HAL_I2S_MspInit+0x248>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_I2S_MspInit+0x224>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_I2S_MspInit+0x224>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_I2S_MspInit+0x224>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a2:	2310      	movs	r3, #16
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b2:	2306      	movs	r3, #6
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ba:	4619      	mov	r1, r3
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <HAL_I2S_MspInit+0x23c>)
 80013be:	f001 f85f 	bl	8002480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80013c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d4:	2306      	movs	r3, #6
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013dc:	4619      	mov	r1, r3
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <HAL_I2S_MspInit+0x228>)
 80013e0:	f001 f84e 	bl	8002480 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_I2S_MspInit+0x240>)
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_I2S_MspInit+0x244>)
 80013e8:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_I2S_MspInit+0x240>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_I2S_MspInit+0x240>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_I2S_MspInit+0x240>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_I2S_MspInit+0x240>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001402:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_I2S_MspInit+0x240>)
 8001406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_I2S_MspInit+0x240>)
 800140e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001412:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_I2S_MspInit+0x240>)
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_I2S_MspInit+0x240>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_I2S_MspInit+0x240>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <HAL_I2S_MspInit+0x240>)
 800142a:	f000 fc49 	bl	8001cc0 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2S_MspInit+0x210>
      Error_Handler();
 8001434:	f7ff feca 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_I2S_MspInit+0x240>)
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_I2S_MspInit+0x240>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001444:	e095      	b.n	8001572 <HAL_I2S_MspInit+0x34a>
 8001446:	bf00      	nop
 8001448:	40003800 	.word	0x40003800
 800144c:	40023800 	.word	0x40023800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020400 	.word	0x40020400
 8001458:	20000a84 	.word	0x20000a84
 800145c:	40026058 	.word	0x40026058
 8001460:	40003c00 	.word	0x40003c00
 8001464:	40020000 	.word	0x40020000
 8001468:	20000ae4 	.word	0x20000ae4
 800146c:	40026010 	.word	0x40026010
  else if(hi2s->Instance==SPI4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a41      	ldr	r2, [pc, #260]	; (800157c <HAL_I2S_MspInit+0x354>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d17b      	bne.n	8001572 <HAL_I2S_MspInit+0x34a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_I2S_MspInit+0x358>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_I2S_MspInit+0x358>)
 8001484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_I2S_MspInit+0x358>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_I2S_MspInit+0x358>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_I2S_MspInit+0x358>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_I2S_MspInit+0x358>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_I2S_MspInit+0x358>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_I2S_MspInit+0x358>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_I2S_MspInit+0x358>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014de:	2305      	movs	r3, #5
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4826      	ldr	r0, [pc, #152]	; (8001584 <HAL_I2S_MspInit+0x35c>)
 80014ea:	f000 ffc9 	bl	8002480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001500:	2306      	movs	r3, #6
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	4619      	mov	r1, r3
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <HAL_I2S_MspInit+0x360>)
 800150c:	f000 ffb8 	bl	8002480 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001512:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_I2S_MspInit+0x368>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001518:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800151c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_I2S_MspInit+0x364>)
 800152c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001530:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001538:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_I2S_MspInit+0x364>)
 800153c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001540:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001548:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_I2S_MspInit+0x364>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <HAL_I2S_MspInit+0x364>)
 8001558:	f000 fbb2 	bl	8001cc0 <HAL_DMA_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2S_MspInit+0x33e>
      Error_Handler();
 8001562:	f7ff fe33 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi4_rx);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_I2S_MspInit+0x364>)
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_I2S_MspInit+0x364>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001572:	bf00      	nop
 8001574:	3740      	adds	r7, #64	; 0x40
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40013400 	.word	0x40013400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	20000b44 	.word	0x20000b44
 8001590:	40026410 	.word	0x40026410

08001594 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_SD_MspInit+0x100>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d16a      	bne.n	800168c <HAL_SD_MspInit+0xf8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a36      	ldr	r2, [pc, #216]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_SD_MspInit+0x104>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_SD_MspInit+0x104>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_SD_MspInit+0x104>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_SD_MspInit+0x104>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_SD_MspInit+0x104>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001626:	f44f 7310 	mov.w	r3, #576	; 0x240
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001638:	230c      	movs	r3, #12
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <HAL_SD_MspInit+0x108>)
 8001644:	f000 ff1c 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	2301      	movs	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800165a:	230c      	movs	r3, #12
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	480e      	ldr	r0, [pc, #56]	; (80016a0 <HAL_SD_MspInit+0x10c>)
 8001666:	f000 ff0b 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800166a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001674:	2301      	movs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800167c:	230c      	movs	r3, #12
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_SD_MspInit+0x110>)
 8001688:	f000 fefa 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_UART_MspInit+0x84>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12b      	bne.n	8001722 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_UART_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001702:	230c      	movs	r3, #12
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001712:	2307      	movs	r3, #7
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_UART_MspInit+0x8c>)
 800171e:	f000 feaf 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40004400 	.word	0x40004400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>
	...

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4801      	ldr	r0, [pc, #4]	; (8001750 <HardFault_Handler+0x10>)
 800174a:	f001 f81d 	bl	8002788 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0xe>
 8001750:	40020000 	.word	0x40020000

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f93e 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream0_IRQHandler+0x10>)
 80017a2:	f000 fc03 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000ae4 	.word	0x20000ae4

080017b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Stream3_IRQHandler+0x10>)
 80017b6:	f000 fbf9 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000a84 	.word	0x20000a84

080017c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017cc:	f001 f810 	bl	80027f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA2_Stream0_IRQHandler+0x10>)
 80017da:	f000 fbe7 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000b44 	.word	0x20000b44

080017e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e00a      	b.n	8001810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fa:	f3af 8000 	nop.w
 80017fe:	4601      	mov	r1, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf0      	blt.n	80017fa <_read+0x12>
	}

return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	605a      	str	r2, [r3, #4]
	return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f007 fd88 	bl	80093d0 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20003c78 	.word	0x20003c78
 80018f4:	20003ce0 	.word	0x20003ce0

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001922:	490e      	ldr	r1, [pc, #56]	; (800195c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001938:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001946:	f7ff ffd7 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f007 fd47 	bl	80093dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7ff f88d 	bl	8000a6c <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001960:	0800a6f0 	.word	0x0800a6f0
  ldr r2, =_sbss
 8001964:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001968:	20003cdc 	.word	0x20003cdc

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_Init+0x40>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_Init+0x40>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x40>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f000 f94f 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f808 	bl	80019b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fc18 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x54>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f967 	bl	8001ca6 <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f000 f92f 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_InitTick+0x5c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000050 	.word	0x20000050
 8001a0c:	20000058 	.word	0x20000058
 8001a10:	20000054 	.word	0x20000054

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000058 	.word	0x20000058
 8001a38:	20003c7c 	.word	0x20003c7c

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20003c7c 	.word	0x20003c7c

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000058 	.word	0x20000058

08001a9c <__NVIC_SetPriorityGrouping>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff feb6 	bl	8001a3c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e099      	b.n	8001e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fe9d 	bl	8001a3c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d908      	bls.n	8001d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e078      	b.n	8001e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e8      	bne.n	8001cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <HAL_DMA_Init+0x158>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4313      	orrs	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d117      	bne.n	8001de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fadf 	bl	8002388 <DMA_CheckFifoParam>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dde:	2301      	movs	r3, #1
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa96 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	f010803f 	.word	0xf010803f

08001e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Start_IT+0x26>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e040      	b.n	8001ec4 <HAL_DMA_Start_IT+0xa8>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d12f      	bne.n	8001eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fa28 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0216 	orr.w	r2, r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e005      	b.n	8001ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eda:	f7ff fdaf 	bl	8001a3c <HAL_GetTick>
 8001ede:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d008      	beq.n	8001efe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e052      	b.n	8001fa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0216 	bic.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <HAL_DMA_Abort+0x62>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0208 	bic.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4e:	e013      	b.n	8001f78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f50:	f7ff fd74 	bl	8001a3c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d90c      	bls.n	8001f78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2220      	movs	r2, #32
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e015      	b.n	8001fa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e4      	bne.n	8001f50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	223f      	movs	r2, #63	; 0x3f
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_DMA_IRQHandler+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8e      	ldr	r2, [pc, #568]	; (80021f8 <HAL_DMA_IRQHandler+0x24c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808f 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e079      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02c      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
 80021f2:	bf00      	nop
 80021f4:	20000050 	.word	0x20000050
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d307      	bcc.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f2      	bne.n	8002278 <HAL_DMA_IRQHandler+0x2cc>
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d909      	bls.n	800235e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
 800235c:	e007      	b.n	800236e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	0800a5ac 	.word	0x0800a5ac

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d856      	bhi.n	8002456 <DMA_CheckFifoParam+0xce>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002457 	.word	0x08002457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d046      	beq.n	800245a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e043      	b.n	800245a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023da:	d140      	bne.n	800245e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03d      	b.n	800245e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d837      	bhi.n	8002462 <DMA_CheckFifoParam+0xda>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e030      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e022      	b.n	8002466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01c      	b.n	800246a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d903      	bls.n	800243e <DMA_CheckFifoParam+0xb6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243c:	e018      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e015      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e00b      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002456:	bf00      	nop
 8002458:	e00a      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e008      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e006      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e004      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;   
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
    }
  } 
  
  return status; 
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e159      	b.n	8002750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8148 	bne.w	800274a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a2 	beq.w	800274a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b54      	ldr	r3, [pc, #336]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_GPIO_Init+0x2ec>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a49      	ldr	r2, [pc, #292]	; (8002770 <HAL_GPIO_Init+0x2f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x202>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2f4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x1fe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x1fa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_GPIO_Init+0x2fc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_GPIO_Init+0x300>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x1f2>
 800266e:	2304      	movs	r3, #4
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002672:	2307      	movs	r3, #7
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x2ec>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1a      	ldr	r2, [pc, #104]	; (8002784 <HAL_GPIO_Init+0x304>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_GPIO_Init+0x304>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_GPIO_Init+0x304>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f aea2 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	041a      	lsls	r2, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	400b      	ands	r3, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fcc8 	bl	80011a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e128      	b.n	8002a84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a90      	ldr	r2, [pc, #576]	; (8002a8c <HAL_I2S_Init+0x26c>)
 800284a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe fceb 	bl	8001228 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002868:	f023 030f 	bic.w	r3, r3, #15
 800286c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2202      	movs	r2, #2
 8002874:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d060      	beq.n	8002940 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002886:	2310      	movs	r3, #16
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e001      	b.n	8002890 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b20      	cmp	r3, #32
 8002896:	d802      	bhi.n	800289e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800289e:	2001      	movs	r0, #1
 80028a0:	f001 fd00 	bl	80042a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ae:	d125      	bne.n	80028fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	3305      	adds	r3, #5
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e01f      	b.n	800291a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	3305      	adds	r3, #5
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	e00e      	b.n	800291a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fbb2 f2f3 	udiv	r2, r2, r3
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	3305      	adds	r3, #5
 8002918:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_I2S_Init+0x270>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	08db      	lsrs	r3, r3, #3
 8002924:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e003      	b.n	8002948 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002940:	2302      	movs	r3, #2
 8002942:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d902      	bls.n	8002954 <HAL_I2S_Init+0x134>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d907      	bls.n	8002964 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e08f      	b.n	8002a84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	ea42 0103 	orr.w	r1, r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	430a      	orrs	r2, r1
 8002976:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002982:	f023 030f 	bic.w	r3, r3, #15
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6851      	ldr	r1, [r2, #4]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68d2      	ldr	r2, [r2, #12]
 8002994:	4311      	orrs	r1, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6992      	ldr	r2, [r2, #24]
 800299a:	430a      	orrs	r2, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d161      	bne.n	8002a74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a38      	ldr	r2, [pc, #224]	; (8002a94 <HAL_I2S_Init+0x274>)
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a37      	ldr	r2, [pc, #220]	; (8002a98 <HAL_I2S_Init+0x278>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_I2S_Init+0x1a4>
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_I2S_Init+0x27c>)
 80029c2:	e001      	b.n	80029c8 <HAL_I2S_Init+0x1a8>
 80029c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4932      	ldr	r1, [pc, #200]	; (8002a98 <HAL_I2S_Init+0x278>)
 80029d0:	428a      	cmp	r2, r1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2S_Init+0x1b8>
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_I2S_Init+0x27c>)
 80029d6:	e001      	b.n	80029dc <HAL_I2S_Init+0x1bc>
 80029d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80029dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029e0:	f023 030f 	bic.w	r3, r3, #15
 80029e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_I2S_Init+0x278>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_I2S_Init+0x1d4>
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_I2S_Init+0x27c>)
 80029f2:	e001      	b.n	80029f8 <HAL_I2S_Init+0x1d8>
 80029f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f8:	2202      	movs	r2, #2
 80029fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_I2S_Init+0x278>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_I2S_Init+0x1ea>
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_I2S_Init+0x27c>)
 8002a08:	e001      	b.n	8002a0e <HAL_I2S_Init+0x1ee>
 8002a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1a:	d003      	beq.n	8002a24 <HAL_I2S_Init+0x204>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e001      	b.n	8002a30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_I2S_Init+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_I2S_Init+0x24c>
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_I2S_Init+0x27c>)
 8002a6a:	e001      	b.n	8002a70 <HAL_I2S_Init+0x250>
 8002a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a70:	897a      	ldrh	r2, [r7, #10]
 8002a72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	08003159 	.word	0x08003159
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	080032e1 	.word	0x080032e1
 8002a98:	40003800 	.word	0x40003800
 8002a9c:	40003400 	.word	0x40003400

08002aa0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_I2S_Receive_DMA+0x1a>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0a1      	b.n	8002c02 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2S_Receive_DMA+0x2e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e099      	b.n	8002c02 <HAL_I2S_Receive_DMA+0x162>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e089      	b.n	8002c02 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2204      	movs	r2, #4
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d002      	beq.n	8002b1a <HAL_I2S_Receive_DMA+0x7a>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10a      	bne.n	8002b30 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	865a      	strh	r2, [r3, #50]	; 0x32
 8002b2e:	e005      	b.n	8002b3c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <HAL_I2S_Receive_DMA+0x16c>)
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <HAL_I2S_Receive_DMA+0x170>)
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_I2S_Receive_DMA+0x174>)
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b62:	d10a      	bne.n	8002b7a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b92:	f7ff f943 	bl	8001e1c <HAL_DMA_Start_IT>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00f      	beq.n	8002bbc <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f043 0208 	orr.w	r2, r3, #8
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e022      	b.n	8002c02 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08003037 	.word	0x08003037
 8002c10:	08002ff5 	.word	0x08002ff5
 8002c14:	08003053 	.word	0x08003053

08002c18 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d004      	beq.n	8002c38 <HAL_I2S_DMAStop+0x20>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80d1 	bne.w	8002dda <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00f      	beq.n	8002c60 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f941 	bl	8001ecc <HAL_DMA_Abort>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0208 	orr.w	r2, r3, #8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c60:	2364      	movs	r3, #100	; 0x64
 8002c62:	2201      	movs	r2, #1
 8002c64:	2102      	movs	r1, #2
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fb00 	bl	800326c <I2S_WaitFlagStateUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c8a:	2364      	movs	r3, #100	; 0x64
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 faeb 	bl	800326c <I2S_WaitFlagStateUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0202 	bic.w	r2, r2, #2
 8002ce0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	f040 8165 	bne.w	8002fba <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00f      	beq.n	8002d18 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f8e5 	bl	8001ecc <HAL_DMA_Abort>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f043 0208 	orr.w	r2, r3, #8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_I2S_DMAStop+0x10e>
 8002d22:	4b8a      	ldr	r3, [pc, #552]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d24:	e001      	b.n	8002d2a <HAL_I2S_DMAStop+0x112>
 8002d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4985      	ldr	r1, [pc, #532]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d32:	428b      	cmp	r3, r1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2S_DMAStop+0x122>
 8002d36:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d38:	e001      	b.n	8002d3e <HAL_I2S_DMAStop+0x126>
 8002d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a7e      	ldr	r2, [pc, #504]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_I2S_DMAStop+0x13e>
 8002d52:	4b7e      	ldr	r3, [pc, #504]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d54:	e001      	b.n	8002d5a <HAL_I2S_DMAStop+0x142>
 8002d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a79      	ldr	r2, [pc, #484]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_I2S_DMAStop+0x154>
 8002d68:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d6a:	e001      	b.n	8002d70 <HAL_I2S_DMAStop+0x158>
 8002d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2S_DMAStop+0x16c>
 8002d80:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d82:	e001      	b.n	8002d88 <HAL_I2S_DMAStop+0x170>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	496e      	ldr	r1, [pc, #440]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2S_DMAStop+0x180>
 8002d94:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2S_DMAStop+0x184>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dc2:	e0fa      	b.n	8002fba <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2S_DMAStop+0x1ba>
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002dd0:	e001      	b.n	8002dd6 <HAL_I2S_DMAStop+0x1be>
 8002dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dd8:	e0ef      	b.n	8002fba <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de2:	d005      	beq.n	8002df0 <HAL_I2S_DMAStop+0x1d8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	f040 80e5 	bne.w	8002fba <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00f      	beq.n	8002e18 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f865 	bl	8001ecc <HAL_DMA_Abort>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f043 0208 	orr.w	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	f040 809a 	bne.w	8002f5a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00f      	beq.n	8002e4e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f84a 	bl	8001ecc <HAL_DMA_Abort>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0208 	orr.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002e4e:	f7fe fdf5 	bl	8001a3c <HAL_GetTick>
 8002e52:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002e54:	e012      	b.n	8002e7c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002e56:	f7fe fdf1 	bl	8001a3c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d90b      	bls.n	8002e7c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_I2S_DMAStop+0x272>
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002e88:	e001      	b.n	8002e8e <HAL_I2S_DMAStop+0x276>
 8002e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d1de      	bne.n	8002e56 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002e98:	e012      	b.n	8002ec0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002e9a:	f7fe fdcf 	bl	8001a3c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d90b      	bls.n	8002ec0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_I2S_DMAStop+0x2b6>
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002ecc:	e001      	b.n	8002ed2 <HAL_I2S_DMAStop+0x2ba>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d0de      	beq.n	8002e9a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_I2S_DMAStop+0x2d2>
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002ee8:	e001      	b.n	8002eee <HAL_I2S_DMAStop+0x2d6>
 8002eea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4914      	ldr	r1, [pc, #80]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002ef6:	428b      	cmp	r3, r1
 8002ef8:	d101      	bne.n	8002efe <HAL_I2S_DMAStop+0x2e6>
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002efc:	e001      	b.n	8002f02 <HAL_I2S_DMAStop+0x2ea>
 8002efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_I2S_DMAStop+0x302>
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002f18:	e001      	b.n	8002f1e <HAL_I2S_DMAStop+0x306>
 8002f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2S_DMAStop+0x31a>
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002f30:	e001      	b.n	8002f36 <HAL_I2S_DMAStop+0x31e>
 8002f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4902      	ldr	r1, [pc, #8]	; (8002f48 <HAL_I2S_DMAStop+0x330>)
 8002f3e:	428b      	cmp	r3, r1
 8002f40:	d106      	bne.n	8002f50 <HAL_I2S_DMAStop+0x338>
 8002f42:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <HAL_I2S_DMAStop+0x334>)
 8002f44:	e006      	b.n	8002f54 <HAL_I2S_DMAStop+0x33c>
 8002f46:	bf00      	nop
 8002f48:	40003800 	.word	0x40003800
 8002f4c:	40003400 	.word	0x40003400
 8002f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f54:	f022 0202 	bic.w	r2, r2, #2
 8002f58:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f68:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f98:	d10c      	bne.n	8002fb4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e002      	b.n	8002fba <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7fe f853 	bl	80010d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fe f879 	bl	800113c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0203 	bic.w	r2, r2, #3
 800306e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f043 0208 	orr.w	r2, r3, #8
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff ffa5 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10e      	bne.n	80030f2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff6d 	bl	8002fcc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	b292      	uxth	r2, r2
 800310e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	1c9a      	adds	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003140:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ffc2 	bl	80010d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b04      	cmp	r3, #4
 8003172:	d13a      	bne.n	80031ea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d109      	bne.n	8003192 <I2S_IRQHandler+0x3a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d102      	bne.n	8003192 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ffb4 	bl	80030fa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d126      	bne.n	80031ea <I2S_IRQHandler+0x92>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d11f      	bne.n	80031ea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f043 0202 	orr.w	r2, r3, #2
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fefb 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d136      	bne.n	8003264 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d109      	bne.n	8003214 <I2S_IRQHandler+0xbc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d102      	bne.n	8003214 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ff45 	bl	800309e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d122      	bne.n	8003264 <I2S_IRQHandler+0x10c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b20      	cmp	r3, #32
 800322a:	d11b      	bne.n	8003264 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800323a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0204 	orr.w	r2, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff febe 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800327c:	f7fe fbde 	bl	8001a3c <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003282:	e018      	b.n	80032b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d014      	beq.n	80032b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800328c:	f7fe fbd6 	bl	8001a3c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d902      	bls.n	80032a2 <I2S_WaitFlagStateUntilTimeout+0x36>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e00f      	b.n	80032d6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1d7      	bne.n	8003284 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a92      	ldr	r2, [pc, #584]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80032fa:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032fc:	e001      	b.n	8003302 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80032fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8b      	ldr	r2, [pc, #556]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003318:	4b8a      	ldr	r3, [pc, #552]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800331a:	e001      	b.n	8003320 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332c:	d004      	beq.n	8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 8099 	bne.w	800346a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f925 	bl	800359c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9c8 	bl	80036fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d13a      	bne.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d035      	beq.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800338a:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800338c:	e001      	b.n	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800338e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4969      	ldr	r1, [pc, #420]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800339a:	428b      	cmp	r3, r1
 800339c:	d101      	bne.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800339e:	4b69      	ldr	r3, [pc, #420]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033a0:	e001      	b.n	80033a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fdfa 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	f040 80c3 	bne.w	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80bd 	beq.w	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003412:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003420:	e001      	b.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4944      	ldr	r1, [pc, #272]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800342e:	428b      	cmp	r3, r1
 8003430:	d101      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003432:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003434:	e001      	b.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fdbc 	bl	8002fe0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003468:	e089      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d107      	bne.n	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8be 	bl	8003600 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8fd 	bl	8003698 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d12f      	bne.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02a      	beq.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ce:	e001      	b.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4919      	ldr	r1, [pc, #100]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034dc:	428b      	cmp	r3, r1
 80034de:	d101      	bne.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e2:	e001      	b.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80034e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f043 0202 	orr.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fd6c 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d136      	bne.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d031      	beq.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003528:	e001      	b.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800352a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4902      	ldr	r1, [pc, #8]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003536:	428b      	cmp	r3, r1
 8003538:	d106      	bne.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800353a:	4b02      	ldr	r3, [pc, #8]	; (8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800353c:	e006      	b.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800353e:	bf00      	nop
 8003540:	40003800 	.word	0x40003800
 8003544:	40003400 	.word	0x40003400
 8003548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003550:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003560:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fd32 	bl	8002fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	e000      	b.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800357e:	bf00      	nop
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c99      	adds	r1, r3, #2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6251      	str	r1, [r2, #36]	; 0x24
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d113      	bne.n	80035f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ffc9 	bl	8003588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c99      	adds	r1, r3, #2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6251      	str	r1, [r2, #36]	; 0x24
 8003612:	8819      	ldrh	r1, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <I2SEx_TxISR_I2SExt+0x90>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <I2SEx_TxISR_I2SExt+0x22>
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <I2SEx_TxISR_I2SExt+0x94>)
 8003620:	e001      	b.n	8003626 <I2SEx_TxISR_I2SExt+0x26>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	460a      	mov	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d121      	bne.n	8003686 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <I2SEx_TxISR_I2SExt+0x90>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <I2SEx_TxISR_I2SExt+0x50>
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <I2SEx_TxISR_I2SExt+0x94>)
 800364e:	e001      	b.n	8003654 <I2SEx_TxISR_I2SExt+0x54>
 8003650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	490d      	ldr	r1, [pc, #52]	; (8003690 <I2SEx_TxISR_I2SExt+0x90>)
 800365c:	428b      	cmp	r3, r1
 800365e:	d101      	bne.n	8003664 <I2SEx_TxISR_I2SExt+0x64>
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <I2SEx_TxISR_I2SExt+0x94>)
 8003662:	e001      	b.n	8003668 <I2SEx_TxISR_I2SExt+0x68>
 8003664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800366c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff81 	bl	8003588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40003800 	.word	0x40003800
 8003694:	40003400 	.word	0x40003400

08003698 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68d8      	ldr	r0, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	1c99      	adds	r1, r3, #2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036b0:	b282      	uxth	r2, r0
 80036b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff4a 	bl	8003588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <I2SEx_RxISR_I2SExt+0x90>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <I2SEx_RxISR_I2SExt+0x16>
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <I2SEx_RxISR_I2SExt+0x94>)
 8003710:	e001      	b.n	8003716 <I2SEx_RxISR_I2SExt+0x1a>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	68d8      	ldr	r0, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	1c99      	adds	r1, r3, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003722:	b282      	uxth	r2, r0
 8003724:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d121      	bne.n	8003782 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <I2SEx_RxISR_I2SExt+0x90>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <I2SEx_RxISR_I2SExt+0x50>
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <I2SEx_RxISR_I2SExt+0x94>)
 800374a:	e001      	b.n	8003750 <I2SEx_RxISR_I2SExt+0x54>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	490d      	ldr	r1, [pc, #52]	; (800378c <I2SEx_RxISR_I2SExt+0x90>)
 8003758:	428b      	cmp	r3, r1
 800375a:	d101      	bne.n	8003760 <I2SEx_RxISR_I2SExt+0x64>
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <I2SEx_RxISR_I2SExt+0x94>)
 800375e:	e001      	b.n	8003764 <I2SEx_RxISR_I2SExt+0x68>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003768:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff03 	bl	8003588 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40003800 	.word	0x40003800
 8003790:	40003400 	.word	0x40003400

08003794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e267      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e242      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6f      	ldr	r2, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6c      	ldr	r2, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b69      	ldr	r3, [pc, #420]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe f8f6 	bl	8001a3c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe f8f2 	bl	8001a3c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e207      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe f8e2 	bl	8001a3c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f8de 	bl	8001a3c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1f3      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fe f897 	bl	8001a3c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe f893 	bl	8001a3c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a8      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x244>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe f876 	bl	8001a3c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe f872 	bl	8001a3c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e187      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe f856 	bl	8001a3c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe f852 	bl	8001a3c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e167      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x240>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x248>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fe f83f 	bl	8001a3c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe f83b 	bl	8001a3c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e150      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7d      	ldr	r3, [pc, #500]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b7a      	ldr	r3, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b77      	ldr	r3, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b74      	ldr	r3, [pc, #464]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a73      	ldr	r2, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fffb 	bl	8001a3c <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fd fff7 	bl	8001a3c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e10c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_OscConfig+0x474>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2ea>
 8003a70:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x30c>
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a5b      	ldr	r2, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x324>
 8003aa0:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a54      	ldr	r2, [pc, #336]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd ffbc 	bl	8001a3c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd ffb8 	bl	8001a3c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0cb      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x334>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fd ffa6 	bl	8001a3c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fd ffa2 	bl	8001a3c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0b5      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a1 	beq.w	8003c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d05c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d141      	bne.n	8003bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff76 	bl	8001a3c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd ff72 	bl	8001a3c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e087      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	491b      	ldr	r1, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd ff4b 	bl	8001a3c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fd ff47 	bl	8001a3c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e05c      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x416>
 8003bc8:	e054      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x478>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd ff34 	bl	8001a3c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fd ff30 	bl	8001a3c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x470>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x444>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e038      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCC_OscConfig+0x4ec>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d121      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c40:	4013      	ands	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cc      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b68      	ldr	r3, [pc, #416]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b8      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	494d      	ldr	r1, [pc, #308]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e067      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4934      	ldr	r1, [pc, #208]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fd fe62 	bl	8001a3c <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd fe5e 	bl	8001a3c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04f      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e032      	b.n	8003e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4916      	ldr	r1, [pc, #88]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490e      	ldr	r1, [pc, #56]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e0a:	f000 f821 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	490a      	ldr	r1, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	5ccb      	ldrb	r3, [r1, r3]
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fdc2 	bl	80019b4 <HAL_InitTick>

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	0800a594 	.word	0x0800a594
 8003e48:	20000050 	.word	0x20000050
 8003e4c:	20000054 	.word	0x20000054

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b094      	sub	sp, #80	; 0x50
 8003e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e60:	2300      	movs	r3, #0
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e68:	4b79      	ldr	r3, [pc, #484]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d00d      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x40>
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	f200 80e1 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e82:	e0db      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e88:	e0db      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8e:	e0d8      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e90:	4b6f      	ldr	r3, [pc, #444]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	4b6d      	ldr	r3, [pc, #436]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d063      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	2200      	movs	r2, #0
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eba:	2300      	movs	r3, #0
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	0159      	lsls	r1, r3, #5
 8003ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed4:	0150      	lsls	r0, r2, #5
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4621      	mov	r1, r4
 8003edc:	1a51      	subs	r1, r2, r1
 8003ede:	6139      	str	r1, [r7, #16]
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	018b      	lsls	r3, r1, #6
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efe:	4651      	mov	r1, sl
 8003f00:	018a      	lsls	r2, r1, #6
 8003f02:	4651      	mov	r1, sl
 8003f04:	ebb2 0801 	subs.w	r8, r2, r1
 8003f08:	4659      	mov	r1, fp
 8003f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f22:	4690      	mov	r8, r2
 8003f24:	4699      	mov	r9, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	eb18 0303 	adds.w	r3, r8, r3
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	462b      	mov	r3, r5
 8003f30:	eb49 0303 	adc.w	r3, r9, r3
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f42:	4629      	mov	r1, r5
 8003f44:	024b      	lsls	r3, r1, #9
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	024a      	lsls	r2, r1, #9
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f56:	2200      	movs	r2, #0
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f60:	f7fc f98e 	bl	8000280 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f6c:	e058      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	4611      	mov	r1, r2
 8003f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9a:	0150      	lsls	r0, r2, #5
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	00eb      	lsls	r3, r5, #3
 8003fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd6:	00e2      	lsls	r2, r4, #3
 8003fd8:	4614      	mov	r4, r2
 8003fda:	461d      	mov	r5, r3
 8003fdc:	4643      	mov	r3, r8
 8003fde:	18e3      	adds	r3, r4, r3
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	eb45 0303 	adc.w	r3, r5, r3
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	028b      	lsls	r3, r1, #10
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004000:	4621      	mov	r1, r4
 8004002:	028a      	lsls	r2, r1, #10
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	2200      	movs	r2, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	61fa      	str	r2, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	f7fc f934 	bl	8000280 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800403a:	e002      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0x204>)
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004044:	4618      	mov	r0, r3
 8004046:	3750      	adds	r7, #80	; 0x50
 8004048:	46bd      	mov	sp, r7
 800404a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	007a1200 	.word	0x007a1200

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000050 	.word	0x20000050

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004078:	f7ff fff0 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0a9b      	lsrs	r3, r3, #10
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	0800a5a4 	.word	0x0800a5a4

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040a0:	f7ff ffdc 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800a5a4 	.word	0x0800a5a4

080040c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d038      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040ec:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040f2:	f7fd fca3 	bl	8001a3c <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040fa:	f7fd fc9f 	bl	8001a3c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e0bd      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	495a      	ldr	r1, [pc, #360]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004132:	4b57      	ldr	r3, [pc, #348]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004138:	f7fd fc80 	bl	8001a3c <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004140:	f7fd fc7c 	bl	8001a3c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e09a      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004152:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8083 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	4a47      	ldr	r2, [pc, #284]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	6413      	str	r3, [r2, #64]	; 0x40
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004188:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a42      	ldr	r2, [pc, #264]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800418e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004192:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004194:	f7fd fc52 	bl	8001a3c <HAL_GetTick>
 8004198:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800419c:	f7fd fc4e 	bl	8001a3c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e06c      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041ae:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ba:	4b36      	ldr	r3, [pc, #216]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02f      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d028      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041e8:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041ee:	4a29      	ldr	r2, [pc, #164]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d114      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fc1c 	bl	8001a3c <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	e00a      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7fd fc18 	bl	8001a3c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e034      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ee      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004236:	d10d      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	4911      	ldr	r1, [pc, #68]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
 8004252:	e005      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800425e:	6093      	str	r3, [r2, #8]
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	4909      	ldr	r1, [pc, #36]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7d1a      	ldrb	r2, [r3, #20]
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004284:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	42470068 	.word	0x42470068
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	42470e40 	.word	0x42470e40
 80042a0:	424711e0 	.word	0x424711e0

080042a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d140      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d131      	bne.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042da:	617b      	str	r3, [r7, #20]
          break;
 80042dc:	e031      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d109      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800430a:	4a15      	ldr	r2, [pc, #84]	; (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432c:	0f1b      	lsrs	r3, r3, #28
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
          break;
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
          break;
 8004340:	bf00      	nop
        }
      }
      break;
 8004342:	bf00      	nop
    }
  }
  return frequency;
 8004344:	697b      	ldr	r3, [r7, #20]
}
 8004346:	4618      	mov	r0, r3
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00bb8000 	.word	0x00bb8000
 800435c:	007a1200 	.word	0x007a1200
 8004360:	00f42400 	.word	0x00f42400

08004364 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fd f903 	bl	8001594 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f814 	bl	80043c4 <HAL_SD_InitCard>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00a      	b.n	80043bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043e0:	2376      	movs	r3, #118	; 0x76
 80043e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681d      	ldr	r5, [r3, #0]
 80043e8:	466c      	mov	r4, sp
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043fc:	4628      	mov	r0, r5
 80043fe:	f001 fbfd 	bl	8005bfc <SDIO_Init>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04f      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_SD_InitCard+0xf8>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fc35 	bl	8005c8e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <HAL_SD_InitCard+0xf8>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800442a:	2002      	movs	r0, #2
 800442c:	f7fd fb12 	bl	8001a54 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 ff03 	bl	800523c <SD_PowerON>
 8004436:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e02e      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fe22 	bl	80050a0 <SD_InitCard>
 800445c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01b      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fc94 	bl	8005db2 <SDMMC_CmdBlockLength>
 800448a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_SD_InitCard+0xfc>)
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	422580a0 	.word	0x422580a0
 80044c0:	004005ff 	.word	0x004005ff

080044c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b092      	sub	sp, #72	; 0x48
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044d2:	f7fd fab3 	bl	8001a3c <HAL_GetTick>
 80044d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1bd      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	f040 81b0 	bne.w	8004864 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	429a      	cmp	r2, r3
 8004516:	d907      	bls.n	8004528 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e1a4      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2203      	movs	r2, #3
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2b01      	cmp	r3, #1
 800453e:	d002      	beq.n	8004546 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	025b      	lsls	r3, r3, #9
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004552:	2390      	movs	r3, #144	; 0x90
 8004554:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004556:	2302      	movs	r3, #2
 8004558:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800455e:	2301      	movs	r3, #1
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f107 0214 	add.w	r2, r7, #20
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f001 fbf4 	bl	8005d5a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d90a      	bls.n	800458e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fc58 	bl	8005e3a <SDMMC_CmdReadMultiBlock>
 800458a:	6478      	str	r0, [r7, #68]	; 0x44
 800458c:	e009      	b.n	80045a2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fc2b 	bl	8005df6 <SDMMC_CmdReadSingleBlock>
 80045a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e151      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045d2:	e061      	b.n	8004698 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d03c      	beq.n	800465c <HAL_SD_ReadBlocks+0x198>
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d039      	beq.n	800465c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	e033      	b.n	8004656 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fb2d 	bl	8005c52 <SDIO_ReadFIFO>
 80045f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	3301      	adds	r3, #1
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	3b01      	subs	r3, #1
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b2da      	uxtb	r2, r3
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	3301      	adds	r3, #1
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	3b01      	subs	r3, #1
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	3301      	adds	r3, #1
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	3b01      	subs	r3, #1
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	b2da      	uxtb	r2, r3
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	3301      	adds	r3, #1
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	3b01      	subs	r3, #1
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	3301      	adds	r3, #1
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	2b07      	cmp	r3, #7
 800465a:	d9c8      	bls.n	80045ee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800465c:	f7fd f9ee 	bl	8001a3c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004668:	429a      	cmp	r2, r3
 800466a:	d902      	bls.n	8004672 <HAL_SD_ReadBlocks+0x1ae>
 800466c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d112      	bne.n	8004698 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0ec      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469e:	f240 332a 	movw	r3, #810	; 0x32a
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d095      	beq.n	80045d4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d022      	beq.n	80046fc <HAL_SD_ReadBlocks+0x238>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d91f      	bls.n	80046fc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d01b      	beq.n	80046fc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fc1d 	bl	8005f08 <SDMMC_CmdStopTransfer>
 80046ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0ba      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	f043 0208 	orr.w	r2, r3, #8
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0a0      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e086      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d063      	beq.n	800483a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e06c      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
 8004798:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fa56 	bl	8005c52 <SDIO_ReadFIFO>
 80047a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	3301      	adds	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	3b01      	subs	r3, #1
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	3301      	adds	r3, #1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	3b01      	subs	r3, #1
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	3301      	adds	r3, #1
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	3b01      	subs	r3, #1
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	0e1b      	lsrs	r3, r3, #24
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	3301      	adds	r3, #1
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	3b01      	subs	r3, #1
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047fe:	f7fd f91d 	bl	8001a3c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800480a:	429a      	cmp	r2, r3
 800480c:	d902      	bls.n	8004814 <HAL_SD_ReadBlocks+0x350>
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	2b00      	cmp	r3, #0
 8004812:	d112      	bne.n	800483a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_SD_ReadBlocks+0x3b8>)
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e01b      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SD_ReadBlocks+0x38a>
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1a6      	bne.n	800479c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f240 523a 	movw	r2, #1338	; 0x53a
 8004856:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e006      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3748      	adds	r7, #72	; 0x48
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	004005ff 	.word	0x004005ff

08004880 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b092      	sub	sp, #72	; 0x48
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800488e:	f7fd f8d5 	bl	8001a3c <HAL_GetTick>
 8004892:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d107      	bne.n	80048b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e166      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	f040 8159 	bne.w	8004b72 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	441a      	add	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d907      	bls.n	80048e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e14d      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	025b      	lsls	r3, r3, #9
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	025b      	lsls	r3, r3, #9
 800490c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800490e:	2390      	movs	r3, #144	; 0x90
 8004910:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800491a:	2301      	movs	r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0218 	add.w	r2, r7, #24
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fa16 	bl	8005d5a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d90a      	bls.n	800494a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fabe 	bl	8005ec2 <SDMMC_CmdWriteMultiBlock>
 8004946:	6478      	str	r0, [r7, #68]	; 0x44
 8004948:	e009      	b.n	800495e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2210      	movs	r2, #16
 800494e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004956:	4618      	mov	r0, r3
 8004958:	f001 fa91 	bl	8005e7e <SDMMC_CmdWriteSingleBlock>
 800495c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800495e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a87      	ldr	r2, [pc, #540]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0fa      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800498e:	e065      	b.n	8004a5c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d040      	beq.n	8004a20 <HAL_SD_WriteBlocks+0x1a0>
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03d      	beq.n	8004a20 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40
 80049a8:	e037      	b.n	8004a1a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	3301      	adds	r3, #1
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	3b01      	subs	r3, #1
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	021a      	lsls	r2, r3, #8
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	3301      	adds	r3, #1
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	3b01      	subs	r3, #1
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	041a      	lsls	r2, r3, #16
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	3301      	adds	r3, #1
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	3b01      	subs	r3, #1
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	061a      	lsls	r2, r3, #24
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	3301      	adds	r3, #1
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	3b01      	subs	r3, #1
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f107 0214 	add.w	r2, r7, #20
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 f92c 	bl	8005c6c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a16:	3301      	adds	r3, #1
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d9c4      	bls.n	80049aa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004a20:	f7fd f80c 	bl	8001a3c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d902      	bls.n	8004a36 <HAL_SD_WriteBlocks+0x1b6>
 8004a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d112      	bne.n	8004a5c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a53      	ldr	r2, [pc, #332]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e091      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a62:	f240 331a 	movw	r3, #794	; 0x31a
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d091      	beq.n	8004990 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d022      	beq.n	8004ac0 <HAL_SD_WriteBlocks+0x240>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d91f      	bls.n	8004ac0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d01b      	beq.n	8004ac0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fa3b 	bl	8005f08 <SDMMC_CmdStopTransfer>
 8004a92:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3a      	ldr	r2, [pc, #232]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e05f      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f043 0208 	orr.w	r2, r3, #8
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e045      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e02b      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f043 0210 	orr.w	r2, r3, #16
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e011      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e006      	b.n	8004b80 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3748      	adds	r7, #72	; 0x48
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	004005ff 	.word	0x004005ff

08004b8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9a:	0f9b      	lsrs	r3, r3, #30
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba6:	0e9b      	lsrs	r3, r3, #26
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb8:	0e1b      	lsrs	r3, r3, #24
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bec:	0d1b      	lsrs	r3, r3, #20
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c0a:	0bdb      	lsrs	r3, r3, #15
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1c:	0b9b      	lsrs	r3, r3, #14
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c40:	0b1b      	lsrs	r3, r3, #12
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2200      	movs	r2, #0
 8004c52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d163      	bne.n	8004d24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c60:	009a      	lsls	r2, r3, #2
 8004c62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c6c:	0f92      	lsrs	r2, r2, #30
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c78:	0edb      	lsrs	r3, r3, #27
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8a:	0e1b      	lsrs	r3, r3, #24
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9c:	0d5b      	lsrs	r3, r3, #21
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cae:	0c9b      	lsrs	r3, r3, #18
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc0:	0bdb      	lsrs	r3, r3, #15
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	7e1b      	ldrb	r3, [r3, #24]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cee:	fb03 f202 	mul.w	r2, r3, r2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	7a1b      	ldrb	r3, [r3, #8]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d10:	0a52      	lsrs	r2, r2, #9
 8004d12:	fb03 f202 	mul.w	r2, r3, r2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60
 8004d22:	e031      	b.n	8004d88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11d      	bne.n	8004d68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	3301      	adds	r3, #1
 8004d48:	029a      	lsls	r2, r3, #10
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	661a      	str	r2, [r3, #96]	; 0x60
 8004d66:	e00f      	b.n	8004d88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <HAL_SD_GetCardCSD+0x344>)
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e09d      	b.n	8004ec4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8c:	0b9b      	lsrs	r3, r3, #14
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	0fdb      	lsrs	r3, r3, #31
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	0f5b      	lsrs	r3, r3, #29
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	0e9b      	lsrs	r3, r3, #26
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	0d9b      	lsrs	r3, r3, #22
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	0d5b      	lsrs	r3, r3, #21
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	0bdb      	lsrs	r3, r3, #15
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	0b9b      	lsrs	r3, r3, #14
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	0b5b      	lsrs	r3, r3, #13
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	0b1b      	lsrs	r3, r3, #12
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	0a9b      	lsrs	r3, r3, #10
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	004005ff 	.word	0x004005ff

08004ed4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f2c:	b5b0      	push	{r4, r5, r7, lr}
 8004f2e:	b08e      	sub	sp, #56	; 0x38
 8004f30:	af04      	add	r7, sp, #16
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d02e      	beq.n	8004faa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d106      	bne.n	8004f62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f60:	e029      	b.n	8004fb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f68:	d10a      	bne.n	8004f80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa1c 	bl	80053a8 <SD_WideBus_Enable>
 8004f70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f7e:	e01a      	b.n	8004fb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa59 	bl	800543e <SD_WideBus_Disable>
 8004f8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
 8004f9a:	e00c      	b.n	8004fb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8004fa8:	e005      	b.n	8004fb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fd4:	e01f      	b.n	8005016 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681d      	ldr	r5, [r3, #0]
 8004ffc:	466c      	mov	r4, sp
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fdf3 	bl	8005bfc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fec7 	bl	8005db2 <SDMMC_CmdBlockLength>
 8005024:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800504e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005052:	4618      	mov	r0, r3
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bdb0      	pop	{r4, r5, r7, pc}
 800505a:	bf00      	nop
 800505c:	004005ff 	.word	0x004005ff

08005060 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f970 	bl	8005358 <SD_SendStatus>
 8005078:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0a5b      	lsrs	r3, r3, #9
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005096:	693b      	ldr	r3, [r7, #16]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b094      	sub	sp, #80	; 0x50
 80050a4:	af04      	add	r7, sp, #16
 80050a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fdfa 	bl	8005caa <SDIO_GetPowerState>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050c0:	e0b8      	b.n	8005234 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d02f      	beq.n	800512a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 f824 	bl	800611c <SDMMC_CmdSendCID>
 80050d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	e0a9      	b.n	8005234 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fe24 	bl	8005d34 <SDIO_GetResponse>
 80050ec:	4602      	mov	r2, r0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2104      	movs	r1, #4
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fe1b 	bl	8005d34 <SDIO_GetResponse>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2108      	movs	r1, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fe12 	bl	8005d34 <SDIO_GetResponse>
 8005110:	4602      	mov	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	210c      	movs	r1, #12
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fe09 	bl	8005d34 <SDIO_GetResponse>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	2b03      	cmp	r3, #3
 8005130:	d00d      	beq.n	800514e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f107 020e 	add.w	r2, r7, #14
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f82a 	bl	8006196 <SDMMC_CmdSetRelAdd>
 8005142:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <SD_InitCard+0xae>
    {
      return errorstate;
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514c:	e072      	b.n	8005234 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	2b03      	cmp	r3, #3
 8005154:	d036      	beq.n	80051c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	461a      	mov	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 fff4 	bl	8006158 <SDMMC_CmdSendCSD>
 8005170:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	e05b      	b.n	8005234 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fdd6 	bl	8005d34 <SDIO_GetResponse>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2104      	movs	r1, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fdcd 	bl	8005d34 <SDIO_GetResponse>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2108      	movs	r1, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fdc4 	bl	8005d34 <SDIO_GetResponse>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	210c      	movs	r1, #12
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fdbb 	bl	8005d34 <SDIO_GetResponse>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2104      	movs	r1, #4
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fdb2 	bl	8005d34 <SDIO_GetResponse>
 80051d0:	4603      	mov	r3, r0
 80051d2:	0d1a      	lsrs	r2, r3, #20
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051d8:	f107 0310 	add.w	r3, r7, #16
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fcd4 	bl	8004b8c <HAL_SD_GetCardCSD>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051ee:	e021      	b.n	8005234 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	2200      	movs	r2, #0
 80051fc:	461c      	mov	r4, r3
 80051fe:	4615      	mov	r5, r2
 8005200:	4622      	mov	r2, r4
 8005202:	462b      	mov	r3, r5
 8005204:	4608      	mov	r0, r1
 8005206:	f000 fea1 	bl	8005f4c <SDMMC_CmdSelDesel>
 800520a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <SD_InitCard+0x176>
  {
    return errorstate;
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	e00e      	b.n	8005234 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681d      	ldr	r5, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	466c      	mov	r4, sp
 800521e:	f103 0210 	add.w	r2, r3, #16
 8005222:	ca07      	ldmia	r2, {r0, r1, r2}
 8005224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005228:	3304      	adds	r3, #4
 800522a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fce5 	bl	8005bfc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3740      	adds	r7, #64	; 0x40
 8005238:	46bd      	mov	sp, r7
 800523a:	bdb0      	pop	{r4, r5, r7, pc}

0800523c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fe9c 	bl	8005f92 <SDMMC_CmdGoIdleState>
 800525a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	e072      	b.n	800534c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 feaf 	bl	8005fce <SDMMC_CmdOperCond>
 8005270:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fe85 	bl	8005f92 <SDMMC_CmdGoIdleState>
 8005288:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e05b      	b.n	800534c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d137      	bne.n	8005312 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2100      	movs	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 feaf 	bl	800600c <SDMMC_CmdAppCommand>
 80052ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02d      	beq.n	8005312 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052ba:	e047      	b.n	800534c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fea2 	bl	800600c <SDMMC_CmdAppCommand>
 80052c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e03b      	b.n	800534c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	491e      	ldr	r1, [pc, #120]	; (8005354 <SD_PowerON+0x118>)
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 feb8 	bl	8006050 <SDMMC_CmdAppOperCommand>
 80052e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052ec:	e02e      	b.n	800534c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd1d 	bl	8005d34 <SDIO_GetResponse>
 80052fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	0fdb      	lsrs	r3, r3, #31
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <SD_PowerON+0xcc>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <SD_PowerON+0xce>
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]

    count++;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3301      	adds	r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005318:	4293      	cmp	r3, r2
 800531a:	d802      	bhi.n	8005322 <SD_PowerON+0xe6>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0cc      	beq.n	80052bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005328:	4293      	cmp	r3, r2
 800532a:	d902      	bls.n	8005332 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800532c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005330:	e00c      	b.n	800534c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
 8005342:	e002      	b.n	800534a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	c1100000 	.word	0xc1100000

08005358 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800536c:	e018      	b.n	80053a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 ff2c 	bl	80061d8 <SDMMC_CmdSendStatus>
 8005380:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	e009      	b.n	80053a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2100      	movs	r1, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fcce 	bl	8005d34 <SDIO_GetResponse>
 8005398:	4602      	mov	r2, r0
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fcb8 	bl	8005d34 <SDIO_GetResponse>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053ce:	d102      	bne.n	80053d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053d4:	e02f      	b.n	8005436 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80053d6:	f107 030c 	add.w	r3, r7, #12
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f879 	bl	80054d4 <SD_FindSCR>
 80053e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	e023      	b.n	8005436 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01c      	beq.n	8005432 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	041b      	lsls	r3, r3, #16
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f000 fe01 	bl	800600c <SDMMC_CmdAppCommand>
 800540a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	e00f      	b.n	8005436 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fe3a 	bl	8006096 <SDMMC_CmdBusWidth>
 8005422:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	e003      	b.n	8005436 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800542e:	2300      	movs	r3, #0
 8005430:	e001      	b.n	8005436 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005432:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fc6d 	bl	8005d34 <SDIO_GetResponse>
 800545a:	4603      	mov	r3, r0
 800545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005464:	d102      	bne.n	800546c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800546a:	e02f      	b.n	80054cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800546c:	f107 030c 	add.w	r3, r7, #12
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f82e 	bl	80054d4 <SD_FindSCR>
 8005478:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	e023      	b.n	80054cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01c      	beq.n	80054c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fdb6 	bl	800600c <SDMMC_CmdAppCommand>
 80054a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	e00f      	b.n	80054cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fdef 	bl	8006096 <SDMMC_CmdBusWidth>
 80054b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e003      	b.n	80054cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e001      	b.n	80054cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b08f      	sub	sp, #60	; 0x3c
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054de:	f7fc faad 	bl	8001a3c <HAL_GetTick>
 80054e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2108      	movs	r1, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fc59 	bl	8005db2 <SDMMC_CmdBlockLength>
 8005500:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	e0b2      	b.n	8005672 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f000 fd77 	bl	800600c <SDMMC_CmdAppCommand>
 800551e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	e0a3      	b.n	8005672 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005530:	2308      	movs	r3, #8
 8005532:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005534:	2330      	movs	r3, #48	; 0x30
 8005536:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005538:	2302      	movs	r3, #2
 800553a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800553c:	2300      	movs	r3, #0
 800553e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005540:	2301      	movs	r3, #1
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f107 0210 	add.w	r2, r7, #16
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fc03 	bl	8005d5a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fdbe 	bl	80060da <SDMMC_CmdSendSCR>
 800555e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02a      	beq.n	80055bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	e083      	b.n	8005672 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	f107 0208 	add.w	r2, r7, #8
 8005584:	18d4      	adds	r4, r2, r3
 8005586:	4608      	mov	r0, r1
 8005588:	f000 fb63 	bl	8005c52 <SDIO_ReadFIFO>
 800558c:	4603      	mov	r3, r0
 800558e:	6023      	str	r3, [r4, #0]
      index++;
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	3301      	adds	r3, #1
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
 8005596:	e006      	b.n	80055a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d012      	beq.n	80055cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055a6:	f7fc fa49 	bl	8001a3c <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d102      	bne.n	80055bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80055b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ba:	e05a      	b.n	8005672 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0cf      	beq.n	800556a <SD_FindSCR+0x96>
 80055ca:	e000      	b.n	80055ce <SD_FindSCR+0xfa>
      break;
 80055cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2208      	movs	r2, #8
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80055e4:	2308      	movs	r3, #8
 80055e6:	e044      	b.n	8005672 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2202      	movs	r2, #2
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80055fe:	2302      	movs	r3, #2
 8005600:	e037      	b.n	8005672 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2220      	movs	r2, #32
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005618:	2320      	movs	r3, #32
 800561a:	e02a      	b.n	8005672 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f240 523a 	movw	r2, #1338	; 0x53a
 8005624:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	061a      	lsls	r2, r3, #24
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005632:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800563c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	0e1b      	lsrs	r3, r3, #24
 8005642:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	601a      	str	r2, [r3, #0]
    scr++;
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	3304      	adds	r3, #4
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	061a      	lsls	r2, r3, #24
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800565a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005664:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	373c      	adds	r7, #60	; 0x3c
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}

0800567a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e03f      	b.n	800570c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fc f801 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2224      	movs	r2, #36	; 0x24
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f828 	bl	8005714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005718:	b0c0      	sub	sp, #256	; 0x100
 800571a:	af00      	add	r7, sp, #0
 800571c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	68d9      	ldr	r1, [r3, #12]
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	ea40 0301 	orr.w	r3, r0, r1
 800573c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	431a      	orrs	r2, r3
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	431a      	orrs	r2, r3
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800576c:	f021 010c 	bic.w	r1, r1, #12
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800577a:	430b      	orrs	r3, r1
 800577c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	6999      	ldr	r1, [r3, #24]
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	ea40 0301 	orr.w	r3, r0, r1
 800579a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b8f      	ldr	r3, [pc, #572]	; (80059e0 <UART_SetConfig+0x2cc>)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d005      	beq.n	80057b4 <UART_SetConfig+0xa0>
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <UART_SetConfig+0x2d0>)
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d104      	bne.n	80057be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe fc72 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80057b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057bc:	e003      	b.n	80057c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057be:	f7fe fc59 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80057c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d0:	f040 810c 	bne.w	80059ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057e6:	4622      	mov	r2, r4
 80057e8:	462b      	mov	r3, r5
 80057ea:	1891      	adds	r1, r2, r2
 80057ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ee:	415b      	adcs	r3, r3
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057f6:	4621      	mov	r1, r4
 80057f8:	eb12 0801 	adds.w	r8, r2, r1
 80057fc:	4629      	mov	r1, r5
 80057fe:	eb43 0901 	adc.w	r9, r3, r1
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005816:	4690      	mov	r8, r2
 8005818:	4699      	mov	r9, r3
 800581a:	4623      	mov	r3, r4
 800581c:	eb18 0303 	adds.w	r3, r8, r3
 8005820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005824:	462b      	mov	r3, r5
 8005826:	eb49 0303 	adc.w	r3, r9, r3
 800582a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800583a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800583e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005842:	460b      	mov	r3, r1
 8005844:	18db      	adds	r3, r3, r3
 8005846:	653b      	str	r3, [r7, #80]	; 0x50
 8005848:	4613      	mov	r3, r2
 800584a:	eb42 0303 	adc.w	r3, r2, r3
 800584e:	657b      	str	r3, [r7, #84]	; 0x54
 8005850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005858:	f7fa fd12 	bl	8000280 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <UART_SetConfig+0x2d4>)
 8005862:	fba3 2302 	umull	r2, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	011c      	lsls	r4, r3, #4
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005874:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005878:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	64b9      	str	r1, [r7, #72]	; 0x48
 8005884:	415b      	adcs	r3, r3
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800588c:	4641      	mov	r1, r8
 800588e:	eb12 0a01 	adds.w	sl, r2, r1
 8005892:	4649      	mov	r1, r9
 8005894:	eb43 0b01 	adc.w	fp, r3, r1
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ac:	4692      	mov	sl, r2
 80058ae:	469b      	mov	fp, r3
 80058b0:	4643      	mov	r3, r8
 80058b2:	eb1a 0303 	adds.w	r3, sl, r3
 80058b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ba:	464b      	mov	r3, r9
 80058bc:	eb4b 0303 	adc.w	r3, fp, r3
 80058c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058d8:	460b      	mov	r3, r1
 80058da:	18db      	adds	r3, r3, r3
 80058dc:	643b      	str	r3, [r7, #64]	; 0x40
 80058de:	4613      	mov	r3, r2
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ee:	f7fa fcc7 	bl	8000280 <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <UART_SetConfig+0x2d4>)
 80058fa:	fba3 2301 	umull	r2, r3, r3, r1
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2264      	movs	r2, #100	; 0x64
 8005902:	fb02 f303 	mul.w	r3, r2, r3
 8005906:	1acb      	subs	r3, r1, r3
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <UART_SetConfig+0x2d4>)
 8005910:	fba3 2302 	umull	r2, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800591c:	441c      	add	r4, r3
 800591e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005922:	2200      	movs	r2, #0
 8005924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005928:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800592c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005930:	4642      	mov	r2, r8
 8005932:	464b      	mov	r3, r9
 8005934:	1891      	adds	r1, r2, r2
 8005936:	63b9      	str	r1, [r7, #56]	; 0x38
 8005938:	415b      	adcs	r3, r3
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800593c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005940:	4641      	mov	r1, r8
 8005942:	1851      	adds	r1, r2, r1
 8005944:	6339      	str	r1, [r7, #48]	; 0x30
 8005946:	4649      	mov	r1, r9
 8005948:	414b      	adcs	r3, r1
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005958:	4659      	mov	r1, fp
 800595a:	00cb      	lsls	r3, r1, #3
 800595c:	4651      	mov	r1, sl
 800595e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005962:	4651      	mov	r1, sl
 8005964:	00ca      	lsls	r2, r1, #3
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	4603      	mov	r3, r0
 800596c:	4642      	mov	r2, r8
 800596e:	189b      	adds	r3, r3, r2
 8005970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005974:	464b      	mov	r3, r9
 8005976:	460a      	mov	r2, r1
 8005978:	eb42 0303 	adc.w	r3, r2, r3
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800598c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005994:	460b      	mov	r3, r1
 8005996:	18db      	adds	r3, r3, r3
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
 800599a:	4613      	mov	r3, r2
 800599c:	eb42 0303 	adc.w	r3, r2, r3
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059aa:	f7fa fc69 	bl	8000280 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <UART_SetConfig+0x2d4>)
 80059b4:	fba3 1302 	umull	r1, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	2164      	movs	r1, #100	; 0x64
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	3332      	adds	r3, #50	; 0x32
 80059c6:	4a08      	ldr	r2, [pc, #32]	; (80059e8 <UART_SetConfig+0x2d4>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	f003 0207 	and.w	r2, r3, #7
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4422      	add	r2, r4
 80059da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059dc:	e105      	b.n	8005bea <UART_SetConfig+0x4d6>
 80059de:	bf00      	nop
 80059e0:	40011000 	.word	0x40011000
 80059e4:	40011400 	.word	0x40011400
 80059e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	1891      	adds	r1, r2, r2
 8005a04:	6239      	str	r1, [r7, #32]
 8005a06:	415b      	adcs	r3, r3
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a0e:	4641      	mov	r1, r8
 8005a10:	1854      	adds	r4, r2, r1
 8005a12:	4649      	mov	r1, r9
 8005a14:	eb43 0501 	adc.w	r5, r3, r1
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	00eb      	lsls	r3, r5, #3
 8005a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a26:	00e2      	lsls	r2, r4, #3
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	4643      	mov	r3, r8
 8005a2e:	18e3      	adds	r3, r4, r3
 8005a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a34:	464b      	mov	r3, r9
 8005a36:	eb45 0303 	adc.w	r3, r5, r3
 8005a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	008b      	lsls	r3, r1, #2
 8005a5e:	4621      	mov	r1, r4
 8005a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a64:	4621      	mov	r1, r4
 8005a66:	008a      	lsls	r2, r1, #2
 8005a68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a6c:	f7fa fc08 	bl	8000280 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4b60      	ldr	r3, [pc, #384]	; (8005bf8 <UART_SetConfig+0x4e4>)
 8005a76:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	011c      	lsls	r4, r3, #4
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	61b9      	str	r1, [r7, #24]
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6139      	str	r1, [r7, #16]
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005af8:	4649      	mov	r1, r9
 8005afa:	008b      	lsls	r3, r1, #2
 8005afc:	4641      	mov	r1, r8
 8005afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b02:	4641      	mov	r1, r8
 8005b04:	008a      	lsls	r2, r1, #2
 8005b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b0a:	f7fa fbb9 	bl	8000280 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <UART_SetConfig+0x4e4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	; 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	3332      	adds	r3, #50	; 0x32
 8005b26:	4a34      	ldr	r2, [pc, #208]	; (8005bf8 <UART_SetConfig+0x4e4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b32:	441c      	add	r4, r3
 8005b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b38:	2200      	movs	r2, #0
 8005b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b3c:	677a      	str	r2, [r7, #116]	; 0x74
 8005b3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b42:	4642      	mov	r2, r8
 8005b44:	464b      	mov	r3, r9
 8005b46:	1891      	adds	r1, r2, r2
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	415b      	adcs	r3, r3
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b52:	4641      	mov	r1, r8
 8005b54:	1851      	adds	r1, r2, r1
 8005b56:	6039      	str	r1, [r7, #0]
 8005b58:	4649      	mov	r1, r9
 8005b5a:	414b      	adcs	r3, r1
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b6a:	4659      	mov	r1, fp
 8005b6c:	00cb      	lsls	r3, r1, #3
 8005b6e:	4651      	mov	r1, sl
 8005b70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b74:	4651      	mov	r1, sl
 8005b76:	00ca      	lsls	r2, r1, #3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4642      	mov	r2, r8
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b84:	464b      	mov	r3, r9
 8005b86:	460a      	mov	r2, r1
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	663b      	str	r3, [r7, #96]	; 0x60
 8005b98:	667a      	str	r2, [r7, #100]	; 0x64
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	008b      	lsls	r3, r1, #2
 8005baa:	4641      	mov	r1, r8
 8005bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	008a      	lsls	r2, r1, #2
 8005bb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bb8:	f7fa fb62 	bl	8000280 <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <UART_SetConfig+0x4e4>)
 8005bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	2164      	movs	r1, #100	; 0x64
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	3332      	adds	r3, #50	; 0x32
 8005bd4:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <UART_SetConfig+0x4e4>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f003 020f 	and.w	r2, r3, #15
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4422      	add	r2, r4
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf6:	bf00      	nop
 8005bf8:	51eb851f 	.word	0x51eb851f

08005bfc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	f107 001c 	add.w	r0, r7, #28
 8005c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005c1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005c22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005c26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005c36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	b004      	add	sp, #16
 8005c50:	4770      	bx	lr

08005c52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ce4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005cea:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005cf0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d00:	f023 030f 	bic.w	r3, r3, #15
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	b2db      	uxtb	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3314      	adds	r3, #20
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	4413      	add	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
}  
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d80:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d86:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d8c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0

}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b088      	sub	sp, #32
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dc4:	2340      	movs	r3, #64	; 0x40
 8005dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dd2:	f107 0308 	add.w	r3, r7, #8
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ff74 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	2110      	movs	r1, #16
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa19 	bl	800621c <SDMMC_GetCmdResp1>
 8005dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dec:	69fb      	ldr	r3, [r7, #28]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b088      	sub	sp, #32
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e04:	2311      	movs	r3, #17
 8005e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ff52 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	2111      	movs	r1, #17
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f9f7 	bl	800621c <SDMMC_GetCmdResp1>
 8005e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e30:	69fb      	ldr	r3, [r7, #28]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b088      	sub	sp, #32
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005e48:	2312      	movs	r3, #18
 8005e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff30 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	2112      	movs	r1, #18
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f9d5 	bl	800621c <SDMMC_GetCmdResp1>
 8005e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e74:	69fb      	ldr	r3, [r7, #28]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e8c:	2318      	movs	r3, #24
 8005e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff0e 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	2118      	movs	r1, #24
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9b3 	bl	800621c <SDMMC_GetCmdResp1>
 8005eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ed0:	2319      	movs	r3, #25
 8005ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff feec 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	2119      	movs	r1, #25
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f991 	bl	800621c <SDMMC_GetCmdResp1>
 8005efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005efc:	69fb      	ldr	r3, [r7, #28]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f14:	230c      	movs	r3, #12
 8005f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff feca 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005f32:	4a05      	ldr	r2, [pc, #20]	; (8005f48 <SDMMC_CmdStopTransfer+0x40>)
 8005f34:	210c      	movs	r1, #12
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f970 	bl	800621c <SDMMC_GetCmdResp1>
 8005f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	05f5e100 	.word	0x05f5e100

08005f4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f5c:	2307      	movs	r3, #7
 8005f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f60:	2340      	movs	r3, #64	; 0x40
 8005f62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6e:	f107 0310 	add.w	r3, r7, #16
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fea6 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	2107      	movs	r1, #7
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f94b 	bl	800621c <SDMMC_GetCmdResp1>
 8005f86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3728      	adds	r7, #40	; 0x28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b088      	sub	sp, #32
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fe85 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fb65 	bl	800668c <SDMMC_GetCmdError>
 8005fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005fd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005fdc:	2308      	movs	r3, #8
 8005fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe0:	2340      	movs	r3, #64	; 0x40
 8005fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fe66 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 faf8 	bl	80065f0 <SDMMC_GetCmdResp7>
 8006000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006002:	69fb      	ldr	r3, [r7, #28]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800601a:	2337      	movs	r3, #55	; 0x37
 800601c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800602c:	f107 0308 	add.w	r3, r7, #8
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fe47 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	2137      	movs	r1, #55	; 0x37
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8ec 	bl	800621c <SDMMC_GetCmdResp1>
 8006044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006046:	69fb      	ldr	r3, [r7, #28]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006066:	2329      	movs	r3, #41	; 0x29
 8006068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fe21 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9ff 	bl	8006488 <SDMMC_GetCmdResp3>
 800608a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800608c:	69fb      	ldr	r3, [r7, #28]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b088      	sub	sp, #32
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80060a4:	2306      	movs	r3, #6
 80060a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fe02 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80060c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c6:	2106      	movs	r1, #6
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8a7 	bl	800621c <SDMMC_GetCmdResp1>
 80060ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d0:	69fb      	ldr	r3, [r7, #28]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b088      	sub	sp, #32
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80060e6:	2333      	movs	r3, #51	; 0x33
 80060e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fde1 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	2133      	movs	r1, #51	; 0x33
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f886 	bl	800621c <SDMMC_GetCmdResp1>
 8006110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006112:	69fb      	ldr	r3, [r7, #28]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006128:	2302      	movs	r3, #2
 800612a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800612c:	23c0      	movs	r3, #192	; 0xc0
 800612e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fdc0 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f956 	bl	80063f8 <SDMMC_GetCmdResp2>
 800614c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800614e:	69fb      	ldr	r3, [r7, #28]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006166:	2309      	movs	r3, #9
 8006168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800616a:	23c0      	movs	r3, #192	; 0xc0
 800616c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006178:	f107 0308 	add.w	r3, r7, #8
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fda1 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f937 	bl	80063f8 <SDMMC_GetCmdResp2>
 800618a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618c:	69fb      	ldr	r3, [r7, #28]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3720      	adds	r7, #32
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b088      	sub	sp, #32
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80061a4:	2303      	movs	r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fd82 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	2103      	movs	r1, #3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f99c 	bl	8006504 <SDMMC_GetCmdResp6>
 80061cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ce:	69fb      	ldr	r3, [r7, #28]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80061e6:	230d      	movs	r3, #13
 80061e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fd61 	bl	8005cc6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006204:	f241 3288 	movw	r2, #5000	; 0x1388
 8006208:	210d      	movs	r1, #13
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f806 	bl	800621c <SDMMC_GetCmdResp1>
 8006210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006212:	69fb      	ldr	r3, [r7, #28]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800622a:	4b70      	ldr	r3, [pc, #448]	; (80063ec <SDMMC_GetCmdResp1+0x1d0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a70      	ldr	r2, [pc, #448]	; (80063f0 <SDMMC_GetCmdResp1+0x1d4>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	0a5a      	lsrs	r2, r3, #9
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800624c:	e0c9      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ef      	beq.n	800623e <SDMMC_GetCmdResp1+0x22>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ea      	bne.n	800623e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2204      	movs	r2, #4
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800627a:	2304      	movs	r3, #4
 800627c:	e0b1      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d004      	beq.n	8006294 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006290:	2301      	movs	r3, #1
 8006292:	e0a6      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22c5      	movs	r2, #197	; 0xc5
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fd3d 	bl	8005d1a <SDIO_GetCommandResponse>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d001      	beq.n	80062ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e099      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fd3f 	bl	8005d34 <SDIO_GetResponse>
 80062b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <SDMMC_GetCmdResp1+0x1d8>)
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e08d      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da02      	bge.n	80062d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80062cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d0:	e087      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	e080      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	e079      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80062f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062fc:	e071      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630c:	e069      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800631c:	e061      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800632c:	e059      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800633c:	e051      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800634c:	e049      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800635c:	e041      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636c:	e039      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800637c:	e031      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800638c:	e029      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006398:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800639c:	e021      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80063a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063ac:	e019      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80063b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063bc:	e011      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80063c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063cc:	e009      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063dc:	e001      	b.n	80063e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000050 	.word	0x20000050
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	fdffe008 	.word	0xfdffe008

080063f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006400:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <SDMMC_GetCmdResp2+0x88>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <SDMMC_GetCmdResp2+0x8c>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	fb02 f303 	mul.w	r3, r2, r3
 8006414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006424:	e026      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0ef      	beq.n	8006416 <SDMMC_GetCmdResp2+0x1e>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ea      	bne.n	8006416 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006452:	2304      	movs	r3, #4
 8006454:	e00e      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006468:	2301      	movs	r3, #1
 800646a:	e003      	b.n	8006474 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	22c5      	movs	r2, #197	; 0xc5
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000050 	.word	0x20000050
 8006484:	10624dd3 	.word	0x10624dd3

08006488 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <SDMMC_GetCmdResp3+0x74>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <SDMMC_GetCmdResp3+0x78>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0a5b      	lsrs	r3, r3, #9
 800649c:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1e5a      	subs	r2, r3, #1
 80064aa:	60fa      	str	r2, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064b4:	e01b      	b.n	80064ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ef      	beq.n	80064a6 <SDMMC_GetCmdResp3+0x1e>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ea      	bne.n	80064a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2204      	movs	r2, #4
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064e2:	2304      	movs	r3, #4
 80064e4:	e003      	b.n	80064ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	22c5      	movs	r2, #197	; 0xc5
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000050 	.word	0x20000050
 8006500:	10624dd3 	.word	0x10624dd3

08006504 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	460b      	mov	r3, r1
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006512:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <SDMMC_GetCmdResp6+0xe4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a35      	ldr	r2, [pc, #212]	; (80065ec <SDMMC_GetCmdResp6+0xe8>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	0a5b      	lsrs	r3, r3, #9
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	61fa      	str	r2, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006532:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006536:	e052      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ef      	beq.n	8006528 <SDMMC_GetCmdResp6+0x24>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ea      	bne.n	8006528 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2204      	movs	r2, #4
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006564:	2304      	movs	r3, #4
 8006566:	e03a      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800657a:	2301      	movs	r3, #1
 800657c:	e02f      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fbcb 	bl	8005d1a <SDIO_GetCommandResponse>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	4293      	cmp	r3, r2
 800658c:	d001      	beq.n	8006592 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800658e:	2301      	movs	r3, #1
 8006590:	e025      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	22c5      	movs	r2, #197	; 0xc5
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fbca 	bl	8005d34 <SDIO_GetResponse>
 80065a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e011      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065c8:	e009      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065d8:	e001      	b.n	80065de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000050 	.word	0x20000050
 80065ec:	10624dd3 	.word	0x10624dd3

080065f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <SDMMC_GetCmdResp7+0x94>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <SDMMC_GetCmdResp7+0x98>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0a5b      	lsrs	r3, r3, #9
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1e5a      	subs	r2, r3, #1
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800661c:	e02c      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <SDMMC_GetCmdResp7+0x1e>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ea      	bne.n	800660e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800664a:	2304      	movs	r3, #4
 800664c:	e014      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006660:	2301      	movs	r3, #1
 8006662:	e009      	b.n	8006678 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006676:	2300      	movs	r3, #0
  
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20000050 	.word	0x20000050
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <SDMMC_GetCmdError+0x50>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <SDMMC_GetCmdError+0x54>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a5b      	lsrs	r3, r3, #9
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066b8:	e009      	b.n	80066ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f1      	beq.n	80066aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	22c5      	movs	r2, #197	; 0xc5
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000050 	.word	0x20000050
 80066e0:	10624dd3 	.word	0x10624dd3

080066e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <MX_FATFS_Init+0x18>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <MX_FATFS_Init+0x1c>)
 80066ec:	f002 fe60 	bl	80093b0 <FATFS_LinkDriver>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <MX_FATFS_Init+0x20>)
 80066f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20003c84 	.word	0x20003c84
 8006700:	0800a5b4 	.word	0x0800a5b4
 8006704:	20003c80 	.word	0x20003c80

08006708 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800670c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800670e:	4618      	mov	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006722:	f000 f879 	bl	8006818 <BSP_SD_IsDetected>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e012      	b.n	8006756 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006730:	480b      	ldr	r0, [pc, #44]	; (8006760 <BSP_SD_Init+0x48>)
 8006732:	f7fd fe17 	bl	8004364 <HAL_SD_Init>
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006744:	4806      	ldr	r0, [pc, #24]	; (8006760 <BSP_SD_Init+0x48>)
 8006746:	f7fe fbf1 	bl	8004f2c <HAL_SD_ConfigWideBusOperation>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006754:	79fb      	ldrb	r3, [r7, #7]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000ba4 	.word	0x20000ba4

08006764 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	4806      	ldr	r0, [pc, #24]	; (800679c <BSP_SD_ReadBlocks+0x38>)
 8006782:	f7fd fe9f 	bl	80044c4 <HAL_SD_ReadBlocks>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000ba4 	.word	0x20000ba4

080067a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	4806      	ldr	r0, [pc, #24]	; (80067d8 <BSP_SD_WriteBlocks+0x38>)
 80067be:	f7fe f85f 	bl	8004880 <HAL_SD_WriteBlocks>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000ba4 	.word	0x20000ba4

080067dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80067e0:	4805      	ldr	r0, [pc, #20]	; (80067f8 <BSP_SD_GetCardState+0x1c>)
 80067e2:	f7fe fc3d 	bl	8005060 <HAL_SD_GetCardState>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000ba4 	.word	0x20000ba4

080067fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4803      	ldr	r0, [pc, #12]	; (8006814 <BSP_SD_GetCardInfo+0x18>)
 8006808:	f7fe fb64 	bl	8004ed4 <HAL_SD_GetCardInfo>
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000ba4 	.word	0x20000ba4

08006818 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800681e:	2301      	movs	r3, #1
 8006820:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	b2db      	uxtb	r3, r3
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <SD_CheckStatus+0x38>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006844:	f7ff ffca 	bl	80067dc <BSP_SD_GetCardState>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800684e:	4b07      	ldr	r3, [pc, #28]	; (800686c <SD_CheckStatus+0x38>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <SD_CheckStatus+0x38>)
 800685c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800685e:	4b03      	ldr	r3, [pc, #12]	; (800686c <SD_CheckStatus+0x38>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000059 	.word	0x20000059

08006870 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <SD_initialize+0x38>)
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006880:	f7ff ff4a 	bl	8006718 <BSP_SD_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ffd1 	bl	8006834 <SD_CheckStatus>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <SD_initialize+0x38>)
 8006898:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <SD_initialize+0x38>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000059 	.word	0x20000059

080068ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff ffbb 	bl	8006834 <SD_CheckStatus>
 80068be:	4603      	mov	r3, r0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	68b8      	ldr	r0, [r7, #8]
 80068e6:	f7ff ff3d 	bl	8006764 <BSP_SD_ReadBlocks>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80068f0:	bf00      	nop
 80068f2:	f7ff ff73 	bl	80067dc <BSP_SD_GetCardState>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1fa      	bne.n	80068f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f7ff ff3a 	bl	80067a0 <BSP_SD_WriteBlocks>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d107      	bne.n	8006942 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006932:	bf00      	nop
 8006934:	f7ff ff52 	bl	80067dc <BSP_SD_GetCardState>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1fa      	bne.n	8006934 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08c      	sub	sp, #48	; 0x30
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	603a      	str	r2, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
 8006958:	460b      	mov	r3, r1
 800695a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006962:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <SD_ioctl+0xac>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <SD_ioctl+0x28>
 8006970:	2303      	movs	r3, #3
 8006972:	e03c      	b.n	80069ee <SD_ioctl+0xa2>

  switch (cmd)
 8006974:	79bb      	ldrb	r3, [r7, #6]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d834      	bhi.n	80069e4 <SD_ioctl+0x98>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <SD_ioctl+0x34>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	08006999 	.word	0x08006999
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069cb 	.word	0x080069cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006996:	e028      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff2d 	bl	80067fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069ae:	e01c      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff21 	bl	80067fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	b29a      	uxth	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069c8:	e00f      	b.n	80069ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069ca:	f107 030c 	add.w	r3, r7, #12
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff ff14 	bl	80067fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	0a5a      	lsrs	r2, r3, #9
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069e2:	e002      	b.n	80069ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80069ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3730      	adds	r7, #48	; 0x30
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000059 	.word	0x20000059

080069fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <disk_status+0x30>)
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	79fa      	ldrb	r2, [r7, #7]
 8006a14:	4905      	ldr	r1, [pc, #20]	; (8006a2c <disk_status+0x30>)
 8006a16:	440a      	add	r2, r1
 8006a18:	7a12      	ldrb	r2, [r2, #8]
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	4798      	blx	r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20003cc0 	.word	0x20003cc0

08006a30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	4a0d      	ldr	r2, [pc, #52]	; (8006a78 <disk_initialize+0x48>)
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d111      	bne.n	8006a6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	4a0b      	ldr	r2, [pc, #44]	; (8006a78 <disk_initialize+0x48>)
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <disk_initialize+0x48>)
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	79fa      	ldrb	r2, [r7, #7]
 8006a5e:	4906      	ldr	r1, [pc, #24]	; (8006a78 <disk_initialize+0x48>)
 8006a60:	440a      	add	r2, r1
 8006a62:	7a12      	ldrb	r2, [r2, #8]
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20003cc0 	.word	0x20003cc0

08006a7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a7c:	b590      	push	{r4, r7, lr}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	; (8006ab8 <disk_read+0x3c>)
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	689c      	ldr	r4, [r3, #8]
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <disk_read+0x3c>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	7a18      	ldrb	r0, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	47a0      	blx	r4
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd90      	pop	{r4, r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20003cc0 	.word	0x20003cc0

08006abc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	4a0a      	ldr	r2, [pc, #40]	; (8006af8 <disk_write+0x3c>)
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	68dc      	ldr	r4, [r3, #12]
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	4a07      	ldr	r2, [pc, #28]	; (8006af8 <disk_write+0x3c>)
 8006adc:	4413      	add	r3, r2
 8006ade:	7a18      	ldrb	r0, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	47a0      	blx	r4
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]
  return res;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd90      	pop	{r4, r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20003cc0 	.word	0x20003cc0

08006afc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	603a      	str	r2, [r7, #0]
 8006b06:	71fb      	strb	r3, [r7, #7]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <disk_ioctl+0x38>)
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	79fa      	ldrb	r2, [r7, #7]
 8006b1a:	4906      	ldr	r1, [pc, #24]	; (8006b34 <disk_ioctl+0x38>)
 8006b1c:	440a      	add	r2, r1
 8006b1e:	7a10      	ldrb	r0, [r2, #8]
 8006b20:	79b9      	ldrb	r1, [r7, #6]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	4798      	blx	r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20003cc0 	.word	0x20003cc0

08006b38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3301      	adds	r3, #1
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b48:	89fb      	ldrh	r3, [r7, #14]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b21b      	sxth	r3, r3
 8006b58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3303      	adds	r3, #3
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	3202      	adds	r2, #2
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	3201      	adds	r2, #1
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	887a      	ldrh	r2, [r7, #2]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	887b      	ldrh	r3, [r7, #2]
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	887a      	ldrh	r2, [r7, #2]
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	1c53      	adds	r3, r2, #1
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	6179      	str	r1, [r7, #20]
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f1      	bne.n	8006c56 <mem_cpy+0x1a>
	}
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c7e:	b480      	push	{r7}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	617a      	str	r2, [r7, #20]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f3      	bne.n	8006c8e <mem_set+0x10>
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	; 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	61fa      	str	r2, [r7, #28]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	61ba      	str	r2, [r7, #24]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	1acb      	subs	r3, r1, r3
 8006ce0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <mem_cmp+0x40>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0eb      	beq.n	8006ccc <mem_cmp+0x18>

	return r;
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3724      	adds	r7, #36	; 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d0c:	e002      	b.n	8006d14 <chk_chr+0x12>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3301      	adds	r3, #1
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <chk_chr+0x26>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d1f2      	bne.n	8006d0e <chk_chr+0xc>
	return *str;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e029      	b.n	8006da0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <chk_lock+0xb4>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4413      	add	r3, r2
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01d      	beq.n	8006d96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d5a:	4a24      	ldr	r2, [pc, #144]	; (8006dec <chk_lock+0xb4>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	4413      	add	r3, r2
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d116      	bne.n	8006d9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	; (8006dec <chk_lock+0xb4>)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4413      	add	r3, r2
 8006d74:	3304      	adds	r3, #4
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d10c      	bne.n	8006d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d80:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <chk_lock+0xb4>)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	4413      	add	r3, r2
 8006d88:	3308      	adds	r3, #8
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d102      	bne.n	8006d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d94:	e007      	b.n	8006da6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d9d2      	bls.n	8006d4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d109      	bne.n	8006dc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <chk_lock+0x80>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d101      	bne.n	8006dbc <chk_lock+0x84>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e010      	b.n	8006dde <chk_lock+0xa6>
 8006dbc:	2312      	movs	r3, #18
 8006dbe:	e00e      	b.n	8006dde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <chk_lock+0xa0>
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <chk_lock+0xb4>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	4413      	add	r3, r2
 8006dce:	330c      	adds	r3, #12
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd6:	d101      	bne.n	8006ddc <chk_lock+0xa4>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	e000      	b.n	8006dde <chk_lock+0xa6>
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20003c90 	.word	0x20003c90

08006df0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	e002      	b.n	8006e02 <enq_lock+0x12>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d806      	bhi.n	8006e16 <enq_lock+0x26>
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <enq_lock+0x40>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4413      	add	r3, r2
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f2      	bne.n	8006dfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20003c90 	.word	0x20003c90

08006e34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e01f      	b.n	8006e84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e44:	4a41      	ldr	r2, [pc, #260]	; (8006f4c <inc_lock+0x118>)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	4413      	add	r3, r2
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d113      	bne.n	8006e7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e56:	4a3d      	ldr	r2, [pc, #244]	; (8006f4c <inc_lock+0x118>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3304      	adds	r3, #4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d109      	bne.n	8006e7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e6a:	4a38      	ldr	r2, [pc, #224]	; (8006f4c <inc_lock+0x118>)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	4413      	add	r3, r2
 8006e72:	3308      	adds	r3, #8
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d006      	beq.n	8006e8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d9dc      	bls.n	8006e44 <inc_lock+0x10>
 8006e8a:	e000      	b.n	8006e8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d132      	bne.n	8006efa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e002      	b.n	8006ea0 <inc_lock+0x6c>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d806      	bhi.n	8006eb4 <inc_lock+0x80>
 8006ea6:	4a29      	ldr	r2, [pc, #164]	; (8006f4c <inc_lock+0x118>)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	4413      	add	r3, r2
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f2      	bne.n	8006e9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d101      	bne.n	8006ebe <inc_lock+0x8a>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e040      	b.n	8006f40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4922      	ldr	r1, [pc, #136]	; (8006f4c <inc_lock+0x118>)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	440b      	add	r3, r1
 8006eca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	491e      	ldr	r1, [pc, #120]	; (8006f4c <inc_lock+0x118>)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3304      	adds	r3, #4
 8006eda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	491a      	ldr	r1, [pc, #104]	; (8006f4c <inc_lock+0x118>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3308      	adds	r3, #8
 8006eea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <inc_lock+0x118>)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <inc_lock+0xe0>
 8006f00:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <inc_lock+0x118>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	4413      	add	r3, r2
 8006f08:	330c      	adds	r3, #12
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <inc_lock+0xe0>
 8006f10:	2300      	movs	r3, #0
 8006f12:	e015      	b.n	8006f40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <inc_lock+0xf8>
 8006f1a:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <inc_lock+0x118>)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	4413      	add	r3, r2
 8006f22:	330c      	adds	r3, #12
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	e001      	b.n	8006f30 <inc_lock+0xfc>
 8006f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f30:	4906      	ldr	r1, [pc, #24]	; (8006f4c <inc_lock+0x118>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	440b      	add	r3, r1
 8006f38:	330c      	adds	r3, #12
 8006f3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20003c90 	.word	0x20003c90

08006f50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d825      	bhi.n	8006fb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f64:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <dec_lock+0x74>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f72:	89fb      	ldrh	r3, [r7, #14]
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d101      	bne.n	8006f7e <dec_lock+0x2e>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <dec_lock+0x3a>
 8006f84:	89fb      	ldrh	r3, [r7, #14]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f8a:	4a0e      	ldr	r2, [pc, #56]	; (8006fc4 <dec_lock+0x74>)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	330c      	adds	r3, #12
 8006f94:	89fa      	ldrh	r2, [r7, #14]
 8006f96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f98:	89fb      	ldrh	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <dec_lock+0x5a>
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <dec_lock+0x74>)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	737b      	strb	r3, [r7, #13]
 8006fae:	e001      	b.n	8006fb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006fb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20003c90 	.word	0x20003c90

08006fc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e010      	b.n	8006ff8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fd6:	4a0d      	ldr	r2, [pc, #52]	; (800700c <clear_lock+0x44>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	4413      	add	r3, r2
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d105      	bne.n	8006ff2 <clear_lock+0x2a>
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <clear_lock+0x44>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	4413      	add	r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d9eb      	bls.n	8006fd6 <clear_lock+0xe>
	}
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20003c90 	.word	0x20003c90

08007010 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d034      	beq.n	800708e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7858      	ldrb	r0, [r3, #1]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007034:	2301      	movs	r3, #1
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	f7ff fd40 	bl	8006abc <disk_write>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]
 8007046:	e022      	b.n	800708e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d217      	bcs.n	800708e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e010      	b.n	8007088 <sync_window+0x78>
					wsect += fs->fsize;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	7858      	ldrb	r0, [r3, #1]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800707a:	2301      	movs	r3, #1
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	f7ff fd1d 	bl	8006abc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	3b01      	subs	r3, #1
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d8eb      	bhi.n	8007066 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d01b      	beq.n	80070e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ffad 	bl	8007010 <sync_window>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d113      	bne.n	80070e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7858      	ldrb	r0, [r3, #1]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070ca:	2301      	movs	r3, #1
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f7ff fcd5 	bl	8006a7c <disk_read>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ff87 	bl	8007010 <sync_window>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d158      	bne.n	80071be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d148      	bne.n	80071a6 <sync_fs+0xb2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d144      	bne.n	80071a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3330      	adds	r3, #48	; 0x30
 8007120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fda9 	bl	8006c7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3330      	adds	r3, #48	; 0x30
 8007130:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007134:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fd38 	bl	8006bae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3330      	adds	r3, #48	; 0x30
 8007142:	4921      	ldr	r1, [pc, #132]	; (80071c8 <sync_fs+0xd4>)
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fd4d 	bl	8006be4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3330      	adds	r3, #48	; 0x30
 800714e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007152:	491e      	ldr	r1, [pc, #120]	; (80071cc <sync_fs+0xd8>)
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fd45 	bl	8006be4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3330      	adds	r3, #48	; 0x30
 800715e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7ff fd3b 	bl	8006be4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3330      	adds	r3, #48	; 0x30
 8007172:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7ff fd31 	bl	8006be4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7858      	ldrb	r0, [r3, #1]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	2301      	movs	r3, #1
 800719c:	f7ff fc8e 	bl	8006abc <disk_write>
			fs->fsi_flag = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fca4 	bl	8006afc <disk_ioctl>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <sync_fs+0xca>
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	41615252 	.word	0x41615252
 80071cc:	61417272 	.word	0x61417272

080071d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3b02      	subs	r3, #2
 80071de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	3b02      	subs	r3, #2
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d301      	bcc.n	80071f0 <clust2sect+0x20>
 80071ec:	2300      	movs	r3, #0
 80071ee:	e008      	b.n	8007202 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	895b      	ldrh	r3, [r3, #10]
 80071f4:	461a      	mov	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	fb03 f202 	mul.w	r2, r3, r2
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	4413      	add	r3, r2
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d904      	bls.n	800722e <get_fat+0x20>
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <get_fat+0x26>
		val = 1;	/* Internal error */
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e08f      	b.n	8007354 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b03      	cmp	r3, #3
 8007240:	d062      	beq.n	8007308 <get_fat+0xfa>
 8007242:	2b03      	cmp	r3, #3
 8007244:	dc7c      	bgt.n	8007340 <get_fat+0x132>
 8007246:	2b01      	cmp	r3, #1
 8007248:	d002      	beq.n	8007250 <get_fat+0x42>
 800724a:	2b02      	cmp	r3, #2
 800724c:	d042      	beq.n	80072d4 <get_fat+0xc6>
 800724e:	e077      	b.n	8007340 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	0a5b      	lsrs	r3, r3, #9
 8007266:	4413      	add	r3, r2
 8007268:	4619      	mov	r1, r3
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f7ff ff14 	bl	8007098 <move_window>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d167      	bne.n	8007346 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	60fa      	str	r2, [r7, #12]
 800727c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007288:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	0a5b      	lsrs	r3, r3, #9
 8007292:	4413      	add	r3, r2
 8007294:	4619      	mov	r1, r3
 8007296:	6938      	ldr	r0, [r7, #16]
 8007298:	f7ff fefe 	bl	8007098 <move_window>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d153      	bne.n	800734a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	461a      	mov	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <get_fat+0xbc>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	091b      	lsrs	r3, r3, #4
 80072c8:	e002      	b.n	80072d0 <get_fat+0xc2>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d0:	617b      	str	r3, [r7, #20]
			break;
 80072d2:	e03f      	b.n	8007354 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6a1a      	ldr	r2, [r3, #32]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	4413      	add	r3, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	6938      	ldr	r0, [r7, #16]
 80072e2:	f7ff fed9 	bl	8007098 <move_window>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d130      	bne.n	800734e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072fa:	4413      	add	r3, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fc1b 	bl	8006b38 <ld_word>
 8007302:	4603      	mov	r3, r0
 8007304:	617b      	str	r3, [r7, #20]
			break;
 8007306:	e025      	b.n	8007354 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	09db      	lsrs	r3, r3, #7
 8007310:	4413      	add	r3, r2
 8007312:	4619      	mov	r1, r3
 8007314:	6938      	ldr	r0, [r7, #16]
 8007316:	f7ff febf 	bl	8007098 <move_window>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d118      	bne.n	8007352 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800732e:	4413      	add	r3, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fc19 	bl	8006b68 <ld_dword>
 8007336:	4603      	mov	r3, r0
 8007338:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800733c:	617b      	str	r3, [r7, #20]
			break;
 800733e:	e009      	b.n	8007354 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e006      	b.n	8007354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007346:	bf00      	nop
 8007348:	e004      	b.n	8007354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800734a:	bf00      	nop
 800734c:	e002      	b.n	8007354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007352:	bf00      	nop
		}
	}

	return val;
 8007354:	697b      	ldr	r3, [r7, #20]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800735e:	b590      	push	{r4, r7, lr}
 8007360:	b089      	sub	sp, #36	; 0x24
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800736a:	2302      	movs	r3, #2
 800736c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b01      	cmp	r3, #1
 8007372:	f240 80d2 	bls.w	800751a <put_fat+0x1bc>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	f080 80cc 	bcs.w	800751a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b03      	cmp	r3, #3
 8007388:	f000 8096 	beq.w	80074b8 <put_fat+0x15a>
 800738c:	2b03      	cmp	r3, #3
 800738e:	f300 80cd 	bgt.w	800752c <put_fat+0x1ce>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d002      	beq.n	800739c <put_fat+0x3e>
 8007396:	2b02      	cmp	r3, #2
 8007398:	d06e      	beq.n	8007478 <put_fat+0x11a>
 800739a:	e0c7      	b.n	800752c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4413      	add	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	0a5b      	lsrs	r3, r3, #9
 80073b2:	4413      	add	r3, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fe6e 	bl	8007098 <move_window>
 80073bc:	4603      	mov	r3, r0
 80073be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 80ab 	bne.w	800751e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	1c59      	adds	r1, r3, #1
 80073d2:	61b9      	str	r1, [r7, #24]
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	4413      	add	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00d      	beq.n	8007402 <put_fat+0xa4>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	b25b      	sxtb	r3, r3
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	b25a      	sxtb	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	e001      	b.n	8007406 <put_fat+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	0a5b      	lsrs	r3, r3, #9
 8007418:	4413      	add	r3, r2
 800741a:	4619      	mov	r1, r3
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff fe3b 	bl	8007098 <move_window>
 8007422:	4603      	mov	r3, r0
 8007424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007426:	7ffb      	ldrb	r3, [r7, #31]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d17a      	bne.n	8007522 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007438:	4413      	add	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <put_fat+0xf0>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	b2db      	uxtb	r3, r3
 800744c:	e00e      	b.n	800746c <put_fat+0x10e>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b25b      	sxtb	r3, r3
 8007454:	f023 030f 	bic.w	r3, r3, #15
 8007458:	b25a      	sxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0a1b      	lsrs	r3, r3, #8
 800745e:	b25b      	sxtb	r3, r3
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	b25b      	sxtb	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b25b      	sxtb	r3, r3
 800746a:	b2db      	uxtb	r3, r3
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	70da      	strb	r2, [r3, #3]
			break;
 8007476:	e059      	b.n	800752c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	4413      	add	r3, r2
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fe07 	bl	8007098 <move_window>
 800748a:	4603      	mov	r3, r0
 800748c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800748e:	7ffb      	ldrb	r3, [r7, #31]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d148      	bne.n	8007526 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074a2:	4413      	add	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	b292      	uxth	r2, r2
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fb7f 	bl	8006bae <st_word>
			fs->wflag = 1;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	70da      	strb	r2, [r3, #3]
			break;
 80074b6:	e039      	b.n	800752c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	09db      	lsrs	r3, r3, #7
 80074c0:	4413      	add	r3, r2
 80074c2:	4619      	mov	r1, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fde7 	bl	8007098 <move_window>
 80074ca:	4603      	mov	r3, r0
 80074cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074ce:	7ffb      	ldrb	r3, [r7, #31]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d12a      	bne.n	800752a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074e8:	4413      	add	r3, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fb3c 	bl	8006b68 <ld_dword>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074f6:	4323      	orrs	r3, r4
 80074f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007508:	4413      	add	r3, r2
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fb69 	bl	8006be4 <st_dword>
			fs->wflag = 1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	70da      	strb	r2, [r3, #3]
			break;
 8007518:	e008      	b.n	800752c <put_fat+0x1ce>
		}
	}
 800751a:	bf00      	nop
 800751c:	e006      	b.n	800752c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800751e:	bf00      	nop
 8007520:	e004      	b.n	800752c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007522:	bf00      	nop
 8007524:	e002      	b.n	800752c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007526:	bf00      	nop
 8007528:	e000      	b.n	800752c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800752a:	bf00      	nop
	return res;
 800752c:	7ffb      	ldrb	r3, [r7, #31]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3724      	adds	r7, #36	; 0x24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd90      	pop	{r4, r7, pc}

08007536 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b088      	sub	sp, #32
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d904      	bls.n	800755c <remove_chain+0x26>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	429a      	cmp	r2, r3
 800755a:	d301      	bcc.n	8007560 <remove_chain+0x2a>
 800755c:	2302      	movs	r3, #2
 800755e:	e04b      	b.n	80075f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00c      	beq.n	8007580 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	69b8      	ldr	r0, [r7, #24]
 800756e:	f7ff fef6 	bl	800735e <put_fat>
 8007572:	4603      	mov	r3, r0
 8007574:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <remove_chain+0x4a>
 800757c:	7ffb      	ldrb	r3, [r7, #31]
 800757e:	e03b      	b.n	80075f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fe43 	bl	800720e <get_fat>
 8007588:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d031      	beq.n	80075f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <remove_chain+0x64>
 8007596:	2302      	movs	r3, #2
 8007598:	e02e      	b.n	80075f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d101      	bne.n	80075a6 <remove_chain+0x70>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e028      	b.n	80075f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80075a6:	2200      	movs	r2, #0
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f7ff fed7 	bl	800735e <put_fat>
 80075b0:	4603      	mov	r3, r0
 80075b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80075b4:	7ffb      	ldrb	r3, [r7, #31]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <remove_chain+0x88>
 80075ba:	7ffb      	ldrb	r3, [r7, #31]
 80075bc:	e01c      	b.n	80075f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	3b02      	subs	r3, #2
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d20b      	bcs.n	80075e4 <remove_chain+0xae>
			fs->free_clst++;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d3c6      	bcc.n	8007580 <remove_chain+0x4a>
 80075f2:	e000      	b.n	80075f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <create_chain+0x2c>
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	429a      	cmp	r2, r3
 800762a:	d31b      	bcc.n	8007664 <create_chain+0x64>
 800762c:	2301      	movs	r3, #1
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e018      	b.n	8007664 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff fdea 	bl	800720e <get_fat>
 800763a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d801      	bhi.n	8007646 <create_chain+0x46>
 8007642:	2301      	movs	r3, #1
 8007644:	e070      	b.n	8007728 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d101      	bne.n	8007652 <create_chain+0x52>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	e06a      	b.n	8007728 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d201      	bcs.n	8007660 <create_chain+0x60>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e063      	b.n	8007728 <create_chain+0x128>
		scl = clst;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	429a      	cmp	r2, r3
 8007676:	d307      	bcc.n	8007688 <create_chain+0x88>
				ncl = 2;
 8007678:	2302      	movs	r3, #2
 800767a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	429a      	cmp	r2, r3
 8007682:	d901      	bls.n	8007688 <create_chain+0x88>
 8007684:	2300      	movs	r3, #0
 8007686:	e04f      	b.n	8007728 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fdbf 	bl	800720e <get_fat>
 8007690:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d003      	beq.n	80076a6 <create_chain+0xa6>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d101      	bne.n	80076aa <create_chain+0xaa>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	e03e      	b.n	8007728 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d1da      	bne.n	8007668 <create_chain+0x68>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e038      	b.n	8007728 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80076b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	6938      	ldr	r0, [r7, #16]
 80076c0:	f7ff fe4d 	bl	800735e <put_fat>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <create_chain+0xe2>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6938      	ldr	r0, [r7, #16]
 80076da:	f7ff fe40 	bl	800735e <put_fat>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d116      	bne.n	8007716 <create_chain+0x116>
		fs->last_clst = ncl;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	3b02      	subs	r3, #2
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d804      	bhi.n	8007706 <create_chain+0x106>
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	1e5a      	subs	r2, r3, #1
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	b2da      	uxtb	r2, r3
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	711a      	strb	r2, [r3, #4]
 8007714:	e007      	b.n	8007726 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d102      	bne.n	8007722 <create_chain+0x122>
 800771c:	f04f 33ff 	mov.w	r3, #4294967295
 8007720:	e000      	b.n	8007724 <create_chain+0x124>
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007726:	69fb      	ldr	r3, [r7, #28]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	3304      	adds	r3, #4
 8007746:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	0a5b      	lsrs	r3, r3, #9
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	8952      	ldrh	r2, [r2, #10]
 8007750:	fbb3 f3f2 	udiv	r3, r3, r2
 8007754:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	613a      	str	r2, [r7, #16]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <clmt_clust+0x3a>
 8007766:	2300      	movs	r3, #0
 8007768:	e010      	b.n	800778c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	429a      	cmp	r2, r3
 8007770:	d307      	bcc.n	8007782 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3304      	adds	r3, #4
 800777e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007780:	e7e9      	b.n	8007756 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007782:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	4413      	add	r3, r2
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ae:	d204      	bcs.n	80077ba <dir_sdi+0x22>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <dir_sdi+0x26>
		return FR_INT_ERR;
 80077ba:	2302      	movs	r3, #2
 80077bc:	e063      	b.n	8007886 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <dir_sdi+0x46>
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d902      	bls.n	80077de <dir_sdi+0x46>
		clst = fs->dirbase;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	8912      	ldrh	r2, [r2, #8]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d301      	bcc.n	80077f4 <dir_sdi+0x5c>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e048      	b.n	8007886 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	61da      	str	r2, [r3, #28]
 80077fc:	e029      	b.n	8007852 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	895b      	ldrh	r3, [r3, #10]
 8007802:	025b      	lsls	r3, r3, #9
 8007804:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007806:	e019      	b.n	800783c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fcfe 	bl	800720e <get_fat>
 8007812:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d101      	bne.n	8007820 <dir_sdi+0x88>
 800781c:	2301      	movs	r3, #1
 800781e:	e032      	b.n	8007886 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d904      	bls.n	8007830 <dir_sdi+0x98>
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	429a      	cmp	r2, r3
 800782e:	d301      	bcc.n	8007834 <dir_sdi+0x9c>
 8007830:	2302      	movs	r3, #2
 8007832:	e028      	b.n	8007886 <dir_sdi+0xee>
			ofs -= csz;
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	429a      	cmp	r2, r3
 8007842:	d2e1      	bcs.n	8007808 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007844:	6979      	ldr	r1, [r7, #20]
 8007846:	6938      	ldr	r0, [r7, #16]
 8007848:	f7ff fcc2 	bl	80071d0 <clust2sect>
 800784c:	4602      	mov	r2, r0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <dir_sdi+0xcc>
 8007860:	2302      	movs	r3, #2
 8007862:	e010      	b.n	8007886 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	0a5b      	lsrs	r3, r3, #9
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787e:	441a      	add	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	3320      	adds	r3, #32
 80078a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <dir_next+0x28>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078b4:	d301      	bcc.n	80078ba <dir_next+0x2c>
 80078b6:	2304      	movs	r3, #4
 80078b8:	e0aa      	b.n	8007a10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 8098 	bne.w	80079f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	8912      	ldrh	r2, [r2, #8]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	f0c0 8088 	bcc.w	80079f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	61da      	str	r2, [r3, #28]
 80078ec:	2304      	movs	r3, #4
 80078ee:	e08f      	b.n	8007a10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	0a5b      	lsrs	r3, r3, #9
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	8952      	ldrh	r2, [r2, #10]
 80078f8:	3a01      	subs	r2, #1
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d17a      	bne.n	80079f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7ff fc80 	bl	800720e <get_fat>
 800790e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d801      	bhi.n	800791a <dir_next+0x8c>
 8007916:	2302      	movs	r3, #2
 8007918:	e07a      	b.n	8007a10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d101      	bne.n	8007926 <dir_next+0x98>
 8007922:	2301      	movs	r3, #1
 8007924:	e074      	b.n	8007a10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	d358      	bcc.n	80079e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	61da      	str	r2, [r3, #28]
 800793c:	2304      	movs	r3, #4
 800793e:	e067      	b.n	8007a10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	4619      	mov	r1, r3
 8007948:	4610      	mov	r0, r2
 800794a:	f7ff fe59 	bl	8007600 <create_chain>
 800794e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <dir_next+0xcc>
 8007956:	2307      	movs	r3, #7
 8007958:	e05a      	b.n	8007a10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <dir_next+0xd6>
 8007960:	2302      	movs	r3, #2
 8007962:	e055      	b.n	8007a10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d101      	bne.n	8007970 <dir_next+0xe2>
 800796c:	2301      	movs	r3, #1
 800796e:	e04f      	b.n	8007a10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fb4d 	bl	8007010 <sync_window>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <dir_next+0xf2>
 800797c:	2301      	movs	r3, #1
 800797e:	e047      	b.n	8007a10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3330      	adds	r3, #48	; 0x30
 8007984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff f977 	bl	8006c7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7ff fc1a 	bl	80071d0 <clust2sect>
 800799c:	4602      	mov	r2, r0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80079a2:	e012      	b.n	80079ca <dir_next+0x13c>
						fs->wflag = 1;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f7ff fb30 	bl	8007010 <sync_window>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <dir_next+0x12c>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e02a      	b.n	8007a10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	895b      	ldrh	r3, [r3, #10]
 80079ce:	461a      	mov	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d3e6      	bcc.n	80079a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad2      	subs	r2, r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079e8:	6979      	ldr	r1, [r7, #20]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7ff fbf0 	bl	80071d0 <clust2sect>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	441a      	add	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff feb4 	bl	8007798 <dir_sdi>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d12b      	bne.n	8007a92 <dir_alloc+0x7a>
		n = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4619      	mov	r1, r3
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fb27 	bl	8007098 <move_window>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d11d      	bne.n	8007a90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2be5      	cmp	r3, #229	; 0xe5
 8007a5c:	d004      	beq.n	8007a68 <dir_alloc+0x50>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d102      	bne.n	8007a7c <dir_alloc+0x64>
 8007a76:	e00c      	b.n	8007a92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a78:	2300      	movs	r3, #0
 8007a7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff ff05 	bl	800788e <dir_next>
 8007a84:	4603      	mov	r3, r0
 8007a86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0d7      	beq.n	8007a3e <dir_alloc+0x26>
 8007a8e:	e000      	b.n	8007a92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d101      	bne.n	8007a9c <dir_alloc+0x84>
 8007a98:	2307      	movs	r3, #7
 8007a9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	331a      	adds	r3, #26
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff f83f 	bl	8006b38 <ld_word>
 8007aba:	4603      	mov	r3, r0
 8007abc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d109      	bne.n	8007ada <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff f834 	bl	8006b38 <ld_word>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	041b      	lsls	r3, r3, #16
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	331a      	adds	r3, #26
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	b292      	uxth	r2, r2
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f857 	bl	8006bae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d109      	bne.n	8007b1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f103 0214 	add.w	r2, r3, #20
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7ff f849 	bl	8006bae <st_word>
	}
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007b2e:	2304      	movs	r3, #4
 8007b30:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007b38:	e03c      	b.n	8007bb4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6938      	ldr	r0, [r7, #16]
 8007b42:	f7ff faa9 	bl	8007098 <move_window>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d136      	bne.n	8007bbe <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007b5e:	2304      	movs	r3, #4
 8007b60:	75fb      	strb	r3, [r7, #23]
 8007b62:	e031      	b.n	8007bc8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	330b      	adds	r3, #11
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b70:	73bb      	strb	r3, [r7, #14]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7bba      	ldrb	r2, [r7, #14]
 8007b76:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2be5      	cmp	r3, #229	; 0xe5
 8007b7c:	d011      	beq.n	8007ba2 <dir_read+0x7e>
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b2e      	cmp	r3, #46	; 0x2e
 8007b82:	d00e      	beq.n	8007ba2 <dir_read+0x7e>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d00b      	beq.n	8007ba2 <dir_read+0x7e>
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	f023 0320 	bic.w	r3, r3, #32
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00f      	beq.n	8007bc2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fe72 	bl	800788e <dir_next>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <dir_read+0xa2>
	while (dp->sect) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1be      	bne.n	8007b3a <dir_read+0x16>
 8007bbc:	e004      	b.n	8007bc8 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <dir_read+0xa4>
				break;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007bc6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <dir_read+0xb0>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	61da      	str	r2, [r3, #28]
	return res;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b086      	sub	sp, #24
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fdd2 	bl	8007798 <dir_sdi>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <dir_find+0x24>
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	e03e      	b.n	8007c80 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6938      	ldr	r0, [r7, #16]
 8007c0a:	f7ff fa45 	bl	8007098 <move_window>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d12f      	bne.n	8007c78 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d102      	bne.n	8007c2c <dir_find+0x4e>
 8007c26:	2304      	movs	r3, #4
 8007c28:	75fb      	strb	r3, [r7, #23]
 8007c2a:	e028      	b.n	8007c7e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	330b      	adds	r3, #11
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	330b      	adds	r3, #11
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <dir_find+0x86>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a18      	ldr	r0, [r3, #32]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3324      	adds	r3, #36	; 0x24
 8007c56:	220b      	movs	r2, #11
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7ff f82b 	bl	8006cb4 <mem_cmp>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fe11 	bl	800788e <dir_next>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0c5      	beq.n	8007c02 <dir_find+0x24>
 8007c76:	e002      	b.n	8007c7e <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c7c:	bf00      	nop

	return res;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c96:	2101      	movs	r1, #1
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff febd 	bl	8007a18 <dir_alloc>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11c      	bne.n	8007ce2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	4619      	mov	r1, r3
 8007cae:	68b8      	ldr	r0, [r7, #8]
 8007cb0:	f7ff f9f2 	bl	8007098 <move_window>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d111      	bne.n	8007ce2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe ffd9 	bl	8006c7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a18      	ldr	r0, [r3, #32]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	220b      	movs	r2, #11
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	f7fe ffb0 	bl	8006c3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff f9c9 	bl	8007098 <move_window>
 8007d06:	4603      	mov	r3, r0
 8007d08:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	22e5      	movs	r2, #229	; 0xe5
 8007d16:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3324      	adds	r3, #36	; 0x24
 8007d3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007d3e:	220b      	movs	r2, #11
 8007d40:	2120      	movs	r1, #32
 8007d42:	68b8      	ldr	r0, [r7, #8]
 8007d44:	f7fe ff9b 	bl	8006c7e <mem_set>
	si = i = 0; ni = 8;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	2308      	movs	r3, #8
 8007d52:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	61fa      	str	r2, [r7, #28]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d62:	7efb      	ldrb	r3, [r7, #27]
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d94e      	bls.n	8007e06 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007d68:	7efb      	ldrb	r3, [r7, #27]
 8007d6a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d6c:	d006      	beq.n	8007d7c <create_name+0x54>
 8007d6e:	7efb      	ldrb	r3, [r7, #27]
 8007d70:	2b5c      	cmp	r3, #92	; 0x5c
 8007d72:	d110      	bne.n	8007d96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d74:	e002      	b.n	8007d7c <create_name+0x54>
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b2f      	cmp	r3, #47	; 0x2f
 8007d86:	d0f6      	beq.n	8007d76 <create_name+0x4e>
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b5c      	cmp	r3, #92	; 0x5c
 8007d92:	d0f0      	beq.n	8007d76 <create_name+0x4e>
			break;
 8007d94:	e038      	b.n	8007e08 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d96:	7efb      	ldrb	r3, [r7, #27]
 8007d98:	2b2e      	cmp	r3, #46	; 0x2e
 8007d9a:	d003      	beq.n	8007da4 <create_name+0x7c>
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d30c      	bcc.n	8007dbe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b0b      	cmp	r3, #11
 8007da8:	d002      	beq.n	8007db0 <create_name+0x88>
 8007daa:	7efb      	ldrb	r3, [r7, #27]
 8007dac:	2b2e      	cmp	r3, #46	; 0x2e
 8007dae:	d001      	beq.n	8007db4 <create_name+0x8c>
 8007db0:	2306      	movs	r3, #6
 8007db2:	e044      	b.n	8007e3e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007db4:	2308      	movs	r3, #8
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	230b      	movs	r3, #11
 8007dba:	617b      	str	r3, [r7, #20]
			continue;
 8007dbc:	e022      	b.n	8007e04 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007dbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da04      	bge.n	8007dd0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007dc6:	7efb      	ldrb	r3, [r7, #27]
 8007dc8:	3b80      	subs	r3, #128	; 0x80
 8007dca:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <create_name+0x120>)
 8007dcc:	5cd3      	ldrb	r3, [r2, r3]
 8007dce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007dd0:	7efb      	ldrb	r3, [r7, #27]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	481d      	ldr	r0, [pc, #116]	; (8007e4c <create_name+0x124>)
 8007dd6:	f7fe ff94 	bl	8006d02 <chk_chr>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <create_name+0xbc>
 8007de0:	2306      	movs	r3, #6
 8007de2:	e02c      	b.n	8007e3e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007de4:	7efb      	ldrb	r3, [r7, #27]
 8007de6:	2b60      	cmp	r3, #96	; 0x60
 8007de8:	d905      	bls.n	8007df6 <create_name+0xce>
 8007dea:	7efb      	ldrb	r3, [r7, #27]
 8007dec:	2b7a      	cmp	r3, #122	; 0x7a
 8007dee:	d802      	bhi.n	8007df6 <create_name+0xce>
 8007df0:	7efb      	ldrb	r3, [r7, #27]
 8007df2:	3b20      	subs	r3, #32
 8007df4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	613a      	str	r2, [r7, #16]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	4413      	add	r3, r2
 8007e00:	7efa      	ldrb	r2, [r7, #27]
 8007e02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007e04:	e7a6      	b.n	8007d54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e06:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	441a      	add	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <create_name+0xf4>
 8007e18:	2306      	movs	r3, #6
 8007e1a:	e010      	b.n	8007e3e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2be5      	cmp	r3, #229	; 0xe5
 8007e22:	d102      	bne.n	8007e2a <create_name+0x102>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2205      	movs	r2, #5
 8007e28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e2a:	7efb      	ldrb	r3, [r7, #27]
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d801      	bhi.n	8007e34 <create_name+0x10c>
 8007e30:	2204      	movs	r2, #4
 8007e32:	e000      	b.n	8007e36 <create_name+0x10e>
 8007e34:	2200      	movs	r2, #0
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	330b      	adds	r3, #11
 8007e3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007e3c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	0800a5c8 	.word	0x0800a5c8
 8007e4c:	0800a550 	.word	0x0800a550

08007e50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e64:	e002      	b.n	8007e6c <follow_path+0x1c>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b2f      	cmp	r3, #47	; 0x2f
 8007e72:	d0f8      	beq.n	8007e66 <follow_path+0x16>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b5c      	cmp	r3, #92	; 0x5c
 8007e7a:	d0f4      	beq.n	8007e66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b1f      	cmp	r3, #31
 8007e88:	d80a      	bhi.n	8007ea0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2280      	movs	r2, #128	; 0x80
 8007e8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff fc7f 	bl	8007798 <dir_sdi>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]
 8007e9e:	e043      	b.n	8007f28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff3f 	bl	8007d28 <create_name>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d134      	bne.n	8007f1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fe92 	bl	8007bde <dir_find>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ec4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d127      	bne.n	8007f22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ed2:	7afb      	ldrb	r3, [r7, #11]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d122      	bne.n	8007f22 <follow_path+0xd2>
 8007edc:	2305      	movs	r3, #5
 8007ede:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ee0:	e01f      	b.n	8007f22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11c      	bne.n	8007f26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	799b      	ldrb	r3, [r3, #6]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ef8:	2305      	movs	r3, #5
 8007efa:	75fb      	strb	r3, [r7, #23]
 8007efc:	e014      	b.n	8007f28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	4413      	add	r3, r2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff fdc8 	bl	8007aa6 <ld_clust>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f1c:	e7c0      	b.n	8007ea0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <follow_path+0xd8>
				break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f26:	bf00      	nop
			}
		}
	}

	return res;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d031      	beq.n	8007fac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e002      	b.n	8007f56 <get_ldnumber+0x24>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3301      	adds	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d903      	bls.n	8007f66 <get_ldnumber+0x34>
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b3a      	cmp	r3, #58	; 0x3a
 8007f64:	d1f4      	bne.n	8007f50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b3a      	cmp	r3, #58	; 0x3a
 8007f6c:	d11c      	bne.n	8007fa8 <get_ldnumber+0x76>
			tp = *path;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	60fa      	str	r2, [r7, #12]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	3b30      	subs	r3, #48	; 0x30
 8007f7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d80e      	bhi.n	8007fa4 <get_ldnumber+0x72>
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d10a      	bne.n	8007fa4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <get_ldnumber+0x72>
					vol = (int)i;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	e002      	b.n	8007fae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007fac:	693b      	ldr	r3, [r7, #16]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	70da      	strb	r2, [r3, #3]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7ff f85e 	bl	8007098 <move_window>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <check_fs+0x2a>
 8007fe2:	2304      	movs	r3, #4
 8007fe4:	e038      	b.n	8008058 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3330      	adds	r3, #48	; 0x30
 8007fea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fda2 	bl	8006b38 <ld_word>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <check_fs+0x48>
 8008000:	2303      	movs	r3, #3
 8008002:	e029      	b.n	8008058 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800800a:	2be9      	cmp	r3, #233	; 0xe9
 800800c:	d009      	beq.n	8008022 <check_fs+0x66>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008014:	2beb      	cmp	r3, #235	; 0xeb
 8008016:	d11e      	bne.n	8008056 <check_fs+0x9a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800801e:	2b90      	cmp	r3, #144	; 0x90
 8008020:	d119      	bne.n	8008056 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3330      	adds	r3, #48	; 0x30
 8008026:	3336      	adds	r3, #54	; 0x36
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe fd9d 	bl	8006b68 <ld_dword>
 800802e:	4603      	mov	r3, r0
 8008030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008034:	4a0a      	ldr	r2, [pc, #40]	; (8008060 <check_fs+0xa4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <check_fs+0x82>
 800803a:	2300      	movs	r3, #0
 800803c:	e00c      	b.n	8008058 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3330      	adds	r3, #48	; 0x30
 8008042:	3352      	adds	r3, #82	; 0x52
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fd8f 	bl	8006b68 <ld_dword>
 800804a:	4603      	mov	r3, r0
 800804c:	4a05      	ldr	r2, [pc, #20]	; (8008064 <check_fs+0xa8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d101      	bne.n	8008056 <check_fs+0x9a>
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008056:	2302      	movs	r3, #2
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	00544146 	.word	0x00544146
 8008064:	33544146 	.word	0x33544146

08008068 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b096      	sub	sp, #88	; 0x58
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff ff58 	bl	8007f32 <get_ldnumber>
 8008082:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	da01      	bge.n	800808e <find_volume+0x26>
 800808a:	230b      	movs	r3, #11
 800808c:	e22d      	b.n	80084ea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800808e:	4aa1      	ldr	r2, [pc, #644]	; (8008314 <find_volume+0x2ac>)
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <find_volume+0x3a>
 800809e:	230c      	movs	r3, #12
 80080a0:	e223      	b.n	80084ea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	f023 0301 	bic.w	r3, r3, #1
 80080ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01a      	beq.n	80080ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fc9d 	bl	80069fc <disk_status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10c      	bne.n	80080ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <find_volume+0x82>
 80080da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80080e6:	230a      	movs	r3, #10
 80080e8:	e1ff      	b.n	80084ea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80080ea:	2300      	movs	r3, #0
 80080ec:	e1fd      	b.n	80084ea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fc95 	bl	8006a30 <disk_initialize>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800810c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008118:	2303      	movs	r3, #3
 800811a:	e1e6      	b.n	80084ea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <find_volume+0xca>
 8008122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800812e:	230a      	movs	r3, #10
 8008130:	e1db      	b.n	80084ea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800813a:	f7ff ff3f 	bl	8007fbc <check_fs>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008148:	2b02      	cmp	r3, #2
 800814a:	d149      	bne.n	80081e0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800814c:	2300      	movs	r3, #0
 800814e:	643b      	str	r3, [r7, #64]	; 0x40
 8008150:	e01e      	b.n	8008190 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008160:	4413      	add	r3, r2
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	3304      	adds	r3, #4
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d006      	beq.n	800817c <find_volume+0x114>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	3308      	adds	r3, #8
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fcf8 	bl	8006b68 <ld_dword>
 8008178:	4602      	mov	r2, r0
 800817a:	e000      	b.n	800817e <find_volume+0x116>
 800817c:	2200      	movs	r2, #0
 800817e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	3358      	adds	r3, #88	; 0x58
 8008184:	443b      	add	r3, r7
 8008186:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800818a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818c:	3301      	adds	r3, #1
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	2b03      	cmp	r3, #3
 8008194:	d9dd      	bls.n	8008152 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008196:	2300      	movs	r3, #0
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <find_volume+0x13e>
 80081a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a2:	3b01      	subs	r3, #1
 80081a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80081a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	3358      	adds	r3, #88	; 0x58
 80081ac:	443b      	add	r3, r7
 80081ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80081b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <find_volume+0x15e>
 80081ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081be:	f7ff fefd 	bl	8007fbc <check_fs>
 80081c2:	4603      	mov	r3, r0
 80081c4:	e000      	b.n	80081c8 <find_volume+0x160>
 80081c6:	2303      	movs	r3, #3
 80081c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80081cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d905      	bls.n	80081e0 <find_volume+0x178>
 80081d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d6:	3301      	adds	r3, #1
 80081d8:	643b      	str	r3, [r7, #64]	; 0x40
 80081da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d9e2      	bls.n	80081a6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80081e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d101      	bne.n	80081ec <find_volume+0x184>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e17e      	b.n	80084ea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d901      	bls.n	80081f8 <find_volume+0x190>
 80081f4:	230d      	movs	r3, #13
 80081f6:	e178      	b.n	80084ea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	3330      	adds	r3, #48	; 0x30
 80081fc:	330b      	adds	r3, #11
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fc9a 	bl	8006b38 <ld_word>
 8008204:	4603      	mov	r3, r0
 8008206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820a:	d001      	beq.n	8008210 <find_volume+0x1a8>
 800820c:	230d      	movs	r3, #13
 800820e:	e16c      	b.n	80084ea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	3330      	adds	r3, #48	; 0x30
 8008214:	3316      	adds	r3, #22
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fc8e 	bl	8006b38 <ld_word>
 800821c:	4603      	mov	r3, r0
 800821e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <find_volume+0x1cc>
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	3330      	adds	r3, #48	; 0x30
 800822a:	3324      	adds	r3, #36	; 0x24
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fc9b 	bl	8006b68 <ld_dword>
 8008232:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008238:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	789b      	ldrb	r3, [r3, #2]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d005      	beq.n	8008258 <find_volume+0x1f0>
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	789b      	ldrb	r3, [r3, #2]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d001      	beq.n	8008258 <find_volume+0x1f0>
 8008254:	230d      	movs	r3, #13
 8008256:	e148      	b.n	80084ea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	789b      	ldrb	r3, [r3, #2]
 800825c:	461a      	mov	r2, r3
 800825e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b29a      	uxth	r2, r3
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	895b      	ldrh	r3, [r3, #10]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d008      	beq.n	800828c <find_volume+0x224>
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	895b      	ldrh	r3, [r3, #10]
 800827e:	461a      	mov	r2, r3
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	895b      	ldrh	r3, [r3, #10]
 8008284:	3b01      	subs	r3, #1
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <find_volume+0x228>
 800828c:	230d      	movs	r3, #13
 800828e:	e12c      	b.n	80084ea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	3330      	adds	r3, #48	; 0x30
 8008294:	3311      	adds	r3, #17
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fc4e 	bl	8006b38 <ld_word>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	891b      	ldrh	r3, [r3, #8]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <find_volume+0x24e>
 80082b2:	230d      	movs	r3, #13
 80082b4:	e119      	b.n	80084ea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	3313      	adds	r3, #19
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe fc3b 	bl	8006b38 <ld_word>
 80082c2:	4603      	mov	r3, r0
 80082c4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80082c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <find_volume+0x272>
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	3330      	adds	r3, #48	; 0x30
 80082d0:	3320      	adds	r3, #32
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fc48 	bl	8006b68 <ld_dword>
 80082d8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	3330      	adds	r3, #48	; 0x30
 80082de:	330e      	adds	r3, #14
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fc29 	bl	8006b38 <ld_word>
 80082e6:	4603      	mov	r3, r0
 80082e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <find_volume+0x28c>
 80082f0:	230d      	movs	r3, #13
 80082f2:	e0fa      	b.n	80084ea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	4413      	add	r3, r2
 80082fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fc:	8912      	ldrh	r2, [r2, #8]
 80082fe:	0912      	lsrs	r2, r2, #4
 8008300:	b292      	uxth	r2, r2
 8008302:	4413      	add	r3, r2
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	429a      	cmp	r2, r3
 800830c:	d204      	bcs.n	8008318 <find_volume+0x2b0>
 800830e:	230d      	movs	r3, #13
 8008310:	e0eb      	b.n	80084ea <find_volume+0x482>
 8008312:	bf00      	nop
 8008314:	20003c88 	.word	0x20003c88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008320:	8952      	ldrh	r2, [r2, #10]
 8008322:	fbb3 f3f2 	udiv	r3, r3, r2
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <find_volume+0x2ca>
 800832e:	230d      	movs	r3, #13
 8008330:	e0db      	b.n	80084ea <find_volume+0x482>
		fmt = FS_FAT32;
 8008332:	2303      	movs	r3, #3
 8008334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800833e:	4293      	cmp	r3, r2
 8008340:	d802      	bhi.n	8008348 <find_volume+0x2e0>
 8008342:	2302      	movs	r3, #2
 8008344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800834e:	4293      	cmp	r3, r2
 8008350:	d802      	bhi.n	8008358 <find_volume+0x2f0>
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	1c9a      	adds	r2, r3, #2
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008364:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008366:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836a:	441a      	add	r2, r3
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	441a      	add	r2, r3
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800837a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837e:	2b03      	cmp	r3, #3
 8008380:	d11e      	bne.n	80083c0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	3330      	adds	r3, #48	; 0x30
 8008386:	332a      	adds	r3, #42	; 0x2a
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fbd5 	bl	8006b38 <ld_word>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <find_volume+0x330>
 8008394:	230d      	movs	r3, #13
 8008396:	e0a8      	b.n	80084ea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	891b      	ldrh	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <find_volume+0x33c>
 80083a0:	230d      	movs	r3, #13
 80083a2:	e0a2      	b.n	80084ea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	3330      	adds	r3, #48	; 0x30
 80083a8:	332c      	adds	r3, #44	; 0x2c
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fbdc 	bl	8006b68 <ld_dword>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	647b      	str	r3, [r7, #68]	; 0x44
 80083be:	e01f      	b.n	8008400 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	891b      	ldrh	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <find_volume+0x364>
 80083c8:	230d      	movs	r3, #13
 80083ca:	e08e      	b.n	80084ea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	441a      	add	r2, r3
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d103      	bne.n	80083e8 <find_volume+0x380>
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	e00a      	b.n	80083fe <find_volume+0x396>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	695a      	ldr	r2, [r3, #20]
 80083ec:	4613      	mov	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	4413      	add	r3, r2
 80083f2:	085a      	lsrs	r2, r3, #1
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008406:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800840a:	0a5b      	lsrs	r3, r3, #9
 800840c:	429a      	cmp	r2, r3
 800840e:	d201      	bcs.n	8008414 <find_volume+0x3ac>
 8008410:	230d      	movs	r3, #13
 8008412:	e06a      	b.n	80084ea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	611a      	str	r2, [r3, #16]
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	691a      	ldr	r2, [r3, #16]
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	2280      	movs	r2, #128	; 0x80
 8008428:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800842a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800842e:	2b03      	cmp	r3, #3
 8008430:	d149      	bne.n	80084c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	3330      	adds	r3, #48	; 0x30
 8008436:	3330      	adds	r3, #48	; 0x30
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe fb7d 	bl	8006b38 <ld_word>
 800843e:	4603      	mov	r3, r0
 8008440:	2b01      	cmp	r3, #1
 8008442:	d140      	bne.n	80084c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008446:	3301      	adds	r3, #1
 8008448:	4619      	mov	r1, r3
 800844a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800844c:	f7fe fe24 	bl	8007098 <move_window>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d137      	bne.n	80084c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	2200      	movs	r2, #0
 800845a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	3330      	adds	r3, #48	; 0x30
 8008460:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe fb67 	bl	8006b38 <ld_word>
 800846a:	4603      	mov	r3, r0
 800846c:	461a      	mov	r2, r3
 800846e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008472:	429a      	cmp	r2, r3
 8008474:	d127      	bne.n	80084c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	3330      	adds	r3, #48	; 0x30
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fb74 	bl	8006b68 <ld_dword>
 8008480:	4603      	mov	r3, r0
 8008482:	4a1c      	ldr	r2, [pc, #112]	; (80084f4 <find_volume+0x48c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d11e      	bne.n	80084c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	3330      	adds	r3, #48	; 0x30
 800848c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fb69 	bl	8006b68 <ld_dword>
 8008496:	4603      	mov	r3, r0
 8008498:	4a17      	ldr	r2, [pc, #92]	; (80084f8 <find_volume+0x490>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d113      	bne.n	80084c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	3330      	adds	r3, #48	; 0x30
 80084a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fb5e 	bl	8006b68 <ld_dword>
 80084ac:	4602      	mov	r2, r0
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	3330      	adds	r3, #48	; 0x30
 80084b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fb54 	bl	8006b68 <ld_dword>
 80084c0:	4602      	mov	r2, r0
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80084cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084ce:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <find_volume+0x494>)
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <find_volume+0x494>)
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	4b08      	ldr	r3, [pc, #32]	; (80084fc <find_volume+0x494>)
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084e4:	f7fe fd70 	bl	8006fc8 <clear_lock>
#endif
	return FR_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3758      	adds	r7, #88	; 0x58
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	41615252 	.word	0x41615252
 80084f8:	61417272 	.word	0x61417272
 80084fc:	20003c8c 	.word	0x20003c8c

08008500 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800850a:	2309      	movs	r3, #9
 800850c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01c      	beq.n	800854e <validate+0x4e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d018      	beq.n	800854e <validate+0x4e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d013      	beq.n	800854e <validate+0x4e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	889a      	ldrh	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	429a      	cmp	r2, r3
 8008532:	d10c      	bne.n	800854e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fa5e 	bl	80069fc <disk_status>
 8008540:	4603      	mov	r3, r0
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <validate+0x4e>
			res = FR_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <validate+0x5a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	e000      	b.n	800855c <validate+0x5c>
 800855a:	2300      	movs	r3, #0
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	6013      	str	r3, [r2, #0]
	return res;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fcd5 	bl	8007f32 <get_ldnumber>
 8008588:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da01      	bge.n	8008594 <f_mount+0x28>
 8008590:	230b      	movs	r3, #11
 8008592:	e02b      	b.n	80085ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008594:	4a17      	ldr	r2, [pc, #92]	; (80085f4 <f_mount+0x88>)
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80085a4:	69b8      	ldr	r0, [r7, #24]
 80085a6:	f7fe fd0f 	bl	8006fc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	490d      	ldr	r1, [pc, #52]	; (80085f4 <f_mount+0x88>)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <f_mount+0x66>
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d001      	beq.n	80085d6 <f_mount+0x6a>
 80085d2:	2300      	movs	r3, #0
 80085d4:	e00a      	b.n	80085ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085d6:	f107 010c 	add.w	r1, r7, #12
 80085da:	f107 0308 	add.w	r3, r7, #8
 80085de:	2200      	movs	r2, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fd41 	bl	8008068 <find_volume>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20003c88 	.word	0x20003c88

080085f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b098      	sub	sp, #96	; 0x60
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <f_open+0x18>
 800860c:	2309      	movs	r3, #9
 800860e:	e1ad      	b.n	800896c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008616:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008618:	79fa      	ldrb	r2, [r7, #7]
 800861a:	f107 0110 	add.w	r1, r7, #16
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fd20 	bl	8008068 <find_volume>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800862e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 8191 	bne.w	800895a <f_open+0x362>
		dj.obj.fs = fs;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	f107 0314 	add.w	r3, r7, #20
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fc03 	bl	8007e50 <follow_path>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d11a      	bne.n	800868e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008658:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800865c:	b25b      	sxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	da03      	bge.n	800866a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008662:	2306      	movs	r3, #6
 8008664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008668:	e011      	b.n	800868e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fb58 	bl	8006d38 <chk_lock>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	f003 031c 	and.w	r3, r3, #28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d07f      	beq.n	8008798 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800869c:	2b00      	cmp	r3, #0
 800869e:	d017      	beq.n	80086d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80086a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d10e      	bne.n	80086c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80086a8:	f7fe fba2 	bl	8006df0 <enq_lock>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <f_open+0xc8>
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fae6 	bl	8007c88 <dir_register>
 80086bc:	4603      	mov	r3, r0
 80086be:	e000      	b.n	80086c2 <f_open+0xca>
 80086c0:	2312      	movs	r3, #18
 80086c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	71fb      	strb	r3, [r7, #7]
 80086ce:	e010      	b.n	80086f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086d0:	7ebb      	ldrb	r3, [r7, #26]
 80086d2:	f003 0311 	and.w	r3, r3, #17
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <f_open+0xea>
					res = FR_DENIED;
 80086da:	2307      	movs	r3, #7
 80086dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086e0:	e007      	b.n	80086f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <f_open+0xfa>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d168      	bne.n	80087cc <f_open+0x1d4>
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b00      	cmp	r3, #0
 8008702:	d063      	beq.n	80087cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8008704:	f7fe f800 	bl	8006708 <get_fattime>
 8008708:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	330e      	adds	r3, #14
 800870e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fa67 	bl	8006be4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	3316      	adds	r3, #22
 800871a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fa61 	bl	8006be4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	330b      	adds	r3, #11
 8008726:	2220      	movs	r2, #32
 8008728:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff f9b8 	bl	8007aa6 <ld_clust>
 8008736:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800873c:	2200      	movs	r2, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff f9d0 	bl	8007ae4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008746:	331c      	adds	r3, #28
 8008748:	2100      	movs	r1, #0
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe fa4a 	bl	8006be4 <st_dword>
					fs->wflag = 1;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2201      	movs	r2, #1
 8008754:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d037      	beq.n	80087cc <f_open+0x1d4>
						dw = fs->winsect;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	2200      	movs	r2, #0
 8008768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe fee3 	bl	8007536 <remove_chain>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877a:	2b00      	cmp	r3, #0
 800877c:	d126      	bne.n	80087cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fc88 	bl	8007098 <move_window>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008792:	3a01      	subs	r2, #1
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	e019      	b.n	80087cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879c:	2b00      	cmp	r3, #0
 800879e:	d115      	bne.n	80087cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80087a0:	7ebb      	ldrb	r3, [r7, #26]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80087aa:	2304      	movs	r3, #4
 80087ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087b0:	e00c      	b.n	80087cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <f_open+0x1d4>
 80087bc:	7ebb      	ldrb	r3, [r7, #26]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <f_open+0x1d4>
						res = FR_DENIED;
 80087c6:	2307      	movs	r3, #7
 80087c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80087cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d128      	bne.n	8008826 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	f107 0314 	add.w	r3, r7, #20
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fb11 	bl	8006e34 <inc_lock>
 8008812:	4602      	mov	r2, r0
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <f_open+0x22e>
 8008820:	2302      	movs	r3, #2
 8008822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800882a:	2b00      	cmp	r3, #0
 800882c:	f040 8095 	bne.w	800895a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008834:	4611      	mov	r1, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff f935 	bl	8007aa6 <ld_clust>
 800883c:	4602      	mov	r2, r0
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	331c      	adds	r3, #28
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe f98e 	bl	8006b68 <ld_dword>
 800884c:	4602      	mov	r2, r0
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	88da      	ldrh	r2, [r3, #6]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	79fa      	ldrb	r2, [r7, #7]
 800886a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3330      	adds	r3, #48	; 0x30
 8008882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe f9f8 	bl	8006c7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d060      	beq.n	800895a <f_open+0x362>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d05c      	beq.n	800895a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	895b      	ldrh	r3, [r3, #10]
 80088ac:	025b      	lsls	r3, r3, #9
 80088ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	657b      	str	r3, [r7, #84]	; 0x54
 80088bc:	e016      	b.n	80088ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fca3 	bl	800720e <get_fat>
 80088c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80088ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d802      	bhi.n	80088d6 <f_open+0x2de>
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d102      	bne.n	80088e4 <f_open+0x2ec>
 80088de:	2301      	movs	r3, #1
 80088e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	657b      	str	r3, [r7, #84]	; 0x54
 80088ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <f_open+0x304>
 80088f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d8e0      	bhi.n	80088be <f_open+0x2c6>
				}
				fp->clust = clst;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008900:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008906:	2b00      	cmp	r3, #0
 8008908:	d127      	bne.n	800895a <f_open+0x362>
 800890a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	2b00      	cmp	r3, #0
 8008912:	d022      	beq.n	800895a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fc59 	bl	80071d0 <clust2sect>
 800891e:	6478      	str	r0, [r7, #68]	; 0x44
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <f_open+0x336>
						res = FR_INT_ERR;
 8008926:	2302      	movs	r3, #2
 8008928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800892c:	e015      	b.n	800895a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800892e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008930:	0a5a      	lsrs	r2, r3, #9
 8008932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008934:	441a      	add	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	7858      	ldrb	r0, [r3, #1]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	2301      	movs	r3, #1
 800894a:	f7fe f897 	bl	8006a7c <disk_read>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <f_open+0x362>
 8008954:	2301      	movs	r3, #1
 8008956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800895a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <f_open+0x370>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800896c:	4618      	mov	r0, r3
 800896e:	3760      	adds	r7, #96	; 0x60
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08c      	sub	sp, #48	; 0x30
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f107 0210 	add.w	r2, r7, #16
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fdb3 	bl	8008500 <validate>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <f_write+0x44>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	7d5b      	ldrb	r3, [r3, #21]
 80089ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <f_write+0x4a>
 80089b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089bc:	e14b      	b.n	8008c56 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	7d1b      	ldrb	r3, [r3, #20]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <f_write+0x5a>
 80089ca:	2307      	movs	r3, #7
 80089cc:	e143      	b.n	8008c56 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	441a      	add	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	429a      	cmp	r2, r3
 80089dc:	f080 812d 	bcs.w	8008c3a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80089e8:	e127      	b.n	8008c3a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f040 80e3 	bne.w	8008bbe <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	0a5b      	lsrs	r3, r3, #9
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	8952      	ldrh	r2, [r2, #10]
 8008a02:	3a01      	subs	r2, #1
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d143      	bne.n	8008a96 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10c      	bne.n	8008a30 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11a      	bne.n	8008a58 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fdea 	bl	8007600 <create_chain>
 8008a2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a2e:	e013      	b.n	8008a58 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7fe fe76 	bl	8007730 <clmt_clust>
 8008a44:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a46:	e007      	b.n	8008a58 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7fe fdd5 	bl	8007600 <create_chain>
 8008a56:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80f2 	beq.w	8008c44 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d104      	bne.n	8008a70 <f_write+0xfc>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	755a      	strb	r2, [r3, #21]
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e0f2      	b.n	8008c56 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a76:	d104      	bne.n	8008a82 <f_write+0x10e>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	755a      	strb	r2, [r3, #21]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0e9      	b.n	8008c56 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a86:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <f_write+0x122>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a94:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	7d1b      	ldrb	r3, [r3, #20]
 8008a9a:	b25b      	sxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da18      	bge.n	8008ad2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	7858      	ldrb	r0, [r3, #1]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1a      	ldr	r2, [r3, #32]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f7fe f804 	bl	8006abc <disk_write>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <f_write+0x150>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	755a      	strb	r2, [r3, #21]
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e0c8      	b.n	8008c56 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	7d1b      	ldrb	r3, [r3, #20]
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7fe fb78 	bl	80071d0 <clust2sect>
 8008ae0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <f_write+0x17e>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2202      	movs	r2, #2
 8008aec:	755a      	strb	r2, [r3, #21]
 8008aee:	2302      	movs	r3, #2
 8008af0:	e0b1      	b.n	8008c56 <f_write+0x2e2>
			sect += csect;
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	4413      	add	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	0a5b      	lsrs	r3, r3, #9
 8008afe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d03c      	beq.n	8008b80 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	8952      	ldrh	r2, [r2, #10]
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d905      	bls.n	8008b20 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	895b      	ldrh	r3, [r3, #10]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	7858      	ldrb	r0, [r3, #1]
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	69f9      	ldr	r1, [r7, #28]
 8008b2a:	f7fd ffc7 	bl	8006abc <disk_write>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <f_write+0x1ca>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	755a      	strb	r2, [r3, #21]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e08b      	b.n	8008c56 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1a      	ldr	r2, [r3, #32]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d915      	bls.n	8008b78 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	025b      	lsls	r3, r3, #9
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b64:	4619      	mov	r1, r3
 8008b66:	f7fe f869 	bl	8006c3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7d1b      	ldrb	r3, [r3, #20]
 8008b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	025b      	lsls	r3, r3, #9
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b7e:	e03f      	b.n	8008c00 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d016      	beq.n	8008bb8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d210      	bcs.n	8008bb8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	7858      	ldrb	r0, [r3, #1]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	f7fd ff6a 	bl	8006a7c <disk_read>
 8008ba8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	755a      	strb	r2, [r3, #21]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e04e      	b.n	8008c56 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d901      	bls.n	8008bd8 <f_write+0x264>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	4413      	add	r3, r2
 8008be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bea:	69f9      	ldr	r1, [r7, #28]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe f825 	bl	8006c3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7d1b      	ldrb	r3, [r3, #20]
 8008bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	4413      	add	r3, r2
 8008c06:	61fb      	str	r3, [r7, #28]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	619a      	str	r2, [r3, #24]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	bf38      	it	cc
 8008c20:	461a      	movcc	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	60da      	str	r2, [r3, #12]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	441a      	add	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f aed4 	bne.w	80089ea <f_write+0x76>
 8008c42:	e000      	b.n	8008c46 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c44:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	7d1b      	ldrb	r3, [r3, #20]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3730      	adds	r7, #48	; 0x30
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f107 0208 	add.w	r2, r7, #8
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fc46 	bl	8008500 <validate>
 8008c74:	4603      	mov	r3, r0
 8008c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d168      	bne.n	8008d50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7d1b      	ldrb	r3, [r3, #20]
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d062      	beq.n	8008d50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7d1b      	ldrb	r3, [r3, #20]
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	da15      	bge.n	8008cc0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	7858      	ldrb	r0, [r3, #1]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1a      	ldr	r2, [r3, #32]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f7fd ff0a 	bl	8006abc <disk_write>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <f_sync+0x54>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e04f      	b.n	8008d52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7d1b      	ldrb	r3, [r3, #20]
 8008cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cc0:	f7fd fd22 	bl	8006708 <get_fattime>
 8008cc4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fe f9e2 	bl	8007098 <move_window>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d138      	bne.n	8008d50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	330b      	adds	r3, #11
 8008ce8:	781a      	ldrb	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	330b      	adds	r3, #11
 8008cee:	f042 0220 	orr.w	r2, r2, #32
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68f9      	ldr	r1, [r7, #12]
 8008d02:	f7fe feef 	bl	8007ae4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f103 021c 	add.w	r2, r3, #28
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fd ff66 	bl	8006be4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3316      	adds	r3, #22
 8008d1c:	6939      	ldr	r1, [r7, #16]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fd ff60 	bl	8006be4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3312      	adds	r3, #18
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fd ff3f 	bl	8006bae <st_word>
					fs->wflag = 1;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2201      	movs	r2, #1
 8008d34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe f9db 	bl	80070f4 <sync_fs>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7d1b      	ldrb	r3, [r3, #20]
 8008d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ff7b 	bl	8008c5e <f_sync>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d118      	bne.n	8008da4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f107 0208 	add.w	r2, r7, #8
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fbc0 	bl	8008500 <validate>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10c      	bne.n	8008da4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f8de 	bl	8006f50 <dec_lock>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b090      	sub	sp, #64	; 0x40
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f107 0208 	add.w	r2, r7, #8
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fb9d 	bl	8008500 <validate>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d103      	bne.n	8008ddc <f_lseek+0x2e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7d5b      	ldrb	r3, [r3, #21]
 8008dd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <f_lseek+0x3c>
 8008de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008de8:	e1e6      	b.n	80091b8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80d1 	beq.w	8008f96 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d15a      	bne.n	8008eb2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	1d1a      	adds	r2, r3, #4
 8008e06:	627a      	str	r2, [r7, #36]	; 0x24
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d03a      	beq.n	8008e92 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	3302      	adds	r3, #2
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	3301      	adds	r3, #1
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe f9e8 	bl	800720e <get_fat>
 8008e3e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d804      	bhi.n	8008e50 <f_lseek+0xa2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	755a      	strb	r2, [r3, #21]
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e1b3      	b.n	80091b8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d104      	bne.n	8008e62 <f_lseek+0xb4>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	755a      	strb	r2, [r3, #21]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e1aa      	b.n	80091b8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d0de      	beq.n	8008e2a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d809      	bhi.n	8008e88 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	627a      	str	r2, [r7, #36]	; 0x24
 8008e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1d1a      	adds	r2, r3, #4
 8008e82:	627a      	str	r2, [r7, #36]	; 0x24
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d3c4      	bcc.n	8008e1c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e98:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d803      	bhi.n	8008eaa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	e184      	b.n	80091b4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008eaa:	2311      	movs	r3, #17
 8008eac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008eb0:	e180      	b.n	80091b4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d902      	bls.n	8008ec2 <f_lseek+0x114>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 8172 	beq.w	80091b4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fe fc2a 	bl	8007730 <clmt_clust>
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe f970 	bl	80071d0 <clust2sect>
 8008ef0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <f_lseek+0x154>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	755a      	strb	r2, [r3, #21]
 8008efe:	2302      	movs	r3, #2
 8008f00:	e15a      	b.n	80091b8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	0a5b      	lsrs	r3, r3, #9
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	8952      	ldrh	r2, [r2, #10]
 8008f0c:	3a01      	subs	r2, #1
 8008f0e:	4013      	ands	r3, r2
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4413      	add	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8148 	beq.w	80091b4 <f_lseek+0x406>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f000 8142 	beq.w	80091b4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7d1b      	ldrb	r3, [r3, #20]
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da18      	bge.n	8008f6c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	7858      	ldrb	r0, [r3, #1]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1a      	ldr	r2, [r3, #32]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f7fd fdb7 	bl	8006abc <disk_write>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <f_lseek+0x1b0>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	755a      	strb	r2, [r3, #21]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e12c      	b.n	80091b8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7d1b      	ldrb	r3, [r3, #20]
 8008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	7858      	ldrb	r0, [r3, #1]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f76:	2301      	movs	r3, #1
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	f7fd fd7f 	bl	8006a7c <disk_read>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <f_lseek+0x1e0>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	755a      	strb	r2, [r3, #21]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e114      	b.n	80091b8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	621a      	str	r2, [r3, #32]
 8008f94:	e10e      	b.n	80091b4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d908      	bls.n	8008fb2 <f_lseek+0x204>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7d1b      	ldrb	r3, [r3, #20]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80a7 	beq.w	8009118 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	895b      	ldrh	r3, [r3, #10]
 8008fce:	025b      	lsls	r3, r3, #9
 8008fd0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	1e59      	subs	r1, r3, #1
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d30f      	bcc.n	8009010 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	425b      	negs	r3, r3
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38
 800900e:	e022      	b.n	8009056 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d119      	bne.n	8009050 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe faed 	bl	8007600 <create_chain>
 8009026:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	2b01      	cmp	r3, #1
 800902c:	d104      	bne.n	8009038 <f_lseek+0x28a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2202      	movs	r2, #2
 8009032:	755a      	strb	r2, [r3, #21]
 8009034:	2302      	movs	r3, #2
 8009036:	e0bf      	b.n	80091b8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d104      	bne.n	800904a <f_lseek+0x29c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	755a      	strb	r2, [r3, #21]
 8009046:	2301      	movs	r3, #1
 8009048:	e0b6      	b.n	80091b8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800904e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009054:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d05d      	beq.n	8009118 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800905c:	e03a      	b.n	80090d4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	441a      	add	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7d1b      	ldrb	r3, [r3, #20]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fabc 	bl	8007600 <create_chain>
 8009088:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d108      	bne.n	80090a2 <f_lseek+0x2f4>
							ofs = 0; break;
 8009090:	2300      	movs	r3, #0
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	e022      	b.n	80090dc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe f8b7 	bl	800720e <get_fat>
 80090a0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	d104      	bne.n	80090b4 <f_lseek+0x306>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	755a      	strb	r2, [r3, #21]
 80090b0:	2301      	movs	r3, #1
 80090b2:	e081      	b.n	80091b8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d904      	bls.n	80090c4 <f_lseek+0x316>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d304      	bcc.n	80090ce <f_lseek+0x320>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	755a      	strb	r2, [r3, #21]
 80090ca:	2302      	movs	r3, #2
 80090cc:	e074      	b.n	80091b8 <f_lseek+0x40a>
					fp->clust = clst;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090d2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d8c0      	bhi.n	800905e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699a      	ldr	r2, [r3, #24]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	441a      	add	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d012      	beq.n	8009118 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe f86a 	bl	80071d0 <clust2sect>
 80090fc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <f_lseek+0x360>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	755a      	strb	r2, [r3, #21]
 800910a:	2302      	movs	r3, #2
 800910c:	e054      	b.n	80091b8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	0a5b      	lsrs	r3, r3, #9
 8009112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009114:	4413      	add	r3, r2
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699a      	ldr	r2, [r3, #24]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	429a      	cmp	r2, r3
 8009122:	d90a      	bls.n	800913a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009134:	b2da      	uxtb	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	2b00      	cmp	r3, #0
 8009144:	d036      	beq.n	80091b4 <f_lseek+0x406>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914c:	429a      	cmp	r2, r3
 800914e:	d031      	beq.n	80091b4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7d1b      	ldrb	r3, [r3, #20]
 8009154:	b25b      	sxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	da18      	bge.n	800918c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	7858      	ldrb	r0, [r3, #1]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1a      	ldr	r2, [r3, #32]
 8009168:	2301      	movs	r3, #1
 800916a:	f7fd fca7 	bl	8006abc <disk_write>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <f_lseek+0x3d0>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	755a      	strb	r2, [r3, #21]
 800917a:	2301      	movs	r3, #1
 800917c:	e01c      	b.n	80091b8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7d1b      	ldrb	r3, [r3, #20]
 8009182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	7858      	ldrb	r0, [r3, #1]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009196:	2301      	movs	r3, #1
 8009198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800919a:	f7fd fc6f 	bl	8006a7c <disk_read>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <f_lseek+0x400>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	755a      	strb	r2, [r3, #21]
 80091aa:	2301      	movs	r3, #1
 80091ac:	e004      	b.n	80091b8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80091b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3740      	adds	r7, #64	; 0x40
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b09e      	sub	sp, #120	; 0x78
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80091cc:	f107 010c 	add.w	r1, r7, #12
 80091d0:	1d3b      	adds	r3, r7, #4
 80091d2:	2202      	movs	r2, #2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe ff47 	bl	8008068 <find_volume>
 80091da:	4603      	mov	r3, r0
 80091dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80091e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 808e 	bne.w	800930a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fe2a 	bl	8007e50 <follow_path>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009202:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009206:	2b00      	cmp	r3, #0
 8009208:	d108      	bne.n	800921c <f_unlink+0x5c>
 800920a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800920e:	2102      	movs	r1, #2
 8009210:	4618      	mov	r0, r3
 8009212:	f7fd fd91 	bl	8006d38 <chk_lock>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800921c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009220:	2b00      	cmp	r3, #0
 8009222:	d172      	bne.n	800930a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009228:	b25b      	sxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	da03      	bge.n	8009236 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800922e:	2306      	movs	r3, #6
 8009230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009234:	e008      	b.n	8009248 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009236:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009242:	2307      	movs	r3, #7
 8009244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009248:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800924c:	2b00      	cmp	r3, #0
 800924e:	d134      	bne.n	80092ba <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fc25 	bl	8007aa6 <ld_clust>
 800925c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800925e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b00      	cmp	r3, #0
 8009268:	d027      	beq.n	80092ba <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800926e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009270:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009272:	f107 0310 	add.w	r3, r7, #16
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fa8d 	bl	8007798 <dir_sdi>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009284:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009288:	2b00      	cmp	r3, #0
 800928a:	d116      	bne.n	80092ba <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800928c:	f107 0310 	add.w	r3, r7, #16
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fc46 	bl	8007b24 <dir_read>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800929e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <f_unlink+0xec>
 80092a6:	2307      	movs	r3, #7
 80092a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80092ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d102      	bne.n	80092ba <f_unlink+0xfa>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80092ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d123      	bne.n	800930a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80092c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fd10 	bl	8007cec <dir_remove>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80092d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10c      	bne.n	80092f4 <f_unlink+0x134>
 80092da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80092e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092e4:	2200      	movs	r2, #0
 80092e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe f924 	bl	8007536 <remove_chain>
 80092ee:	4603      	mov	r3, r0
 80092f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80092f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d106      	bne.n	800930a <f_unlink+0x14a>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fd fef8 	bl	80070f4 <sync_fs>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800930a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800930e:	4618      	mov	r0, r3
 8009310:	3778      	adds	r7, #120	; 0x78
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009326:	2301      	movs	r3, #1
 8009328:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009330:	7a5b      	ldrb	r3, [r3, #9]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d131      	bne.n	800939c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009338:	4b1c      	ldr	r3, [pc, #112]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 800933a:	7a5b      	ldrb	r3, [r3, #9]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009342:	2100      	movs	r1, #0
 8009344:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009346:	4b19      	ldr	r3, [pc, #100]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009348:	7a5b      	ldrb	r3, [r3, #9]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4a17      	ldr	r2, [pc, #92]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009358:	7a5b      	ldrb	r3, [r3, #9]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009360:	4413      	add	r3, r2
 8009362:	79fa      	ldrb	r2, [r7, #7]
 8009364:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009366:	4b11      	ldr	r3, [pc, #68]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009368:	7a5b      	ldrb	r3, [r3, #9]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	b2d1      	uxtb	r1, r2
 8009370:	4a0e      	ldr	r2, [pc, #56]	; (80093ac <FATFS_LinkDriverEx+0x94>)
 8009372:	7251      	strb	r1, [r2, #9]
 8009374:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009376:	7dbb      	ldrb	r3, [r7, #22]
 8009378:	3330      	adds	r3, #48	; 0x30
 800937a:	b2da      	uxtb	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3301      	adds	r3, #1
 8009384:	223a      	movs	r2, #58	; 0x3a
 8009386:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3302      	adds	r3, #2
 800938c:	222f      	movs	r2, #47	; 0x2f
 800938e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	3303      	adds	r3, #3
 8009394:	2200      	movs	r2, #0
 8009396:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20003cc0 	.word	0x20003cc0

080093b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093ba:	2200      	movs	r2, #0
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff ffaa 	bl	8009318 <FATFS_LinkDriverEx>
 80093c4:	4603      	mov	r3, r0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <__errno>:
 80093d0:	4b01      	ldr	r3, [pc, #4]	; (80093d8 <__errno+0x8>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	2000005c 	.word	0x2000005c

080093dc <__libc_init_array>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	4d0d      	ldr	r5, [pc, #52]	; (8009414 <__libc_init_array+0x38>)
 80093e0:	4c0d      	ldr	r4, [pc, #52]	; (8009418 <__libc_init_array+0x3c>)
 80093e2:	1b64      	subs	r4, r4, r5
 80093e4:	10a4      	asrs	r4, r4, #2
 80093e6:	2600      	movs	r6, #0
 80093e8:	42a6      	cmp	r6, r4
 80093ea:	d109      	bne.n	8009400 <__libc_init_array+0x24>
 80093ec:	4d0b      	ldr	r5, [pc, #44]	; (800941c <__libc_init_array+0x40>)
 80093ee:	4c0c      	ldr	r4, [pc, #48]	; (8009420 <__libc_init_array+0x44>)
 80093f0:	f001 f824 	bl	800a43c <_init>
 80093f4:	1b64      	subs	r4, r4, r5
 80093f6:	10a4      	asrs	r4, r4, #2
 80093f8:	2600      	movs	r6, #0
 80093fa:	42a6      	cmp	r6, r4
 80093fc:	d105      	bne.n	800940a <__libc_init_array+0x2e>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	f855 3b04 	ldr.w	r3, [r5], #4
 8009404:	4798      	blx	r3
 8009406:	3601      	adds	r6, #1
 8009408:	e7ee      	b.n	80093e8 <__libc_init_array+0xc>
 800940a:	f855 3b04 	ldr.w	r3, [r5], #4
 800940e:	4798      	blx	r3
 8009410:	3601      	adds	r6, #1
 8009412:	e7f2      	b.n	80093fa <__libc_init_array+0x1e>
 8009414:	0800a6e8 	.word	0x0800a6e8
 8009418:	0800a6e8 	.word	0x0800a6e8
 800941c:	0800a6e8 	.word	0x0800a6e8
 8009420:	0800a6ec 	.word	0x0800a6ec

08009424 <memset>:
 8009424:	4402      	add	r2, r0
 8009426:	4603      	mov	r3, r0
 8009428:	4293      	cmp	r3, r2
 800942a:	d100      	bne.n	800942e <memset+0xa>
 800942c:	4770      	bx	lr
 800942e:	f803 1b01 	strb.w	r1, [r3], #1
 8009432:	e7f9      	b.n	8009428 <memset+0x4>

08009434 <_free_r>:
 8009434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009436:	2900      	cmp	r1, #0
 8009438:	d044      	beq.n	80094c4 <_free_r+0x90>
 800943a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943e:	9001      	str	r0, [sp, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f1a1 0404 	sub.w	r4, r1, #4
 8009446:	bfb8      	it	lt
 8009448:	18e4      	addlt	r4, r4, r3
 800944a:	f000 fc51 	bl	8009cf0 <__malloc_lock>
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <_free_r+0x94>)
 8009450:	9801      	ldr	r0, [sp, #4]
 8009452:	6813      	ldr	r3, [r2, #0]
 8009454:	b933      	cbnz	r3, 8009464 <_free_r+0x30>
 8009456:	6063      	str	r3, [r4, #4]
 8009458:	6014      	str	r4, [r2, #0]
 800945a:	b003      	add	sp, #12
 800945c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009460:	f000 bc4c 	b.w	8009cfc <__malloc_unlock>
 8009464:	42a3      	cmp	r3, r4
 8009466:	d908      	bls.n	800947a <_free_r+0x46>
 8009468:	6825      	ldr	r5, [r4, #0]
 800946a:	1961      	adds	r1, r4, r5
 800946c:	428b      	cmp	r3, r1
 800946e:	bf01      	itttt	eq
 8009470:	6819      	ldreq	r1, [r3, #0]
 8009472:	685b      	ldreq	r3, [r3, #4]
 8009474:	1949      	addeq	r1, r1, r5
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	e7ed      	b.n	8009456 <_free_r+0x22>
 800947a:	461a      	mov	r2, r3
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	b10b      	cbz	r3, 8009484 <_free_r+0x50>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d9fa      	bls.n	800947a <_free_r+0x46>
 8009484:	6811      	ldr	r1, [r2, #0]
 8009486:	1855      	adds	r5, r2, r1
 8009488:	42a5      	cmp	r5, r4
 800948a:	d10b      	bne.n	80094a4 <_free_r+0x70>
 800948c:	6824      	ldr	r4, [r4, #0]
 800948e:	4421      	add	r1, r4
 8009490:	1854      	adds	r4, r2, r1
 8009492:	42a3      	cmp	r3, r4
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	d1e0      	bne.n	800945a <_free_r+0x26>
 8009498:	681c      	ldr	r4, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	6053      	str	r3, [r2, #4]
 800949e:	4421      	add	r1, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	e7da      	b.n	800945a <_free_r+0x26>
 80094a4:	d902      	bls.n	80094ac <_free_r+0x78>
 80094a6:	230c      	movs	r3, #12
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	e7d6      	b.n	800945a <_free_r+0x26>
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf04      	itt	eq
 80094b4:	6819      	ldreq	r1, [r3, #0]
 80094b6:	685b      	ldreq	r3, [r3, #4]
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	bf04      	itt	eq
 80094bc:	1949      	addeq	r1, r1, r5
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	6054      	str	r4, [r2, #4]
 80094c2:	e7ca      	b.n	800945a <_free_r+0x26>
 80094c4:	b003      	add	sp, #12
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	20003ccc 	.word	0x20003ccc

080094cc <sbrk_aligned>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	4e0e      	ldr	r6, [pc, #56]	; (8009508 <sbrk_aligned+0x3c>)
 80094d0:	460c      	mov	r4, r1
 80094d2:	6831      	ldr	r1, [r6, #0]
 80094d4:	4605      	mov	r5, r0
 80094d6:	b911      	cbnz	r1, 80094de <sbrk_aligned+0x12>
 80094d8:	f000 f91a 	bl	8009710 <_sbrk_r>
 80094dc:	6030      	str	r0, [r6, #0]
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 f915 	bl	8009710 <_sbrk_r>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	d00a      	beq.n	8009500 <sbrk_aligned+0x34>
 80094ea:	1cc4      	adds	r4, r0, #3
 80094ec:	f024 0403 	bic.w	r4, r4, #3
 80094f0:	42a0      	cmp	r0, r4
 80094f2:	d007      	beq.n	8009504 <sbrk_aligned+0x38>
 80094f4:	1a21      	subs	r1, r4, r0
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f90a 	bl	8009710 <_sbrk_r>
 80094fc:	3001      	adds	r0, #1
 80094fe:	d101      	bne.n	8009504 <sbrk_aligned+0x38>
 8009500:	f04f 34ff 	mov.w	r4, #4294967295
 8009504:	4620      	mov	r0, r4
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	20003cd0 	.word	0x20003cd0

0800950c <_malloc_r>:
 800950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009510:	1ccd      	adds	r5, r1, #3
 8009512:	f025 0503 	bic.w	r5, r5, #3
 8009516:	3508      	adds	r5, #8
 8009518:	2d0c      	cmp	r5, #12
 800951a:	bf38      	it	cc
 800951c:	250c      	movcc	r5, #12
 800951e:	2d00      	cmp	r5, #0
 8009520:	4607      	mov	r7, r0
 8009522:	db01      	blt.n	8009528 <_malloc_r+0x1c>
 8009524:	42a9      	cmp	r1, r5
 8009526:	d905      	bls.n	8009534 <_malloc_r+0x28>
 8009528:	230c      	movs	r3, #12
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	2600      	movs	r6, #0
 800952e:	4630      	mov	r0, r6
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	4e2e      	ldr	r6, [pc, #184]	; (80095f0 <_malloc_r+0xe4>)
 8009536:	f000 fbdb 	bl	8009cf0 <__malloc_lock>
 800953a:	6833      	ldr	r3, [r6, #0]
 800953c:	461c      	mov	r4, r3
 800953e:	bb34      	cbnz	r4, 800958e <_malloc_r+0x82>
 8009540:	4629      	mov	r1, r5
 8009542:	4638      	mov	r0, r7
 8009544:	f7ff ffc2 	bl	80094cc <sbrk_aligned>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	4604      	mov	r4, r0
 800954c:	d14d      	bne.n	80095ea <_malloc_r+0xde>
 800954e:	6834      	ldr	r4, [r6, #0]
 8009550:	4626      	mov	r6, r4
 8009552:	2e00      	cmp	r6, #0
 8009554:	d140      	bne.n	80095d8 <_malloc_r+0xcc>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	4631      	mov	r1, r6
 800955a:	4638      	mov	r0, r7
 800955c:	eb04 0803 	add.w	r8, r4, r3
 8009560:	f000 f8d6 	bl	8009710 <_sbrk_r>
 8009564:	4580      	cmp	r8, r0
 8009566:	d13a      	bne.n	80095de <_malloc_r+0xd2>
 8009568:	6821      	ldr	r1, [r4, #0]
 800956a:	3503      	adds	r5, #3
 800956c:	1a6d      	subs	r5, r5, r1
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	4629      	mov	r1, r5
 800957c:	4638      	mov	r0, r7
 800957e:	f7ff ffa5 	bl	80094cc <sbrk_aligned>
 8009582:	3001      	adds	r0, #1
 8009584:	d02b      	beq.n	80095de <_malloc_r+0xd2>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	442b      	add	r3, r5
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	e00e      	b.n	80095ac <_malloc_r+0xa0>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	1b52      	subs	r2, r2, r5
 8009592:	d41e      	bmi.n	80095d2 <_malloc_r+0xc6>
 8009594:	2a0b      	cmp	r2, #11
 8009596:	d916      	bls.n	80095c6 <_malloc_r+0xba>
 8009598:	1961      	adds	r1, r4, r5
 800959a:	42a3      	cmp	r3, r4
 800959c:	6025      	str	r5, [r4, #0]
 800959e:	bf18      	it	ne
 80095a0:	6059      	strne	r1, [r3, #4]
 80095a2:	6863      	ldr	r3, [r4, #4]
 80095a4:	bf08      	it	eq
 80095a6:	6031      	streq	r1, [r6, #0]
 80095a8:	5162      	str	r2, [r4, r5]
 80095aa:	604b      	str	r3, [r1, #4]
 80095ac:	4638      	mov	r0, r7
 80095ae:	f104 060b 	add.w	r6, r4, #11
 80095b2:	f000 fba3 	bl	8009cfc <__malloc_unlock>
 80095b6:	f026 0607 	bic.w	r6, r6, #7
 80095ba:	1d23      	adds	r3, r4, #4
 80095bc:	1af2      	subs	r2, r6, r3
 80095be:	d0b6      	beq.n	800952e <_malloc_r+0x22>
 80095c0:	1b9b      	subs	r3, r3, r6
 80095c2:	50a3      	str	r3, [r4, r2]
 80095c4:	e7b3      	b.n	800952e <_malloc_r+0x22>
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	42a3      	cmp	r3, r4
 80095ca:	bf0c      	ite	eq
 80095cc:	6032      	streq	r2, [r6, #0]
 80095ce:	605a      	strne	r2, [r3, #4]
 80095d0:	e7ec      	b.n	80095ac <_malloc_r+0xa0>
 80095d2:	4623      	mov	r3, r4
 80095d4:	6864      	ldr	r4, [r4, #4]
 80095d6:	e7b2      	b.n	800953e <_malloc_r+0x32>
 80095d8:	4634      	mov	r4, r6
 80095da:	6876      	ldr	r6, [r6, #4]
 80095dc:	e7b9      	b.n	8009552 <_malloc_r+0x46>
 80095de:	230c      	movs	r3, #12
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	4638      	mov	r0, r7
 80095e4:	f000 fb8a 	bl	8009cfc <__malloc_unlock>
 80095e8:	e7a1      	b.n	800952e <_malloc_r+0x22>
 80095ea:	6025      	str	r5, [r4, #0]
 80095ec:	e7de      	b.n	80095ac <_malloc_r+0xa0>
 80095ee:	bf00      	nop
 80095f0:	20003ccc 	.word	0x20003ccc

080095f4 <iprintf>:
 80095f4:	b40f      	push	{r0, r1, r2, r3}
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <iprintf+0x2c>)
 80095f8:	b513      	push	{r0, r1, r4, lr}
 80095fa:	681c      	ldr	r4, [r3, #0]
 80095fc:	b124      	cbz	r4, 8009608 <iprintf+0x14>
 80095fe:	69a3      	ldr	r3, [r4, #24]
 8009600:	b913      	cbnz	r3, 8009608 <iprintf+0x14>
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fa6e 	bl	8009ae4 <__sinit>
 8009608:	ab05      	add	r3, sp, #20
 800960a:	9a04      	ldr	r2, [sp, #16]
 800960c:	68a1      	ldr	r1, [r4, #8]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fba3 	bl	8009d5c <_vfiprintf_r>
 8009616:	b002      	add	sp, #8
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	b004      	add	sp, #16
 800961e:	4770      	bx	lr
 8009620:	2000005c 	.word	0x2000005c

08009624 <_puts_r>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	460e      	mov	r6, r1
 8009628:	4605      	mov	r5, r0
 800962a:	b118      	cbz	r0, 8009634 <_puts_r+0x10>
 800962c:	6983      	ldr	r3, [r0, #24]
 800962e:	b90b      	cbnz	r3, 8009634 <_puts_r+0x10>
 8009630:	f000 fa58 	bl	8009ae4 <__sinit>
 8009634:	69ab      	ldr	r3, [r5, #24]
 8009636:	68ac      	ldr	r4, [r5, #8]
 8009638:	b913      	cbnz	r3, 8009640 <_puts_r+0x1c>
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fa52 	bl	8009ae4 <__sinit>
 8009640:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <_puts_r+0xd0>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d120      	bne.n	8009688 <_puts_r+0x64>
 8009646:	686c      	ldr	r4, [r5, #4]
 8009648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964a:	07db      	lsls	r3, r3, #31
 800964c:	d405      	bmi.n	800965a <_puts_r+0x36>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	0598      	lsls	r0, r3, #22
 8009652:	d402      	bmi.n	800965a <_puts_r+0x36>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f000 fae3 	bl	8009c20 <__retarget_lock_acquire_recursive>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	0719      	lsls	r1, r3, #28
 800965e:	d51d      	bpl.n	800969c <_puts_r+0x78>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	b1db      	cbz	r3, 800969c <_puts_r+0x78>
 8009664:	3e01      	subs	r6, #1
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800966c:	3b01      	subs	r3, #1
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	bb39      	cbnz	r1, 80096c2 <_puts_r+0x9e>
 8009672:	2b00      	cmp	r3, #0
 8009674:	da38      	bge.n	80096e8 <_puts_r+0xc4>
 8009676:	4622      	mov	r2, r4
 8009678:	210a      	movs	r1, #10
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f858 	bl	8009730 <__swbuf_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d011      	beq.n	80096a8 <_puts_r+0x84>
 8009684:	250a      	movs	r5, #10
 8009686:	e011      	b.n	80096ac <_puts_r+0x88>
 8009688:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <_puts_r+0xd4>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <_puts_r+0x6e>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7da      	b.n	8009648 <_puts_r+0x24>
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <_puts_r+0xd8>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7d5      	b.n	8009648 <_puts_r+0x24>
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 f898 	bl	80097d4 <__swsetup_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d0dd      	beq.n	8009664 <_puts_r+0x40>
 80096a8:	f04f 35ff 	mov.w	r5, #4294967295
 80096ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ae:	07da      	lsls	r2, r3, #31
 80096b0:	d405      	bmi.n	80096be <_puts_r+0x9a>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	059b      	lsls	r3, r3, #22
 80096b6:	d402      	bmi.n	80096be <_puts_r+0x9a>
 80096b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ba:	f000 fab2 	bl	8009c22 <__retarget_lock_release_recursive>
 80096be:	4628      	mov	r0, r5
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da04      	bge.n	80096d0 <_puts_r+0xac>
 80096c6:	69a2      	ldr	r2, [r4, #24]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	dc06      	bgt.n	80096da <_puts_r+0xb6>
 80096cc:	290a      	cmp	r1, #10
 80096ce:	d004      	beq.n	80096da <_puts_r+0xb6>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	6022      	str	r2, [r4, #0]
 80096d6:	7019      	strb	r1, [r3, #0]
 80096d8:	e7c5      	b.n	8009666 <_puts_r+0x42>
 80096da:	4622      	mov	r2, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f827 	bl	8009730 <__swbuf_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d1bf      	bne.n	8009666 <_puts_r+0x42>
 80096e6:	e7df      	b.n	80096a8 <_puts_r+0x84>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	250a      	movs	r5, #10
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	701d      	strb	r5, [r3, #0]
 80096f2:	e7db      	b.n	80096ac <_puts_r+0x88>
 80096f4:	0800a66c 	.word	0x0800a66c
 80096f8:	0800a68c 	.word	0x0800a68c
 80096fc:	0800a64c 	.word	0x0800a64c

08009700 <puts>:
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <puts+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f7ff bf8d 	b.w	8009624 <_puts_r>
 800970a:	bf00      	nop
 800970c:	2000005c 	.word	0x2000005c

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	; (800972c <_sbrk_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f8 f8b6 	bl	800188c <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20003cd8 	.word	0x20003cd8

08009730 <__swbuf_r>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	460e      	mov	r6, r1
 8009734:	4614      	mov	r4, r2
 8009736:	4605      	mov	r5, r0
 8009738:	b118      	cbz	r0, 8009742 <__swbuf_r+0x12>
 800973a:	6983      	ldr	r3, [r0, #24]
 800973c:	b90b      	cbnz	r3, 8009742 <__swbuf_r+0x12>
 800973e:	f000 f9d1 	bl	8009ae4 <__sinit>
 8009742:	4b21      	ldr	r3, [pc, #132]	; (80097c8 <__swbuf_r+0x98>)
 8009744:	429c      	cmp	r4, r3
 8009746:	d12b      	bne.n	80097a0 <__swbuf_r+0x70>
 8009748:	686c      	ldr	r4, [r5, #4]
 800974a:	69a3      	ldr	r3, [r4, #24]
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	071a      	lsls	r2, r3, #28
 8009752:	d52f      	bpl.n	80097b4 <__swbuf_r+0x84>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	b36b      	cbz	r3, 80097b4 <__swbuf_r+0x84>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6963      	ldr	r3, [r4, #20]
 8009760:	b2f6      	uxtb	r6, r6
 8009762:	4283      	cmp	r3, r0
 8009764:	4637      	mov	r7, r6
 8009766:	dc04      	bgt.n	8009772 <__swbuf_r+0x42>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f926 	bl	80099bc <_fflush_r>
 8009770:	bb30      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	701e      	strb	r6, [r3, #0]
 8009780:	6963      	ldr	r3, [r4, #20]
 8009782:	3001      	adds	r0, #1
 8009784:	4283      	cmp	r3, r0
 8009786:	d004      	beq.n	8009792 <__swbuf_r+0x62>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d506      	bpl.n	800979c <__swbuf_r+0x6c>
 800978e:	2e0a      	cmp	r6, #10
 8009790:	d104      	bne.n	800979c <__swbuf_r+0x6c>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f911 	bl	80099bc <_fflush_r>
 800979a:	b988      	cbnz	r0, 80097c0 <__swbuf_r+0x90>
 800979c:	4638      	mov	r0, r7
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <__swbuf_r+0x9c>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d101      	bne.n	80097aa <__swbuf_r+0x7a>
 80097a6:	68ac      	ldr	r4, [r5, #8]
 80097a8:	e7cf      	b.n	800974a <__swbuf_r+0x1a>
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <__swbuf_r+0xa0>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	bf08      	it	eq
 80097b0:	68ec      	ldreq	r4, [r5, #12]
 80097b2:	e7ca      	b.n	800974a <__swbuf_r+0x1a>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f80c 	bl	80097d4 <__swsetup_r>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0cb      	beq.n	8009758 <__swbuf_r+0x28>
 80097c0:	f04f 37ff 	mov.w	r7, #4294967295
 80097c4:	e7ea      	b.n	800979c <__swbuf_r+0x6c>
 80097c6:	bf00      	nop
 80097c8:	0800a66c 	.word	0x0800a66c
 80097cc:	0800a68c 	.word	0x0800a68c
 80097d0:	0800a64c 	.word	0x0800a64c

080097d4 <__swsetup_r>:
 80097d4:	4b32      	ldr	r3, [pc, #200]	; (80098a0 <__swsetup_r+0xcc>)
 80097d6:	b570      	push	{r4, r5, r6, lr}
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	4606      	mov	r6, r0
 80097dc:	460c      	mov	r4, r1
 80097de:	b125      	cbz	r5, 80097ea <__swsetup_r+0x16>
 80097e0:	69ab      	ldr	r3, [r5, #24]
 80097e2:	b913      	cbnz	r3, 80097ea <__swsetup_r+0x16>
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 f97d 	bl	8009ae4 <__sinit>
 80097ea:	4b2e      	ldr	r3, [pc, #184]	; (80098a4 <__swsetup_r+0xd0>)
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d10f      	bne.n	8009810 <__swsetup_r+0x3c>
 80097f0:	686c      	ldr	r4, [r5, #4]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f8:	0719      	lsls	r1, r3, #28
 80097fa:	d42c      	bmi.n	8009856 <__swsetup_r+0x82>
 80097fc:	06dd      	lsls	r5, r3, #27
 80097fe:	d411      	bmi.n	8009824 <__swsetup_r+0x50>
 8009800:	2309      	movs	r3, #9
 8009802:	6033      	str	r3, [r6, #0]
 8009804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
 800980e:	e03e      	b.n	800988e <__swsetup_r+0xba>
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <__swsetup_r+0xd4>)
 8009812:	429c      	cmp	r4, r3
 8009814:	d101      	bne.n	800981a <__swsetup_r+0x46>
 8009816:	68ac      	ldr	r4, [r5, #8]
 8009818:	e7eb      	b.n	80097f2 <__swsetup_r+0x1e>
 800981a:	4b24      	ldr	r3, [pc, #144]	; (80098ac <__swsetup_r+0xd8>)
 800981c:	429c      	cmp	r4, r3
 800981e:	bf08      	it	eq
 8009820:	68ec      	ldreq	r4, [r5, #12]
 8009822:	e7e6      	b.n	80097f2 <__swsetup_r+0x1e>
 8009824:	0758      	lsls	r0, r3, #29
 8009826:	d512      	bpl.n	800984e <__swsetup_r+0x7a>
 8009828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982a:	b141      	cbz	r1, 800983e <__swsetup_r+0x6a>
 800982c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009830:	4299      	cmp	r1, r3
 8009832:	d002      	beq.n	800983a <__swsetup_r+0x66>
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff fdfd 	bl	8009434 <_free_r>
 800983a:	2300      	movs	r3, #0
 800983c:	6363      	str	r3, [r4, #52]	; 0x34
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	2300      	movs	r3, #0
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f043 0308 	orr.w	r3, r3, #8
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	b94b      	cbnz	r3, 800986e <__swsetup_r+0x9a>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009864:	d003      	beq.n	800986e <__swsetup_r+0x9a>
 8009866:	4621      	mov	r1, r4
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fa01 	bl	8009c70 <__smakebuf_r>
 800986e:	89a0      	ldrh	r0, [r4, #12]
 8009870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009874:	f010 0301 	ands.w	r3, r0, #1
 8009878:	d00a      	beq.n	8009890 <__swsetup_r+0xbc>
 800987a:	2300      	movs	r3, #0
 800987c:	60a3      	str	r3, [r4, #8]
 800987e:	6963      	ldr	r3, [r4, #20]
 8009880:	425b      	negs	r3, r3
 8009882:	61a3      	str	r3, [r4, #24]
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	b943      	cbnz	r3, 800989a <__swsetup_r+0xc6>
 8009888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800988c:	d1ba      	bne.n	8009804 <__swsetup_r+0x30>
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	0781      	lsls	r1, r0, #30
 8009892:	bf58      	it	pl
 8009894:	6963      	ldrpl	r3, [r4, #20]
 8009896:	60a3      	str	r3, [r4, #8]
 8009898:	e7f4      	b.n	8009884 <__swsetup_r+0xb0>
 800989a:	2000      	movs	r0, #0
 800989c:	e7f7      	b.n	800988e <__swsetup_r+0xba>
 800989e:	bf00      	nop
 80098a0:	2000005c 	.word	0x2000005c
 80098a4:	0800a66c 	.word	0x0800a66c
 80098a8:	0800a68c 	.word	0x0800a68c
 80098ac:	0800a64c 	.word	0x0800a64c

080098b0 <__sflush_r>:
 80098b0:	898a      	ldrh	r2, [r1, #12]
 80098b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	4605      	mov	r5, r0
 80098b8:	0710      	lsls	r0, r2, #28
 80098ba:	460c      	mov	r4, r1
 80098bc:	d458      	bmi.n	8009970 <__sflush_r+0xc0>
 80098be:	684b      	ldr	r3, [r1, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc05      	bgt.n	80098d0 <__sflush_r+0x20>
 80098c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dc02      	bgt.n	80098d0 <__sflush_r+0x20>
 80098ca:	2000      	movs	r0, #0
 80098cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d2:	2e00      	cmp	r6, #0
 80098d4:	d0f9      	beq.n	80098ca <__sflush_r+0x1a>
 80098d6:	2300      	movs	r3, #0
 80098d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098dc:	682f      	ldr	r7, [r5, #0]
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	d032      	beq.n	8009948 <__sflush_r+0x98>
 80098e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	075a      	lsls	r2, r3, #29
 80098e8:	d505      	bpl.n	80098f6 <__sflush_r+0x46>
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	1ac0      	subs	r0, r0, r3
 80098ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f0:	b10b      	cbz	r3, 80098f6 <__sflush_r+0x46>
 80098f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f4:	1ac0      	subs	r0, r0, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	4602      	mov	r2, r0
 80098fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fc:	6a21      	ldr	r1, [r4, #32]
 80098fe:	4628      	mov	r0, r5
 8009900:	47b0      	blx	r6
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	d106      	bne.n	8009916 <__sflush_r+0x66>
 8009908:	6829      	ldr	r1, [r5, #0]
 800990a:	291d      	cmp	r1, #29
 800990c:	d82c      	bhi.n	8009968 <__sflush_r+0xb8>
 800990e:	4a2a      	ldr	r2, [pc, #168]	; (80099b8 <__sflush_r+0x108>)
 8009910:	40ca      	lsrs	r2, r1
 8009912:	07d6      	lsls	r6, r2, #31
 8009914:	d528      	bpl.n	8009968 <__sflush_r+0xb8>
 8009916:	2200      	movs	r2, #0
 8009918:	6062      	str	r2, [r4, #4]
 800991a:	04d9      	lsls	r1, r3, #19
 800991c:	6922      	ldr	r2, [r4, #16]
 800991e:	6022      	str	r2, [r4, #0]
 8009920:	d504      	bpl.n	800992c <__sflush_r+0x7c>
 8009922:	1c42      	adds	r2, r0, #1
 8009924:	d101      	bne.n	800992a <__sflush_r+0x7a>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b903      	cbnz	r3, 800992c <__sflush_r+0x7c>
 800992a:	6560      	str	r0, [r4, #84]	; 0x54
 800992c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800992e:	602f      	str	r7, [r5, #0]
 8009930:	2900      	cmp	r1, #0
 8009932:	d0ca      	beq.n	80098ca <__sflush_r+0x1a>
 8009934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009938:	4299      	cmp	r1, r3
 800993a:	d002      	beq.n	8009942 <__sflush_r+0x92>
 800993c:	4628      	mov	r0, r5
 800993e:	f7ff fd79 	bl	8009434 <_free_r>
 8009942:	2000      	movs	r0, #0
 8009944:	6360      	str	r0, [r4, #52]	; 0x34
 8009946:	e7c1      	b.n	80098cc <__sflush_r+0x1c>
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	2301      	movs	r3, #1
 800994c:	4628      	mov	r0, r5
 800994e:	47b0      	blx	r6
 8009950:	1c41      	adds	r1, r0, #1
 8009952:	d1c7      	bne.n	80098e4 <__sflush_r+0x34>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0c4      	beq.n	80098e4 <__sflush_r+0x34>
 800995a:	2b1d      	cmp	r3, #29
 800995c:	d001      	beq.n	8009962 <__sflush_r+0xb2>
 800995e:	2b16      	cmp	r3, #22
 8009960:	d101      	bne.n	8009966 <__sflush_r+0xb6>
 8009962:	602f      	str	r7, [r5, #0]
 8009964:	e7b1      	b.n	80098ca <__sflush_r+0x1a>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	e7ad      	b.n	80098cc <__sflush_r+0x1c>
 8009970:	690f      	ldr	r7, [r1, #16]
 8009972:	2f00      	cmp	r7, #0
 8009974:	d0a9      	beq.n	80098ca <__sflush_r+0x1a>
 8009976:	0793      	lsls	r3, r2, #30
 8009978:	680e      	ldr	r6, [r1, #0]
 800997a:	bf08      	it	eq
 800997c:	694b      	ldreq	r3, [r1, #20]
 800997e:	600f      	str	r7, [r1, #0]
 8009980:	bf18      	it	ne
 8009982:	2300      	movne	r3, #0
 8009984:	eba6 0807 	sub.w	r8, r6, r7
 8009988:	608b      	str	r3, [r1, #8]
 800998a:	f1b8 0f00 	cmp.w	r8, #0
 800998e:	dd9c      	ble.n	80098ca <__sflush_r+0x1a>
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009994:	4643      	mov	r3, r8
 8009996:	463a      	mov	r2, r7
 8009998:	4628      	mov	r0, r5
 800999a:	47b0      	blx	r6
 800999c:	2800      	cmp	r0, #0
 800999e:	dc06      	bgt.n	80099ae <__sflush_r+0xfe>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	e78e      	b.n	80098cc <__sflush_r+0x1c>
 80099ae:	4407      	add	r7, r0
 80099b0:	eba8 0800 	sub.w	r8, r8, r0
 80099b4:	e7e9      	b.n	800998a <__sflush_r+0xda>
 80099b6:	bf00      	nop
 80099b8:	20400001 	.word	0x20400001

080099bc <_fflush_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	690b      	ldr	r3, [r1, #16]
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b913      	cbnz	r3, 80099cc <_fflush_r+0x10>
 80099c6:	2500      	movs	r5, #0
 80099c8:	4628      	mov	r0, r5
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	b118      	cbz	r0, 80099d6 <_fflush_r+0x1a>
 80099ce:	6983      	ldr	r3, [r0, #24]
 80099d0:	b90b      	cbnz	r3, 80099d6 <_fflush_r+0x1a>
 80099d2:	f000 f887 	bl	8009ae4 <__sinit>
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <_fflush_r+0x6c>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d11b      	bne.n	8009a14 <_fflush_r+0x58>
 80099dc:	686c      	ldr	r4, [r5, #4]
 80099de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0ef      	beq.n	80099c6 <_fflush_r+0xa>
 80099e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099e8:	07d0      	lsls	r0, r2, #31
 80099ea:	d404      	bmi.n	80099f6 <_fflush_r+0x3a>
 80099ec:	0599      	lsls	r1, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_fflush_r+0x3a>
 80099f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f2:	f000 f915 	bl	8009c20 <__retarget_lock_acquire_recursive>
 80099f6:	4628      	mov	r0, r5
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7ff ff59 	bl	80098b0 <__sflush_r>
 80099fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a00:	07da      	lsls	r2, r3, #31
 8009a02:	4605      	mov	r5, r0
 8009a04:	d4e0      	bmi.n	80099c8 <_fflush_r+0xc>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	059b      	lsls	r3, r3, #22
 8009a0a:	d4dd      	bmi.n	80099c8 <_fflush_r+0xc>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f000 f908 	bl	8009c22 <__retarget_lock_release_recursive>
 8009a12:	e7d9      	b.n	80099c8 <_fflush_r+0xc>
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <_fflush_r+0x70>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	d101      	bne.n	8009a1e <_fflush_r+0x62>
 8009a1a:	68ac      	ldr	r4, [r5, #8]
 8009a1c:	e7df      	b.n	80099de <_fflush_r+0x22>
 8009a1e:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <_fflush_r+0x74>)
 8009a20:	429c      	cmp	r4, r3
 8009a22:	bf08      	it	eq
 8009a24:	68ec      	ldreq	r4, [r5, #12]
 8009a26:	e7da      	b.n	80099de <_fflush_r+0x22>
 8009a28:	0800a66c 	.word	0x0800a66c
 8009a2c:	0800a68c 	.word	0x0800a68c
 8009a30:	0800a64c 	.word	0x0800a64c

08009a34 <std>:
 8009a34:	2300      	movs	r3, #0
 8009a36:	b510      	push	{r4, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a42:	6083      	str	r3, [r0, #8]
 8009a44:	8181      	strh	r1, [r0, #12]
 8009a46:	6643      	str	r3, [r0, #100]	; 0x64
 8009a48:	81c2      	strh	r2, [r0, #14]
 8009a4a:	6183      	str	r3, [r0, #24]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	2208      	movs	r2, #8
 8009a50:	305c      	adds	r0, #92	; 0x5c
 8009a52:	f7ff fce7 	bl	8009424 <memset>
 8009a56:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <std+0x38>)
 8009a58:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x3c>)
 8009a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x40>)
 8009a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <std+0x44>)
 8009a64:	6224      	str	r4, [r4, #32]
 8009a66:	6323      	str	r3, [r4, #48]	; 0x30
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	bf00      	nop
 8009a6c:	0800a2e5 	.word	0x0800a2e5
 8009a70:	0800a307 	.word	0x0800a307
 8009a74:	0800a33f 	.word	0x0800a33f
 8009a78:	0800a363 	.word	0x0800a363

08009a7c <_cleanup_r>:
 8009a7c:	4901      	ldr	r1, [pc, #4]	; (8009a84 <_cleanup_r+0x8>)
 8009a7e:	f000 b8af 	b.w	8009be0 <_fwalk_reent>
 8009a82:	bf00      	nop
 8009a84:	080099bd 	.word	0x080099bd

08009a88 <__sfmoreglue>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	2268      	movs	r2, #104	; 0x68
 8009a8c:	1e4d      	subs	r5, r1, #1
 8009a8e:	4355      	muls	r5, r2
 8009a90:	460e      	mov	r6, r1
 8009a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a96:	f7ff fd39 	bl	800950c <_malloc_r>
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	b140      	cbz	r0, 8009ab0 <__sfmoreglue+0x28>
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa4:	300c      	adds	r0, #12
 8009aa6:	60a0      	str	r0, [r4, #8]
 8009aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009aac:	f7ff fcba 	bl	8009424 <memset>
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}

08009ab4 <__sfp_lock_acquire>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__sfp_lock_acquire+0x8>)
 8009ab6:	f000 b8b3 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	20003cd5 	.word	0x20003cd5

08009ac0 <__sfp_lock_release>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__sfp_lock_release+0x8>)
 8009ac2:	f000 b8ae 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	20003cd5 	.word	0x20003cd5

08009acc <__sinit_lock_acquire>:
 8009acc:	4801      	ldr	r0, [pc, #4]	; (8009ad4 <__sinit_lock_acquire+0x8>)
 8009ace:	f000 b8a7 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20003cd6 	.word	0x20003cd6

08009ad8 <__sinit_lock_release>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__sinit_lock_release+0x8>)
 8009ada:	f000 b8a2 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20003cd6 	.word	0x20003cd6

08009ae4 <__sinit>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	f7ff fff0 	bl	8009acc <__sinit_lock_acquire>
 8009aec:	69a3      	ldr	r3, [r4, #24]
 8009aee:	b11b      	cbz	r3, 8009af8 <__sinit+0x14>
 8009af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af4:	f7ff bff0 	b.w	8009ad8 <__sinit_lock_release>
 8009af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009afc:	6523      	str	r3, [r4, #80]	; 0x50
 8009afe:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <__sinit+0x68>)
 8009b00:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <__sinit+0x6c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	bf04      	itt	eq
 8009b0a:	2301      	moveq	r3, #1
 8009b0c:	61a3      	streq	r3, [r4, #24]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 f820 	bl	8009b54 <__sfp>
 8009b14:	6060      	str	r0, [r4, #4]
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 f81c 	bl	8009b54 <__sfp>
 8009b1c:	60a0      	str	r0, [r4, #8]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 f818 	bl	8009b54 <__sfp>
 8009b24:	2200      	movs	r2, #0
 8009b26:	60e0      	str	r0, [r4, #12]
 8009b28:	2104      	movs	r1, #4
 8009b2a:	6860      	ldr	r0, [r4, #4]
 8009b2c:	f7ff ff82 	bl	8009a34 <std>
 8009b30:	68a0      	ldr	r0, [r4, #8]
 8009b32:	2201      	movs	r2, #1
 8009b34:	2109      	movs	r1, #9
 8009b36:	f7ff ff7d 	bl	8009a34 <std>
 8009b3a:	68e0      	ldr	r0, [r4, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	2112      	movs	r1, #18
 8009b40:	f7ff ff78 	bl	8009a34 <std>
 8009b44:	2301      	movs	r3, #1
 8009b46:	61a3      	str	r3, [r4, #24]
 8009b48:	e7d2      	b.n	8009af0 <__sinit+0xc>
 8009b4a:	bf00      	nop
 8009b4c:	0800a648 	.word	0x0800a648
 8009b50:	08009a7d 	.word	0x08009a7d

08009b54 <__sfp>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	4607      	mov	r7, r0
 8009b58:	f7ff ffac 	bl	8009ab4 <__sfp_lock_acquire>
 8009b5c:	4b1e      	ldr	r3, [pc, #120]	; (8009bd8 <__sfp+0x84>)
 8009b5e:	681e      	ldr	r6, [r3, #0]
 8009b60:	69b3      	ldr	r3, [r6, #24]
 8009b62:	b913      	cbnz	r3, 8009b6a <__sfp+0x16>
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff ffbd 	bl	8009ae4 <__sinit>
 8009b6a:	3648      	adds	r6, #72	; 0x48
 8009b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	d503      	bpl.n	8009b7c <__sfp+0x28>
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	b30b      	cbz	r3, 8009bbc <__sfp+0x68>
 8009b78:	6836      	ldr	r6, [r6, #0]
 8009b7a:	e7f7      	b.n	8009b6c <__sfp+0x18>
 8009b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b80:	b9d5      	cbnz	r5, 8009bb8 <__sfp+0x64>
 8009b82:	4b16      	ldr	r3, [pc, #88]	; (8009bdc <__sfp+0x88>)
 8009b84:	60e3      	str	r3, [r4, #12]
 8009b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b8c:	f000 f847 	bl	8009c1e <__retarget_lock_init_recursive>
 8009b90:	f7ff ff96 	bl	8009ac0 <__sfp_lock_release>
 8009b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b9c:	6025      	str	r5, [r4, #0]
 8009b9e:	61a5      	str	r5, [r4, #24]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ba8:	f7ff fc3c 	bl	8009424 <memset>
 8009bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb8:	3468      	adds	r4, #104	; 0x68
 8009bba:	e7d9      	b.n	8009b70 <__sfp+0x1c>
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7ff ff62 	bl	8009a88 <__sfmoreglue>
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	6030      	str	r0, [r6, #0]
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1d5      	bne.n	8009b78 <__sfp+0x24>
 8009bcc:	f7ff ff78 	bl	8009ac0 <__sfp_lock_release>
 8009bd0:	230c      	movs	r3, #12
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	e7ee      	b.n	8009bb4 <__sfp+0x60>
 8009bd6:	bf00      	nop
 8009bd8:	0800a648 	.word	0x0800a648
 8009bdc:	ffff0001 	.word	0xffff0001

08009be0 <_fwalk_reent>:
 8009be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	4606      	mov	r6, r0
 8009be6:	4688      	mov	r8, r1
 8009be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bec:	2700      	movs	r7, #0
 8009bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8009bf6:	d505      	bpl.n	8009c04 <_fwalk_reent+0x24>
 8009bf8:	6824      	ldr	r4, [r4, #0]
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	d1f7      	bne.n	8009bee <_fwalk_reent+0xe>
 8009bfe:	4638      	mov	r0, r7
 8009c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c04:	89ab      	ldrh	r3, [r5, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d907      	bls.n	8009c1a <_fwalk_reent+0x3a>
 8009c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	d003      	beq.n	8009c1a <_fwalk_reent+0x3a>
 8009c12:	4629      	mov	r1, r5
 8009c14:	4630      	mov	r0, r6
 8009c16:	47c0      	blx	r8
 8009c18:	4307      	orrs	r7, r0
 8009c1a:	3568      	adds	r5, #104	; 0x68
 8009c1c:	e7e9      	b.n	8009bf2 <_fwalk_reent+0x12>

08009c1e <__retarget_lock_init_recursive>:
 8009c1e:	4770      	bx	lr

08009c20 <__retarget_lock_acquire_recursive>:
 8009c20:	4770      	bx	lr

08009c22 <__retarget_lock_release_recursive>:
 8009c22:	4770      	bx	lr

08009c24 <__swhatbuf_r>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	460e      	mov	r6, r1
 8009c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	b096      	sub	sp, #88	; 0x58
 8009c30:	4614      	mov	r4, r2
 8009c32:	461d      	mov	r5, r3
 8009c34:	da08      	bge.n	8009c48 <__swhatbuf_r+0x24>
 8009c36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	602a      	str	r2, [r5, #0]
 8009c3e:	061a      	lsls	r2, r3, #24
 8009c40:	d410      	bmi.n	8009c64 <__swhatbuf_r+0x40>
 8009c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c46:	e00e      	b.n	8009c66 <__swhatbuf_r+0x42>
 8009c48:	466a      	mov	r2, sp
 8009c4a:	f000 fbb1 	bl	800a3b0 <_fstat_r>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	dbf1      	blt.n	8009c36 <__swhatbuf_r+0x12>
 8009c52:	9a01      	ldr	r2, [sp, #4]
 8009c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c5c:	425a      	negs	r2, r3
 8009c5e:	415a      	adcs	r2, r3
 8009c60:	602a      	str	r2, [r5, #0]
 8009c62:	e7ee      	b.n	8009c42 <__swhatbuf_r+0x1e>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	2000      	movs	r0, #0
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	b016      	add	sp, #88	; 0x58
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c70 <__smakebuf_r>:
 8009c70:	898b      	ldrh	r3, [r1, #12]
 8009c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c74:	079d      	lsls	r5, r3, #30
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	d507      	bpl.n	8009c8c <__smakebuf_r+0x1c>
 8009c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	2301      	movs	r3, #1
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	b002      	add	sp, #8
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	ab01      	add	r3, sp, #4
 8009c8e:	466a      	mov	r2, sp
 8009c90:	f7ff ffc8 	bl	8009c24 <__swhatbuf_r>
 8009c94:	9900      	ldr	r1, [sp, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff fc37 	bl	800950c <_malloc_r>
 8009c9e:	b948      	cbnz	r0, 8009cb4 <__smakebuf_r+0x44>
 8009ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca4:	059a      	lsls	r2, r3, #22
 8009ca6:	d4ef      	bmi.n	8009c88 <__smakebuf_r+0x18>
 8009ca8:	f023 0303 	bic.w	r3, r3, #3
 8009cac:	f043 0302 	orr.w	r3, r3, #2
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	e7e3      	b.n	8009c7c <__smakebuf_r+0xc>
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <__smakebuf_r+0x7c>)
 8009cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	6020      	str	r0, [r4, #0]
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	6163      	str	r3, [r4, #20]
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	6120      	str	r0, [r4, #16]
 8009cca:	b15b      	cbz	r3, 8009ce4 <__smakebuf_r+0x74>
 8009ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 fb7f 	bl	800a3d4 <_isatty_r>
 8009cd6:	b128      	cbz	r0, 8009ce4 <__smakebuf_r+0x74>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	89a0      	ldrh	r0, [r4, #12]
 8009ce6:	4305      	orrs	r5, r0
 8009ce8:	81a5      	strh	r5, [r4, #12]
 8009cea:	e7cd      	b.n	8009c88 <__smakebuf_r+0x18>
 8009cec:	08009a7d 	.word	0x08009a7d

08009cf0 <__malloc_lock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__malloc_lock+0x8>)
 8009cf2:	f7ff bf95 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20003cd4 	.word	0x20003cd4

08009cfc <__malloc_unlock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__malloc_unlock+0x8>)
 8009cfe:	f7ff bf90 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	20003cd4 	.word	0x20003cd4

08009d08 <__sfputc_r>:
 8009d08:	6893      	ldr	r3, [r2, #8]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	b410      	push	{r4}
 8009d10:	6093      	str	r3, [r2, #8]
 8009d12:	da08      	bge.n	8009d26 <__sfputc_r+0x1e>
 8009d14:	6994      	ldr	r4, [r2, #24]
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	db01      	blt.n	8009d1e <__sfputc_r+0x16>
 8009d1a:	290a      	cmp	r1, #10
 8009d1c:	d103      	bne.n	8009d26 <__sfputc_r+0x1e>
 8009d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d22:	f7ff bd05 	b.w	8009730 <__swbuf_r>
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	1c58      	adds	r0, r3, #1
 8009d2a:	6010      	str	r0, [r2, #0]
 8009d2c:	7019      	strb	r1, [r3, #0]
 8009d2e:	4608      	mov	r0, r1
 8009d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <__sfputs_r>:
 8009d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	18d5      	adds	r5, r2, r3
 8009d40:	42ac      	cmp	r4, r5
 8009d42:	d101      	bne.n	8009d48 <__sfputs_r+0x12>
 8009d44:	2000      	movs	r0, #0
 8009d46:	e007      	b.n	8009d58 <__sfputs_r+0x22>
 8009d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4c:	463a      	mov	r2, r7
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7ff ffda 	bl	8009d08 <__sfputc_r>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d1f3      	bne.n	8009d40 <__sfputs_r+0xa>
 8009d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d5c <_vfiprintf_r>:
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	460d      	mov	r5, r1
 8009d62:	b09d      	sub	sp, #116	; 0x74
 8009d64:	4614      	mov	r4, r2
 8009d66:	4698      	mov	r8, r3
 8009d68:	4606      	mov	r6, r0
 8009d6a:	b118      	cbz	r0, 8009d74 <_vfiprintf_r+0x18>
 8009d6c:	6983      	ldr	r3, [r0, #24]
 8009d6e:	b90b      	cbnz	r3, 8009d74 <_vfiprintf_r+0x18>
 8009d70:	f7ff feb8 	bl	8009ae4 <__sinit>
 8009d74:	4b89      	ldr	r3, [pc, #548]	; (8009f9c <_vfiprintf_r+0x240>)
 8009d76:	429d      	cmp	r5, r3
 8009d78:	d11b      	bne.n	8009db2 <_vfiprintf_r+0x56>
 8009d7a:	6875      	ldr	r5, [r6, #4]
 8009d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d7e:	07d9      	lsls	r1, r3, #31
 8009d80:	d405      	bmi.n	8009d8e <_vfiprintf_r+0x32>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	059a      	lsls	r2, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <_vfiprintf_r+0x32>
 8009d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d8a:	f7ff ff49 	bl	8009c20 <__retarget_lock_acquire_recursive>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	071b      	lsls	r3, r3, #28
 8009d92:	d501      	bpl.n	8009d98 <_vfiprintf_r+0x3c>
 8009d94:	692b      	ldr	r3, [r5, #16]
 8009d96:	b9eb      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x78>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff fd1a 	bl	80097d4 <__swsetup_r>
 8009da0:	b1c0      	cbz	r0, 8009dd4 <_vfiprintf_r+0x78>
 8009da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009da4:	07dc      	lsls	r4, r3, #31
 8009da6:	d50e      	bpl.n	8009dc6 <_vfiprintf_r+0x6a>
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	b01d      	add	sp, #116	; 0x74
 8009dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db2:	4b7b      	ldr	r3, [pc, #492]	; (8009fa0 <_vfiprintf_r+0x244>)
 8009db4:	429d      	cmp	r5, r3
 8009db6:	d101      	bne.n	8009dbc <_vfiprintf_r+0x60>
 8009db8:	68b5      	ldr	r5, [r6, #8]
 8009dba:	e7df      	b.n	8009d7c <_vfiprintf_r+0x20>
 8009dbc:	4b79      	ldr	r3, [pc, #484]	; (8009fa4 <_vfiprintf_r+0x248>)
 8009dbe:	429d      	cmp	r5, r3
 8009dc0:	bf08      	it	eq
 8009dc2:	68f5      	ldreq	r5, [r6, #12]
 8009dc4:	e7da      	b.n	8009d7c <_vfiprintf_r+0x20>
 8009dc6:	89ab      	ldrh	r3, [r5, #12]
 8009dc8:	0598      	lsls	r0, r3, #22
 8009dca:	d4ed      	bmi.n	8009da8 <_vfiprintf_r+0x4c>
 8009dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dce:	f7ff ff28 	bl	8009c22 <__retarget_lock_release_recursive>
 8009dd2:	e7e9      	b.n	8009da8 <_vfiprintf_r+0x4c>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	2320      	movs	r3, #32
 8009dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de2:	2330      	movs	r3, #48	; 0x30
 8009de4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fa8 <_vfiprintf_r+0x24c>
 8009de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dec:	f04f 0901 	mov.w	r9, #1
 8009df0:	4623      	mov	r3, r4
 8009df2:	469a      	mov	sl, r3
 8009df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df8:	b10a      	cbz	r2, 8009dfe <_vfiprintf_r+0xa2>
 8009dfa:	2a25      	cmp	r2, #37	; 0x25
 8009dfc:	d1f9      	bne.n	8009df2 <_vfiprintf_r+0x96>
 8009dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009e02:	d00b      	beq.n	8009e1c <_vfiprintf_r+0xc0>
 8009e04:	465b      	mov	r3, fp
 8009e06:	4622      	mov	r2, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ff93 	bl	8009d36 <__sfputs_r>
 8009e10:	3001      	adds	r0, #1
 8009e12:	f000 80aa 	beq.w	8009f6a <_vfiprintf_r+0x20e>
 8009e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e18:	445a      	add	r2, fp
 8009e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80a2 	beq.w	8009f6a <_vfiprintf_r+0x20e>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e30:	f10a 0a01 	add.w	sl, sl, #1
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	9307      	str	r3, [sp, #28]
 8009e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e3e:	4654      	mov	r4, sl
 8009e40:	2205      	movs	r2, #5
 8009e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e46:	4858      	ldr	r0, [pc, #352]	; (8009fa8 <_vfiprintf_r+0x24c>)
 8009e48:	f7f6 f9ca 	bl	80001e0 <memchr>
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	b9d8      	cbnz	r0, 8009e88 <_vfiprintf_r+0x12c>
 8009e50:	06d1      	lsls	r1, r2, #27
 8009e52:	bf44      	itt	mi
 8009e54:	2320      	movmi	r3, #32
 8009e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e5a:	0713      	lsls	r3, r2, #28
 8009e5c:	bf44      	itt	mi
 8009e5e:	232b      	movmi	r3, #43	; 0x2b
 8009e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e64:	f89a 3000 	ldrb.w	r3, [sl]
 8009e68:	2b2a      	cmp	r3, #42	; 0x2a
 8009e6a:	d015      	beq.n	8009e98 <_vfiprintf_r+0x13c>
 8009e6c:	9a07      	ldr	r2, [sp, #28]
 8009e6e:	4654      	mov	r4, sl
 8009e70:	2000      	movs	r0, #0
 8009e72:	f04f 0c0a 	mov.w	ip, #10
 8009e76:	4621      	mov	r1, r4
 8009e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e7c:	3b30      	subs	r3, #48	; 0x30
 8009e7e:	2b09      	cmp	r3, #9
 8009e80:	d94e      	bls.n	8009f20 <_vfiprintf_r+0x1c4>
 8009e82:	b1b0      	cbz	r0, 8009eb2 <_vfiprintf_r+0x156>
 8009e84:	9207      	str	r2, [sp, #28]
 8009e86:	e014      	b.n	8009eb2 <_vfiprintf_r+0x156>
 8009e88:	eba0 0308 	sub.w	r3, r0, r8
 8009e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e90:	4313      	orrs	r3, r2
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	46a2      	mov	sl, r4
 8009e96:	e7d2      	b.n	8009e3e <_vfiprintf_r+0xe2>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	1d19      	adds	r1, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9103      	str	r1, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfbb      	ittet	lt
 8009ea4:	425b      	neglt	r3, r3
 8009ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8009eaa:	9307      	strge	r3, [sp, #28]
 8009eac:	9307      	strlt	r3, [sp, #28]
 8009eae:	bfb8      	it	lt
 8009eb0:	9204      	strlt	r2, [sp, #16]
 8009eb2:	7823      	ldrb	r3, [r4, #0]
 8009eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb6:	d10c      	bne.n	8009ed2 <_vfiprintf_r+0x176>
 8009eb8:	7863      	ldrb	r3, [r4, #1]
 8009eba:	2b2a      	cmp	r3, #42	; 0x2a
 8009ebc:	d135      	bne.n	8009f2a <_vfiprintf_r+0x1ce>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9203      	str	r2, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfb8      	it	lt
 8009eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ece:	3402      	adds	r4, #2
 8009ed0:	9305      	str	r3, [sp, #20]
 8009ed2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fb8 <_vfiprintf_r+0x25c>
 8009ed6:	7821      	ldrb	r1, [r4, #0]
 8009ed8:	2203      	movs	r2, #3
 8009eda:	4650      	mov	r0, sl
 8009edc:	f7f6 f980 	bl	80001e0 <memchr>
 8009ee0:	b140      	cbz	r0, 8009ef4 <_vfiprintf_r+0x198>
 8009ee2:	2340      	movs	r3, #64	; 0x40
 8009ee4:	eba0 000a 	sub.w	r0, r0, sl
 8009ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	4303      	orrs	r3, r0
 8009ef0:	3401      	adds	r4, #1
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef8:	482c      	ldr	r0, [pc, #176]	; (8009fac <_vfiprintf_r+0x250>)
 8009efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009efe:	2206      	movs	r2, #6
 8009f00:	f7f6 f96e 	bl	80001e0 <memchr>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d03f      	beq.n	8009f88 <_vfiprintf_r+0x22c>
 8009f08:	4b29      	ldr	r3, [pc, #164]	; (8009fb0 <_vfiprintf_r+0x254>)
 8009f0a:	bb1b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x1f8>
 8009f0c:	9b03      	ldr	r3, [sp, #12]
 8009f0e:	3307      	adds	r3, #7
 8009f10:	f023 0307 	bic.w	r3, r3, #7
 8009f14:	3308      	adds	r3, #8
 8009f16:	9303      	str	r3, [sp, #12]
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	443b      	add	r3, r7
 8009f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1e:	e767      	b.n	8009df0 <_vfiprintf_r+0x94>
 8009f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f24:	460c      	mov	r4, r1
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7a5      	b.n	8009e76 <_vfiprintf_r+0x11a>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	9305      	str	r3, [sp, #20]
 8009f30:	4619      	mov	r1, r3
 8009f32:	f04f 0c0a 	mov.w	ip, #10
 8009f36:	4620      	mov	r0, r4
 8009f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f3c:	3a30      	subs	r2, #48	; 0x30
 8009f3e:	2a09      	cmp	r2, #9
 8009f40:	d903      	bls.n	8009f4a <_vfiprintf_r+0x1ee>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0c5      	beq.n	8009ed2 <_vfiprintf_r+0x176>
 8009f46:	9105      	str	r1, [sp, #20]
 8009f48:	e7c3      	b.n	8009ed2 <_vfiprintf_r+0x176>
 8009f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f4e:	4604      	mov	r4, r0
 8009f50:	2301      	movs	r3, #1
 8009f52:	e7f0      	b.n	8009f36 <_vfiprintf_r+0x1da>
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	462a      	mov	r2, r5
 8009f5a:	4b16      	ldr	r3, [pc, #88]	; (8009fb4 <_vfiprintf_r+0x258>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f3af 8000 	nop.w
 8009f64:	4607      	mov	r7, r0
 8009f66:	1c78      	adds	r0, r7, #1
 8009f68:	d1d6      	bne.n	8009f18 <_vfiprintf_r+0x1bc>
 8009f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f6c:	07d9      	lsls	r1, r3, #31
 8009f6e:	d405      	bmi.n	8009f7c <_vfiprintf_r+0x220>
 8009f70:	89ab      	ldrh	r3, [r5, #12]
 8009f72:	059a      	lsls	r2, r3, #22
 8009f74:	d402      	bmi.n	8009f7c <_vfiprintf_r+0x220>
 8009f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f78:	f7ff fe53 	bl	8009c22 <__retarget_lock_release_recursive>
 8009f7c:	89ab      	ldrh	r3, [r5, #12]
 8009f7e:	065b      	lsls	r3, r3, #25
 8009f80:	f53f af12 	bmi.w	8009da8 <_vfiprintf_r+0x4c>
 8009f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f86:	e711      	b.n	8009dac <_vfiprintf_r+0x50>
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <_vfiprintf_r+0x258>)
 8009f90:	a904      	add	r1, sp, #16
 8009f92:	4630      	mov	r0, r6
 8009f94:	f000 f880 	bl	800a098 <_printf_i>
 8009f98:	e7e4      	b.n	8009f64 <_vfiprintf_r+0x208>
 8009f9a:	bf00      	nop
 8009f9c:	0800a66c 	.word	0x0800a66c
 8009fa0:	0800a68c 	.word	0x0800a68c
 8009fa4:	0800a64c 	.word	0x0800a64c
 8009fa8:	0800a6ac 	.word	0x0800a6ac
 8009fac:	0800a6b6 	.word	0x0800a6b6
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	08009d37 	.word	0x08009d37
 8009fb8:	0800a6b2 	.word	0x0800a6b2

08009fbc <_printf_common>:
 8009fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	4616      	mov	r6, r2
 8009fc2:	4699      	mov	r9, r3
 8009fc4:	688a      	ldr	r2, [r1, #8]
 8009fc6:	690b      	ldr	r3, [r1, #16]
 8009fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	bfb8      	it	lt
 8009fd0:	4613      	movlt	r3, r2
 8009fd2:	6033      	str	r3, [r6, #0]
 8009fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd8:	4607      	mov	r7, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	b10a      	cbz	r2, 8009fe2 <_printf_common+0x26>
 8009fde:	3301      	adds	r3, #1
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	0699      	lsls	r1, r3, #26
 8009fe6:	bf42      	ittt	mi
 8009fe8:	6833      	ldrmi	r3, [r6, #0]
 8009fea:	3302      	addmi	r3, #2
 8009fec:	6033      	strmi	r3, [r6, #0]
 8009fee:	6825      	ldr	r5, [r4, #0]
 8009ff0:	f015 0506 	ands.w	r5, r5, #6
 8009ff4:	d106      	bne.n	800a004 <_printf_common+0x48>
 8009ff6:	f104 0a19 	add.w	sl, r4, #25
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	6832      	ldr	r2, [r6, #0]
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	42ab      	cmp	r3, r5
 800a002:	dc26      	bgt.n	800a052 <_printf_common+0x96>
 800a004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a008:	1e13      	subs	r3, r2, #0
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	bf18      	it	ne
 800a00e:	2301      	movne	r3, #1
 800a010:	0692      	lsls	r2, r2, #26
 800a012:	d42b      	bmi.n	800a06c <_printf_common+0xb0>
 800a014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a018:	4649      	mov	r1, r9
 800a01a:	4638      	mov	r0, r7
 800a01c:	47c0      	blx	r8
 800a01e:	3001      	adds	r0, #1
 800a020:	d01e      	beq.n	800a060 <_printf_common+0xa4>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	68e5      	ldr	r5, [r4, #12]
 800a026:	6832      	ldr	r2, [r6, #0]
 800a028:	f003 0306 	and.w	r3, r3, #6
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	bf08      	it	eq
 800a030:	1aad      	subeq	r5, r5, r2
 800a032:	68a3      	ldr	r3, [r4, #8]
 800a034:	6922      	ldr	r2, [r4, #16]
 800a036:	bf0c      	ite	eq
 800a038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a03c:	2500      	movne	r5, #0
 800a03e:	4293      	cmp	r3, r2
 800a040:	bfc4      	itt	gt
 800a042:	1a9b      	subgt	r3, r3, r2
 800a044:	18ed      	addgt	r5, r5, r3
 800a046:	2600      	movs	r6, #0
 800a048:	341a      	adds	r4, #26
 800a04a:	42b5      	cmp	r5, r6
 800a04c:	d11a      	bne.n	800a084 <_printf_common+0xc8>
 800a04e:	2000      	movs	r0, #0
 800a050:	e008      	b.n	800a064 <_printf_common+0xa8>
 800a052:	2301      	movs	r3, #1
 800a054:	4652      	mov	r2, sl
 800a056:	4649      	mov	r1, r9
 800a058:	4638      	mov	r0, r7
 800a05a:	47c0      	blx	r8
 800a05c:	3001      	adds	r0, #1
 800a05e:	d103      	bne.n	800a068 <_printf_common+0xac>
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a068:	3501      	adds	r5, #1
 800a06a:	e7c6      	b.n	8009ffa <_printf_common+0x3e>
 800a06c:	18e1      	adds	r1, r4, r3
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	2030      	movs	r0, #48	; 0x30
 800a072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a076:	4422      	add	r2, r4
 800a078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a07c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a080:	3302      	adds	r3, #2
 800a082:	e7c7      	b.n	800a014 <_printf_common+0x58>
 800a084:	2301      	movs	r3, #1
 800a086:	4622      	mov	r2, r4
 800a088:	4649      	mov	r1, r9
 800a08a:	4638      	mov	r0, r7
 800a08c:	47c0      	blx	r8
 800a08e:	3001      	adds	r0, #1
 800a090:	d0e6      	beq.n	800a060 <_printf_common+0xa4>
 800a092:	3601      	adds	r6, #1
 800a094:	e7d9      	b.n	800a04a <_printf_common+0x8e>
	...

0800a098 <_printf_i>:
 800a098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	7e0f      	ldrb	r7, [r1, #24]
 800a09e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0a0:	2f78      	cmp	r7, #120	; 0x78
 800a0a2:	4691      	mov	r9, r2
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ae:	d807      	bhi.n	800a0c0 <_printf_i+0x28>
 800a0b0:	2f62      	cmp	r7, #98	; 0x62
 800a0b2:	d80a      	bhi.n	800a0ca <_printf_i+0x32>
 800a0b4:	2f00      	cmp	r7, #0
 800a0b6:	f000 80d8 	beq.w	800a26a <_printf_i+0x1d2>
 800a0ba:	2f58      	cmp	r7, #88	; 0x58
 800a0bc:	f000 80a3 	beq.w	800a206 <_printf_i+0x16e>
 800a0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c8:	e03a      	b.n	800a140 <_printf_i+0xa8>
 800a0ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ce:	2b15      	cmp	r3, #21
 800a0d0:	d8f6      	bhi.n	800a0c0 <_printf_i+0x28>
 800a0d2:	a101      	add	r1, pc, #4	; (adr r1, 800a0d8 <_printf_i+0x40>)
 800a0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d8:	0800a131 	.word	0x0800a131
 800a0dc:	0800a145 	.word	0x0800a145
 800a0e0:	0800a0c1 	.word	0x0800a0c1
 800a0e4:	0800a0c1 	.word	0x0800a0c1
 800a0e8:	0800a0c1 	.word	0x0800a0c1
 800a0ec:	0800a0c1 	.word	0x0800a0c1
 800a0f0:	0800a145 	.word	0x0800a145
 800a0f4:	0800a0c1 	.word	0x0800a0c1
 800a0f8:	0800a0c1 	.word	0x0800a0c1
 800a0fc:	0800a0c1 	.word	0x0800a0c1
 800a100:	0800a0c1 	.word	0x0800a0c1
 800a104:	0800a251 	.word	0x0800a251
 800a108:	0800a175 	.word	0x0800a175
 800a10c:	0800a233 	.word	0x0800a233
 800a110:	0800a0c1 	.word	0x0800a0c1
 800a114:	0800a0c1 	.word	0x0800a0c1
 800a118:	0800a273 	.word	0x0800a273
 800a11c:	0800a0c1 	.word	0x0800a0c1
 800a120:	0800a175 	.word	0x0800a175
 800a124:	0800a0c1 	.word	0x0800a0c1
 800a128:	0800a0c1 	.word	0x0800a0c1
 800a12c:	0800a23b 	.word	0x0800a23b
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	602a      	str	r2, [r5, #0]
 800a138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a13c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a140:	2301      	movs	r3, #1
 800a142:	e0a3      	b.n	800a28c <_printf_i+0x1f4>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	6829      	ldr	r1, [r5, #0]
 800a148:	0606      	lsls	r6, r0, #24
 800a14a:	f101 0304 	add.w	r3, r1, #4
 800a14e:	d50a      	bpl.n	800a166 <_printf_i+0xce>
 800a150:	680e      	ldr	r6, [r1, #0]
 800a152:	602b      	str	r3, [r5, #0]
 800a154:	2e00      	cmp	r6, #0
 800a156:	da03      	bge.n	800a160 <_printf_i+0xc8>
 800a158:	232d      	movs	r3, #45	; 0x2d
 800a15a:	4276      	negs	r6, r6
 800a15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a160:	485e      	ldr	r0, [pc, #376]	; (800a2dc <_printf_i+0x244>)
 800a162:	230a      	movs	r3, #10
 800a164:	e019      	b.n	800a19a <_printf_i+0x102>
 800a166:	680e      	ldr	r6, [r1, #0]
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a16e:	bf18      	it	ne
 800a170:	b236      	sxthne	r6, r6
 800a172:	e7ef      	b.n	800a154 <_printf_i+0xbc>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	6029      	str	r1, [r5, #0]
 800a17c:	0601      	lsls	r1, r0, #24
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0xec>
 800a180:	681e      	ldr	r6, [r3, #0]
 800a182:	e002      	b.n	800a18a <_printf_i+0xf2>
 800a184:	0646      	lsls	r6, r0, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0xe8>
 800a188:	881e      	ldrh	r6, [r3, #0]
 800a18a:	4854      	ldr	r0, [pc, #336]	; (800a2dc <_printf_i+0x244>)
 800a18c:	2f6f      	cmp	r7, #111	; 0x6f
 800a18e:	bf0c      	ite	eq
 800a190:	2308      	moveq	r3, #8
 800a192:	230a      	movne	r3, #10
 800a194:	2100      	movs	r1, #0
 800a196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a19a:	6865      	ldr	r5, [r4, #4]
 800a19c:	60a5      	str	r5, [r4, #8]
 800a19e:	2d00      	cmp	r5, #0
 800a1a0:	bfa2      	ittt	ge
 800a1a2:	6821      	ldrge	r1, [r4, #0]
 800a1a4:	f021 0104 	bicge.w	r1, r1, #4
 800a1a8:	6021      	strge	r1, [r4, #0]
 800a1aa:	b90e      	cbnz	r6, 800a1b0 <_printf_i+0x118>
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	d04d      	beq.n	800a24c <_printf_i+0x1b4>
 800a1b0:	4615      	mov	r5, r2
 800a1b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1b6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1ba:	5dc7      	ldrb	r7, [r0, r7]
 800a1bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1c0:	4637      	mov	r7, r6
 800a1c2:	42bb      	cmp	r3, r7
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	d9f4      	bls.n	800a1b2 <_printf_i+0x11a>
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d10b      	bne.n	800a1e4 <_printf_i+0x14c>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	07de      	lsls	r6, r3, #31
 800a1d0:	d508      	bpl.n	800a1e4 <_printf_i+0x14c>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	6861      	ldr	r1, [r4, #4]
 800a1d6:	4299      	cmp	r1, r3
 800a1d8:	bfde      	ittt	le
 800a1da:	2330      	movle	r3, #48	; 0x30
 800a1dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1e4:	1b52      	subs	r2, r2, r5
 800a1e6:	6122      	str	r2, [r4, #16]
 800a1e8:	f8cd a000 	str.w	sl, [sp]
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	aa03      	add	r2, sp, #12
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f7ff fee2 	bl	8009fbc <_printf_common>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d14c      	bne.n	800a296 <_printf_i+0x1fe>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	b004      	add	sp, #16
 800a202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a206:	4835      	ldr	r0, [pc, #212]	; (800a2dc <_printf_i+0x244>)
 800a208:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a20c:	6829      	ldr	r1, [r5, #0]
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f851 6b04 	ldr.w	r6, [r1], #4
 800a214:	6029      	str	r1, [r5, #0]
 800a216:	061d      	lsls	r5, r3, #24
 800a218:	d514      	bpl.n	800a244 <_printf_i+0x1ac>
 800a21a:	07df      	lsls	r7, r3, #31
 800a21c:	bf44      	itt	mi
 800a21e:	f043 0320 	orrmi.w	r3, r3, #32
 800a222:	6023      	strmi	r3, [r4, #0]
 800a224:	b91e      	cbnz	r6, 800a22e <_printf_i+0x196>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	f023 0320 	bic.w	r3, r3, #32
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	2310      	movs	r3, #16
 800a230:	e7b0      	b.n	800a194 <_printf_i+0xfc>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	f043 0320 	orr.w	r3, r3, #32
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	2378      	movs	r3, #120	; 0x78
 800a23c:	4828      	ldr	r0, [pc, #160]	; (800a2e0 <_printf_i+0x248>)
 800a23e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a242:	e7e3      	b.n	800a20c <_printf_i+0x174>
 800a244:	0659      	lsls	r1, r3, #25
 800a246:	bf48      	it	mi
 800a248:	b2b6      	uxthmi	r6, r6
 800a24a:	e7e6      	b.n	800a21a <_printf_i+0x182>
 800a24c:	4615      	mov	r5, r2
 800a24e:	e7bb      	b.n	800a1c8 <_printf_i+0x130>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	6826      	ldr	r6, [r4, #0]
 800a254:	6961      	ldr	r1, [r4, #20]
 800a256:	1d18      	adds	r0, r3, #4
 800a258:	6028      	str	r0, [r5, #0]
 800a25a:	0635      	lsls	r5, r6, #24
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	d501      	bpl.n	800a264 <_printf_i+0x1cc>
 800a260:	6019      	str	r1, [r3, #0]
 800a262:	e002      	b.n	800a26a <_printf_i+0x1d2>
 800a264:	0670      	lsls	r0, r6, #25
 800a266:	d5fb      	bpl.n	800a260 <_printf_i+0x1c8>
 800a268:	8019      	strh	r1, [r3, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	6123      	str	r3, [r4, #16]
 800a26e:	4615      	mov	r5, r2
 800a270:	e7ba      	b.n	800a1e8 <_printf_i+0x150>
 800a272:	682b      	ldr	r3, [r5, #0]
 800a274:	1d1a      	adds	r2, r3, #4
 800a276:	602a      	str	r2, [r5, #0]
 800a278:	681d      	ldr	r5, [r3, #0]
 800a27a:	6862      	ldr	r2, [r4, #4]
 800a27c:	2100      	movs	r1, #0
 800a27e:	4628      	mov	r0, r5
 800a280:	f7f5 ffae 	bl	80001e0 <memchr>
 800a284:	b108      	cbz	r0, 800a28a <_printf_i+0x1f2>
 800a286:	1b40      	subs	r0, r0, r5
 800a288:	6060      	str	r0, [r4, #4]
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	2300      	movs	r3, #0
 800a290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a294:	e7a8      	b.n	800a1e8 <_printf_i+0x150>
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	462a      	mov	r2, r5
 800a29a:	4649      	mov	r1, r9
 800a29c:	4640      	mov	r0, r8
 800a29e:	47d0      	blx	sl
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d0ab      	beq.n	800a1fc <_printf_i+0x164>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	079b      	lsls	r3, r3, #30
 800a2a8:	d413      	bmi.n	800a2d2 <_printf_i+0x23a>
 800a2aa:	68e0      	ldr	r0, [r4, #12]
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	4298      	cmp	r0, r3
 800a2b0:	bfb8      	it	lt
 800a2b2:	4618      	movlt	r0, r3
 800a2b4:	e7a4      	b.n	800a200 <_printf_i+0x168>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	4640      	mov	r0, r8
 800a2be:	47d0      	blx	sl
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d09b      	beq.n	800a1fc <_printf_i+0x164>
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	68e3      	ldr	r3, [r4, #12]
 800a2c8:	9903      	ldr	r1, [sp, #12]
 800a2ca:	1a5b      	subs	r3, r3, r1
 800a2cc:	42ab      	cmp	r3, r5
 800a2ce:	dcf2      	bgt.n	800a2b6 <_printf_i+0x21e>
 800a2d0:	e7eb      	b.n	800a2aa <_printf_i+0x212>
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	f104 0619 	add.w	r6, r4, #25
 800a2d8:	e7f5      	b.n	800a2c6 <_printf_i+0x22e>
 800a2da:	bf00      	nop
 800a2dc:	0800a6bd 	.word	0x0800a6bd
 800a2e0:	0800a6ce 	.word	0x0800a6ce

0800a2e4 <__sread>:
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ec:	f000 f894 	bl	800a418 <_read_r>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	bfab      	itete	ge
 800a2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2f8:	181b      	addge	r3, r3, r0
 800a2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2fe:	bfac      	ite	ge
 800a300:	6563      	strge	r3, [r4, #84]	; 0x54
 800a302:	81a3      	strhlt	r3, [r4, #12]
 800a304:	bd10      	pop	{r4, pc}

0800a306 <__swrite>:
 800a306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	461f      	mov	r7, r3
 800a30c:	898b      	ldrh	r3, [r1, #12]
 800a30e:	05db      	lsls	r3, r3, #23
 800a310:	4605      	mov	r5, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4616      	mov	r6, r2
 800a316:	d505      	bpl.n	800a324 <__swrite+0x1e>
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	2302      	movs	r3, #2
 800a31e:	2200      	movs	r2, #0
 800a320:	f000 f868 	bl	800a3f4 <_lseek_r>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	4632      	mov	r2, r6
 800a332:	463b      	mov	r3, r7
 800a334:	4628      	mov	r0, r5
 800a336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	f000 b817 	b.w	800a36c <_write_r>

0800a33e <__sseek>:
 800a33e:	b510      	push	{r4, lr}
 800a340:	460c      	mov	r4, r1
 800a342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a346:	f000 f855 	bl	800a3f4 <_lseek_r>
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	bf15      	itete	ne
 800a350:	6560      	strne	r0, [r4, #84]	; 0x54
 800a352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a35a:	81a3      	strheq	r3, [r4, #12]
 800a35c:	bf18      	it	ne
 800a35e:	81a3      	strhne	r3, [r4, #12]
 800a360:	bd10      	pop	{r4, pc}

0800a362 <__sclose>:
 800a362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a366:	f000 b813 	b.w	800a390 <_close_r>
	...

0800a36c <_write_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d07      	ldr	r5, [pc, #28]	; (800a38c <_write_r+0x20>)
 800a370:	4604      	mov	r4, r0
 800a372:	4608      	mov	r0, r1
 800a374:	4611      	mov	r1, r2
 800a376:	2200      	movs	r2, #0
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f6 fe8e 	bl	800109c <_write>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_write_r+0x1e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_write_r+0x1e>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20003cd8 	.word	0x20003cd8

0800a390 <_close_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_close_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7f7 fa41 	bl	8001822 <_close>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_close_r+0x1a>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_close_r+0x1a>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	20003cd8 	.word	0x20003cd8

0800a3b0 <_fstat_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d07      	ldr	r5, [pc, #28]	; (800a3d0 <_fstat_r+0x20>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	f7f7 fa3c 	bl	800183a <_fstat>
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	d102      	bne.n	800a3cc <_fstat_r+0x1c>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b103      	cbz	r3, 800a3cc <_fstat_r+0x1c>
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20003cd8 	.word	0x20003cd8

0800a3d4 <_isatty_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4d06      	ldr	r5, [pc, #24]	; (800a3f0 <_isatty_r+0x1c>)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4608      	mov	r0, r1
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	f7f7 fa3b 	bl	800185a <_isatty>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_isatty_r+0x1a>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_isatty_r+0x1a>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20003cd8 	.word	0x20003cd8

0800a3f4 <_lseek_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	; (800a414 <_lseek_r+0x20>)
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f7f7 fa34 	bl	8001870 <_lseek>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_lseek_r+0x1e>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_lseek_r+0x1e>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	20003cd8 	.word	0x20003cd8

0800a418 <_read_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	; (800a438 <_read_r+0x20>)
 800a41c:	4604      	mov	r4, r0
 800a41e:	4608      	mov	r0, r1
 800a420:	4611      	mov	r1, r2
 800a422:	2200      	movs	r2, #0
 800a424:	602a      	str	r2, [r5, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	f7f7 f9de 	bl	80017e8 <_read>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_read_r+0x1e>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	b103      	cbz	r3, 800a436 <_read_r+0x1e>
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20003cd8 	.word	0x20003cd8

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
